# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.meta_data_inner import MetaDataInner  # noqa: F401,E501
from swagger_server import util


class AllocateNetworkResultSubnetData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address_pool: List[int]=None, cidr: str=None, gateway_ip: str=None, ip_version: str=None, is_dhcp_enabled: bool=None, metadata: List[MetaDataInner]=None, network_id: str=None, operational_state: str=None, resource_id: str=None):  # noqa: E501
        """AllocateNetworkResultSubnetData - a model defined in Swagger

        :param address_pool: The address_pool of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type address_pool: List[int]
        :param cidr: The cidr of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type cidr: str
        :param gateway_ip: The gateway_ip of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type gateway_ip: str
        :param ip_version: The ip_version of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type ip_version: str
        :param is_dhcp_enabled: The is_dhcp_enabled of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type is_dhcp_enabled: bool
        :param metadata: The metadata of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type metadata: List[MetaDataInner]
        :param network_id: The network_id of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type network_id: str
        :param operational_state: The operational_state of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type operational_state: str
        :param resource_id: The resource_id of this AllocateNetworkResultSubnetData.  # noqa: E501
        :type resource_id: str
        """
        self.swagger_types = {
            'address_pool': List[int],
            'cidr': str,
            'gateway_ip': str,
            'ip_version': str,
            'is_dhcp_enabled': bool,
            'metadata': List[MetaDataInner],
            'network_id': str,
            'operational_state': str,
            'resource_id': str
        }

        self.attribute_map = {
            'address_pool': 'addressPool',
            'cidr': 'cidr',
            'gateway_ip': 'gatewayIp',
            'ip_version': 'ipVersion',
            'is_dhcp_enabled': 'isDhcpEnabled',
            'metadata': 'metadata',
            'network_id': 'networkId',
            'operational_state': 'operationalState',
            'resource_id': 'resourceId'
        }

        self._address_pool = address_pool
        self._cidr = cidr
        self._gateway_ip = gateway_ip
        self._ip_version = ip_version
        self._is_dhcp_enabled = is_dhcp_enabled
        self._metadata = metadata
        self._network_id = network_id
        self._operational_state = operational_state
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateNetworkResultSubnetData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateNetworkResult_subnetData of this AllocateNetworkResultSubnetData.  # noqa: E501
        :rtype: AllocateNetworkResultSubnetData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_pool(self) -> List[int]:
        """Gets the address_pool of this AllocateNetworkResultSubnetData.

        Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.  # noqa: E501

        :return: The address_pool of this AllocateNetworkResultSubnetData.
        :rtype: List[int]
        """
        return self._address_pool

    @address_pool.setter
    def address_pool(self, address_pool: List[int]):
        """Sets the address_pool of this AllocateNetworkResultSubnetData.

        Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.  # noqa: E501

        :param address_pool: The address_pool of this AllocateNetworkResultSubnetData.
        :type address_pool: List[int]
        """
        if address_pool is None:
            raise ValueError("Invalid value for `address_pool`, must not be `None`")  # noqa: E501

        self._address_pool = address_pool

    @property
    def cidr(self) -> str:
        """Gets the cidr of this AllocateNetworkResultSubnetData.

        The CIDR of the network/subnetwork, i.e. network address and subnet mask.  # noqa: E501

        :return: The cidr of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr: str):
        """Sets the cidr of this AllocateNetworkResultSubnetData.

        The CIDR of the network/subnetwork, i.e. network address and subnet mask.  # noqa: E501

        :param cidr: The cidr of this AllocateNetworkResultSubnetData.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def gateway_ip(self) -> str:
        """Gets the gateway_ip of this AllocateNetworkResultSubnetData.

        The IP address of the network/subnetwork gateway.  # noqa: E501

        :return: The gateway_ip of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip: str):
        """Sets the gateway_ip of this AllocateNetworkResultSubnetData.

        The IP address of the network/subnetwork gateway.  # noqa: E501

        :param gateway_ip: The gateway_ip of this AllocateNetworkResultSubnetData.
        :type gateway_ip: str
        """
        if gateway_ip is None:
            raise ValueError("Invalid value for `gateway_ip`, must not be `None`")  # noqa: E501

        self._gateway_ip = gateway_ip

    @property
    def ip_version(self) -> str:
        """Gets the ip_version of this AllocateNetworkResultSubnetData.

        The IP version of the network/subnetwork.  # noqa: E501

        :return: The ip_version of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version: str):
        """Sets the ip_version of this AllocateNetworkResultSubnetData.

        The IP version of the network/subnetwork.  # noqa: E501

        :param ip_version: The ip_version of this AllocateNetworkResultSubnetData.
        :type ip_version: str
        """
        if ip_version is None:
            raise ValueError("Invalid value for `ip_version`, must not be `None`")  # noqa: E501

        self._ip_version = ip_version

    @property
    def is_dhcp_enabled(self) -> bool:
        """Gets the is_dhcp_enabled of this AllocateNetworkResultSubnetData.

        True when DHCP is enabled for this network/subnetwork, or false otherwise.  # noqa: E501

        :return: The is_dhcp_enabled of this AllocateNetworkResultSubnetData.
        :rtype: bool
        """
        return self._is_dhcp_enabled

    @is_dhcp_enabled.setter
    def is_dhcp_enabled(self, is_dhcp_enabled: bool):
        """Sets the is_dhcp_enabled of this AllocateNetworkResultSubnetData.

        True when DHCP is enabled for this network/subnetwork, or false otherwise.  # noqa: E501

        :param is_dhcp_enabled: The is_dhcp_enabled of this AllocateNetworkResultSubnetData.
        :type is_dhcp_enabled: bool
        """
        if is_dhcp_enabled is None:
            raise ValueError("Invalid value for `is_dhcp_enabled`, must not be `None`")  # noqa: E501

        self._is_dhcp_enabled = is_dhcp_enabled

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this AllocateNetworkResultSubnetData.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :return: The metadata of this AllocateNetworkResultSubnetData.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this AllocateNetworkResultSubnetData.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :param metadata: The metadata of this AllocateNetworkResultSubnetData.
        :type metadata: List[MetaDataInner]
        """

        self._metadata = metadata

    @property
    def network_id(self) -> str:
        """Gets the network_id of this AllocateNetworkResultSubnetData.

        The identifier of the virtualised network that the virtualised sub-network is attached to. The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather than a subnetwork.  # noqa: E501

        :return: The network_id of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id: str):
        """Sets the network_id of this AllocateNetworkResultSubnetData.

        The identifier of the virtualised network that the virtualised sub-network is attached to. The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather than a subnetwork.  # noqa: E501

        :param network_id: The network_id of this AllocateNetworkResultSubnetData.
        :type network_id: str
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this AllocateNetworkResultSubnetData.

        The operational state of the virtualised sub-network.  # noqa: E501

        :return: The operational_state of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this AllocateNetworkResultSubnetData.

        The operational state of the virtualised sub-network.  # noqa: E501

        :param operational_state: The operational_state of this AllocateNetworkResultSubnetData.
        :type operational_state: str
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")  # noqa: E501

        self._operational_state = operational_state

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this AllocateNetworkResultSubnetData.

        Identifier of the virtualised sub-network.  # noqa: E501

        :return: The resource_id of this AllocateNetworkResultSubnetData.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this AllocateNetworkResultSubnetData.

        Identifier of the virtualised sub-network.  # noqa: E501

        :param resource_id: The resource_id of this AllocateNetworkResultSubnetData.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id
