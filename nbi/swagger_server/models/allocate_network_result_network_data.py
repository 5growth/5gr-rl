# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.meta_data_inner import MetaDataInner  # noqa: F401,E501
from swagger_server.models.virtual_network_network_port import VirtualNetworkNetworkPort  # noqa: F401,E501
from swagger_server.models.virtual_network_network_qo_s import VirtualNetworkNetworkQoS  # noqa: F401,E501
from swagger_server import util


class AllocateNetworkResultNetworkData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: float=None, is_shared: bool=None, network_port: List[VirtualNetworkNetworkPort]=None, network_qo_s: List[VirtualNetworkNetworkQoS]=None, network_resource_id: str=None, network_resource_name: str=None, network_type: str=None, operational_state: str=None, segment_type: str=None, sharing_criteria: str=None, subnet: List[str]=None, zone_id: str=None, metadata: List[MetaDataInner]=None):  # noqa: E501
        """AllocateNetworkResultNetworkData - a model defined in Swagger

        :param bandwidth: The bandwidth of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type bandwidth: float
        :param is_shared: The is_shared of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type is_shared: bool
        :param network_port: The network_port of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type network_port: List[VirtualNetworkNetworkPort]
        :param network_qo_s: The network_qo_s of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type network_qo_s: List[VirtualNetworkNetworkQoS]
        :param network_resource_id: The network_resource_id of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type network_resource_id: str
        :param network_resource_name: The network_resource_name of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type network_resource_name: str
        :param network_type: The network_type of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type network_type: str
        :param operational_state: The operational_state of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type operational_state: str
        :param segment_type: The segment_type of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type segment_type: str
        :param sharing_criteria: The sharing_criteria of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type sharing_criteria: str
        :param subnet: The subnet of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type subnet: List[str]
        :param zone_id: The zone_id of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type zone_id: str
        :param metadata: The metadata of this AllocateNetworkResultNetworkData.  # noqa: E501
        :type metadata: List[MetaDataInner]
        """
        self.swagger_types = {
            'bandwidth': float,
            'is_shared': bool,
            'network_port': List[VirtualNetworkNetworkPort],
            'network_qo_s': List[VirtualNetworkNetworkQoS],
            'network_resource_id': str,
            'network_resource_name': str,
            'network_type': str,
            'operational_state': str,
            'segment_type': str,
            'sharing_criteria': str,
            'subnet': List[str],
            'zone_id': str,
            'metadata': List[MetaDataInner]
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'is_shared': 'isShared',
            'network_port': 'networkPort',
            'network_qo_s': 'networkQoS',
            'network_resource_id': 'networkResourceId',
            'network_resource_name': 'networkResourceName',
            'network_type': 'networkType',
            'operational_state': 'operationalState',
            'segment_type': 'segmentType',
            'sharing_criteria': 'sharingCriteria',
            'subnet': 'subnet',
            'zone_id': 'zoneId',
            'metadata': 'metadata'
        }

        self._bandwidth = bandwidth
        self._is_shared = is_shared
        self._network_port = network_port
        self._network_qo_s = network_qo_s
        self._network_resource_id = network_resource_id
        self._network_resource_name = network_resource_name
        self._network_type = network_type
        self._operational_state = operational_state
        self._segment_type = segment_type
        self._sharing_criteria = sharing_criteria
        self._subnet = subnet
        self._zone_id = zone_id
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateNetworkResultNetworkData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateNetworkResult_networkData of this AllocateNetworkResultNetworkData.  # noqa: E501
        :rtype: AllocateNetworkResultNetworkData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this AllocateNetworkResultNetworkData.

        Minimum network bandwidth (in Mbps).  # noqa: E501

        :return: The bandwidth of this AllocateNetworkResultNetworkData.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this AllocateNetworkResultNetworkData.

        Minimum network bandwidth (in Mbps).  # noqa: E501

        :param bandwidth: The bandwidth of this AllocateNetworkResultNetworkData.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def is_shared(self) -> bool:
        """Gets the is_shared of this AllocateNetworkResultNetworkData.

        It defines whether the virtualised network is shared among consumers.  # noqa: E501

        :return: The is_shared of this AllocateNetworkResultNetworkData.
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared: bool):
        """Sets the is_shared of this AllocateNetworkResultNetworkData.

        It defines whether the virtualised network is shared among consumers.  # noqa: E501

        :param is_shared: The is_shared of this AllocateNetworkResultNetworkData.
        :type is_shared: bool
        """
        if is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")  # noqa: E501

        self._is_shared = is_shared

    @property
    def network_port(self) -> List[VirtualNetworkNetworkPort]:
        """Gets the network_port of this AllocateNetworkResultNetworkData.

        Element providing information of an instantiated virtual network port.  # noqa: E501

        :return: The network_port of this AllocateNetworkResultNetworkData.
        :rtype: List[VirtualNetworkNetworkPort]
        """
        return self._network_port

    @network_port.setter
    def network_port(self, network_port: List[VirtualNetworkNetworkPort]):
        """Sets the network_port of this AllocateNetworkResultNetworkData.

        Element providing information of an instantiated virtual network port.  # noqa: E501

        :param network_port: The network_port of this AllocateNetworkResultNetworkData.
        :type network_port: List[VirtualNetworkNetworkPort]
        """
        if network_port is None:
            raise ValueError("Invalid value for `network_port`, must not be `None`")  # noqa: E501

        self._network_port = network_port

    @property
    def network_qo_s(self) -> List[VirtualNetworkNetworkQoS]:
        """Gets the network_qo_s of this AllocateNetworkResultNetworkData.

        Element providing information about Quality of Service attributes that the network shall support. The cardinality can be \"0\" to allow for networks without any specified QoS requirements.  # noqa: E501

        :return: The network_qo_s of this AllocateNetworkResultNetworkData.
        :rtype: List[VirtualNetworkNetworkQoS]
        """
        return self._network_qo_s

    @network_qo_s.setter
    def network_qo_s(self, network_qo_s: List[VirtualNetworkNetworkQoS]):
        """Sets the network_qo_s of this AllocateNetworkResultNetworkData.

        Element providing information about Quality of Service attributes that the network shall support. The cardinality can be \"0\" to allow for networks without any specified QoS requirements.  # noqa: E501

        :param network_qo_s: The network_qo_s of this AllocateNetworkResultNetworkData.
        :type network_qo_s: List[VirtualNetworkNetworkQoS]
        """
        if network_qo_s is None:
            raise ValueError("Invalid value for `network_qo_s`, must not be `None`")  # noqa: E501

        self._network_qo_s = network_qo_s

    @property
    def network_resource_id(self) -> str:
        """Gets the network_resource_id of this AllocateNetworkResultNetworkData.

        Identifier of the virtualised network resource.  # noqa: E501

        :return: The network_resource_id of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._network_resource_id

    @network_resource_id.setter
    def network_resource_id(self, network_resource_id: str):
        """Sets the network_resource_id of this AllocateNetworkResultNetworkData.

        Identifier of the virtualised network resource.  # noqa: E501

        :param network_resource_id: The network_resource_id of this AllocateNetworkResultNetworkData.
        :type network_resource_id: str
        """
        if network_resource_id is None:
            raise ValueError("Invalid value for `network_resource_id`, must not be `None`")  # noqa: E501

        self._network_resource_id = network_resource_id

    @property
    def network_resource_name(self) -> str:
        """Gets the network_resource_name of this AllocateNetworkResultNetworkData.

        Name of the virtualised network resource.  # noqa: E501

        :return: The network_resource_name of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._network_resource_name

    @network_resource_name.setter
    def network_resource_name(self, network_resource_name: str):
        """Sets the network_resource_name of this AllocateNetworkResultNetworkData.

        Name of the virtualised network resource.  # noqa: E501

        :param network_resource_name: The network_resource_name of this AllocateNetworkResultNetworkData.
        :type network_resource_name: str
        """
        if network_resource_name is None:
            raise ValueError("Invalid value for `network_resource_name`, must not be `None`")  # noqa: E501

        self._network_resource_name = network_resource_name

    @property
    def network_type(self) -> str:
        """Gets the network_type of this AllocateNetworkResultNetworkData.

        The type of network that maps to the virtualised network. This list is extensible. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", \"l3-vpn\", etc. The cardinality can be \"0\" to cover the case where this attribute is not required to create the virtualised network.  # noqa: E501

        :return: The network_type of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type: str):
        """Sets the network_type of this AllocateNetworkResultNetworkData.

        The type of network that maps to the virtualised network. This list is extensible. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", \"l3-vpn\", etc. The cardinality can be \"0\" to cover the case where this attribute is not required to create the virtualised network.  # noqa: E501

        :param network_type: The network_type of this AllocateNetworkResultNetworkData.
        :type network_type: str
        """
        if network_type is None:
            raise ValueError("Invalid value for `network_type`, must not be `None`")  # noqa: E501

        self._network_type = network_type

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this AllocateNetworkResultNetworkData.

        The operational state of the virtualised network.  # noqa: E501

        :return: The operational_state of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this AllocateNetworkResultNetworkData.

        The operational state of the virtualised network.  # noqa: E501

        :param operational_state: The operational_state of this AllocateNetworkResultNetworkData.
        :type operational_state: str
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")  # noqa: E501

        self._operational_state = operational_state

    @property
    def segment_type(self) -> str:
        """Gets the segment_type of this AllocateNetworkResultNetworkData.

        The isolated segment for the virtualised network. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key. The cardinality can be \"0\" to allow for flat networks without any specific segmentation.  # noqa: E501

        :return: The segment_type of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type: str):
        """Sets the segment_type of this AllocateNetworkResultNetworkData.

        The isolated segment for the virtualised network. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key. The cardinality can be \"0\" to allow for flat networks without any specific segmentation.  # noqa: E501

        :param segment_type: The segment_type of this AllocateNetworkResultNetworkData.
        :type segment_type: str
        """
        if segment_type is None:
            raise ValueError("Invalid value for `segment_type`, must not be `None`")  # noqa: E501

        self._segment_type = segment_type

    @property
    def sharing_criteria(self) -> str:
        """Gets the sharing_criteria of this AllocateNetworkResultNetworkData.

        Only present for shared networks. Indicate the sharing criteria for this network. This criteria might be a list of authorized consumers.  # noqa: E501

        :return: The sharing_criteria of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._sharing_criteria

    @sharing_criteria.setter
    def sharing_criteria(self, sharing_criteria: str):
        """Sets the sharing_criteria of this AllocateNetworkResultNetworkData.

        Only present for shared networks. Indicate the sharing criteria for this network. This criteria might be a list of authorized consumers.  # noqa: E501

        :param sharing_criteria: The sharing_criteria of this AllocateNetworkResultNetworkData.
        :type sharing_criteria: str
        """
        if sharing_criteria is None:
            raise ValueError("Invalid value for `sharing_criteria`, must not be `None`")  # noqa: E501

        self._sharing_criteria = sharing_criteria

    @property
    def subnet(self) -> List[str]:
        """Gets the subnet of this AllocateNetworkResultNetworkData.

        Only present if the network provides layer 3 connectivity.  # noqa: E501

        :return: The subnet of this AllocateNetworkResultNetworkData.
        :rtype: List[str]
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet: List[str]):
        """Sets the subnet of this AllocateNetworkResultNetworkData.

        Only present if the network provides layer 3 connectivity.  # noqa: E501

        :param subnet: The subnet of this AllocateNetworkResultNetworkData.
        :type subnet: List[str]
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")  # noqa: E501

        self._subnet = subnet

    @property
    def zone_id(self) -> str:
        """Gets the zone_id of this AllocateNetworkResultNetworkData.

        If present, it identifies the Resource Zone where the virtual network resources have been allocated.  # noqa: E501

        :return: The zone_id of this AllocateNetworkResultNetworkData.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: str):
        """Sets the zone_id of this AllocateNetworkResultNetworkData.

        If present, it identifies the Resource Zone where the virtual network resources have been allocated.  # noqa: E501

        :param zone_id: The zone_id of this AllocateNetworkResultNetworkData.
        :type zone_id: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this AllocateNetworkResultNetworkData.

        List of metadata key-value pairs used by the consumer to   associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :return: The metadata of this AllocateNetworkResultNetworkData.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this AllocateNetworkResultNetworkData.

        List of metadata key-value pairs used by the consumer to   associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :param metadata: The metadata of this AllocateNetworkResultNetworkData.
        :type metadata: List[MetaDataInner]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata
