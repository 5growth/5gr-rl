# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteInputComputeReqs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_cons': 'str',
        'cpu_cons_value': 'float',
        'memory_cons': 'str',
        'memory_cons_value': 'float'
    }

    attribute_map = {
        'cpu_cons': 'cpuCons',
        'cpu_cons_value': 'cpuConsValue',
        'memory_cons': 'memoryCons',
        'memory_cons_value': 'memoryConsValue'
    }

    def __init__(self, cpu_cons=None, cpu_cons_value=None, memory_cons=None, memory_cons_value=None):  # noqa: E501
        """CompRouteInputComputeReqs - a model defined in Swagger"""  # noqa: E501

        self._cpu_cons = None
        self._cpu_cons_value = None
        self._memory_cons = None
        self._memory_cons_value = None
        self.discriminator = None

        self.cpu_cons = cpu_cons
        self.cpu_cons_value = cpu_cons_value
        self.memory_cons = memory_cons
        self.memory_cons_value = memory_cons_value

    @property
    def cpu_cons(self):
        """Gets the cpu_cons of this CompRouteInputComputeReqs.  # noqa: E501

        required CPU  # noqa: E501

        :return: The cpu_cons of this CompRouteInputComputeReqs.  # noqa: E501
        :rtype: str
        """
        return self._cpu_cons

    @cpu_cons.setter
    def cpu_cons(self, cpu_cons):
        """Sets the cpu_cons of this CompRouteInputComputeReqs.

        required CPU  # noqa: E501

        :param cpu_cons: The cpu_cons of this CompRouteInputComputeReqs.  # noqa: E501
        :type: str
        """
        if cpu_cons is None:
            raise ValueError("Invalid value for `cpu_cons`, must not be `None`")  # noqa: E501

        self._cpu_cons = cpu_cons

    @property
    def cpu_cons_value(self):
        """Gets the cpu_cons_value of this CompRouteInputComputeReqs.  # noqa: E501

        Value of required CPU  # noqa: E501

        :return: The cpu_cons_value of this CompRouteInputComputeReqs.  # noqa: E501
        :rtype: float
        """
        return self._cpu_cons_value

    @cpu_cons_value.setter
    def cpu_cons_value(self, cpu_cons_value):
        """Sets the cpu_cons_value of this CompRouteInputComputeReqs.

        Value of required CPU  # noqa: E501

        :param cpu_cons_value: The cpu_cons_value of this CompRouteInputComputeReqs.  # noqa: E501
        :type: float
        """
        if cpu_cons_value is None:
            raise ValueError("Invalid value for `cpu_cons_value`, must not be `None`")  # noqa: E501

        self._cpu_cons_value = cpu_cons_value

    @property
    def memory_cons(self):
        """Gets the memory_cons of this CompRouteInputComputeReqs.  # noqa: E501

        Required memory  # noqa: E501

        :return: The memory_cons of this CompRouteInputComputeReqs.  # noqa: E501
        :rtype: str
        """
        return self._memory_cons

    @memory_cons.setter
    def memory_cons(self, memory_cons):
        """Sets the memory_cons of this CompRouteInputComputeReqs.

        Required memory  # noqa: E501

        :param memory_cons: The memory_cons of this CompRouteInputComputeReqs.  # noqa: E501
        :type: str
        """
        if memory_cons is None:
            raise ValueError("Invalid value for `memory_cons`, must not be `None`")  # noqa: E501

        self._memory_cons = memory_cons

    @property
    def memory_cons_value(self):
        """Gets the memory_cons_value of this CompRouteInputComputeReqs.  # noqa: E501

        Value of required memory  # noqa: E501

        :return: The memory_cons_value of this CompRouteInputComputeReqs.  # noqa: E501
        :rtype: float
        """
        return self._memory_cons_value

    @memory_cons_value.setter
    def memory_cons_value(self, memory_cons_value):
        """Sets the memory_cons_value of this CompRouteInputComputeReqs.

        Value of required memory  # noqa: E501

        :param memory_cons_value: The memory_cons_value of this CompRouteInputComputeReqs.  # noqa: E501
        :type: float
        """
        if memory_cons_value is None:
            raise ValueError("Invalid value for `memory_cons_value`, must not be `None`")  # noqa: E501

        self._memory_cons_value = memory_cons_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInputComputeReqs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInputComputeReqs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
