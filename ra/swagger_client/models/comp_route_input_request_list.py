# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteInputRequestList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'int',
        'inter_nfvi_pop_connectivity_id': 'str',
        'src_pe_id': 'str',
        'dst_pe_id': 'str',
        'k_paths': 'float',
        'qos_cons': 'CompRouteInputQosCons'
    }

    attribute_map = {
        'request_id': 'requestId',
        'inter_nfvi_pop_connectivity_id': 'interNfviPopConnectivityId',
        'src_pe_id': 'srcPEId',
        'dst_pe_id': 'dstPEId',
        'k_paths': 'kPaths',
        'qos_cons': 'qosCons'
    }

    def __init__(self, request_id=None, inter_nfvi_pop_connectivity_id=None, src_pe_id=None, dst_pe_id=None, k_paths=None, qos_cons=None):  # noqa: E501
        """CompRouteInputRequestList - a model defined in Swagger"""  # noqa: E501

        self._request_id = None
        self._inter_nfvi_pop_connectivity_id = None
        self._src_pe_id = None
        self._dst_pe_id = None
        self._k_paths = None
        self._qos_cons = None
        self.discriminator = None

        self.request_id = request_id
        self.inter_nfvi_pop_connectivity_id = inter_nfvi_pop_connectivity_id
        self.src_pe_id = src_pe_id
        self.dst_pe_id = dst_pe_id
        self.k_paths = k_paths
        if qos_cons is not None:
            self.qos_cons = qos_cons

    @property
    def request_id(self):
        """Gets the request_id of this CompRouteInputRequestList.  # noqa: E501

        ID value to unambiguosly identify the path computation request  # noqa: E501

        :return: The request_id of this CompRouteInputRequestList.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CompRouteInputRequestList.

        ID value to unambiguosly identify the path computation request  # noqa: E501

        :param request_id: The request_id of this CompRouteInputRequestList.  # noqa: E501
        :type: int
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def inter_nfvi_pop_connectivity_id(self):
        """Gets the inter_nfvi_pop_connectivity_id of this CompRouteInputRequestList.  # noqa: E501

        Inter-NfviPop connectivity identifier  # noqa: E501

        :return: The inter_nfvi_pop_connectivity_id of this CompRouteInputRequestList.  # noqa: E501
        :rtype: str
        """
        return self._inter_nfvi_pop_connectivity_id

    @inter_nfvi_pop_connectivity_id.setter
    def inter_nfvi_pop_connectivity_id(self, inter_nfvi_pop_connectivity_id):
        """Sets the inter_nfvi_pop_connectivity_id of this CompRouteInputRequestList.

        Inter-NfviPop connectivity identifier  # noqa: E501

        :param inter_nfvi_pop_connectivity_id: The inter_nfvi_pop_connectivity_id of this CompRouteInputRequestList.  # noqa: E501
        :type: str
        """
        if inter_nfvi_pop_connectivity_id is None:
            raise ValueError("Invalid value for `inter_nfvi_pop_connectivity_id`, must not be `None`")  # noqa: E501

        self._inter_nfvi_pop_connectivity_id = inter_nfvi_pop_connectivity_id

    @property
    def src_pe_id(self):
        """Gets the src_pe_id of this CompRouteInputRequestList.  # noqa: E501

        source PE Id  # noqa: E501

        :return: The src_pe_id of this CompRouteInputRequestList.  # noqa: E501
        :rtype: str
        """
        return self._src_pe_id

    @src_pe_id.setter
    def src_pe_id(self, src_pe_id):
        """Sets the src_pe_id of this CompRouteInputRequestList.

        source PE Id  # noqa: E501

        :param src_pe_id: The src_pe_id of this CompRouteInputRequestList.  # noqa: E501
        :type: str
        """
        if src_pe_id is None:
            raise ValueError("Invalid value for `src_pe_id`, must not be `None`")  # noqa: E501

        self._src_pe_id = src_pe_id

    @property
    def dst_pe_id(self):
        """Gets the dst_pe_id of this CompRouteInputRequestList.  # noqa: E501

        destination PE Id  # noqa: E501

        :return: The dst_pe_id of this CompRouteInputRequestList.  # noqa: E501
        :rtype: str
        """
        return self._dst_pe_id

    @dst_pe_id.setter
    def dst_pe_id(self, dst_pe_id):
        """Sets the dst_pe_id of this CompRouteInputRequestList.

        destination PE Id  # noqa: E501

        :param dst_pe_id: The dst_pe_id of this CompRouteInputRequestList.  # noqa: E501
        :type: str
        """
        if dst_pe_id is None:
            raise ValueError("Invalid value for `dst_pe_id`, must not be `None`")  # noqa: E501

        self._dst_pe_id = dst_pe_id

    @property
    def k_paths(self):
        """Gets the k_paths of this CompRouteInputRequestList.  # noqa: E501

        Specifies the maximum K number of paths to be computed between srcPEId and dstPEId  # noqa: E501

        :return: The k_paths of this CompRouteInputRequestList.  # noqa: E501
        :rtype: float
        """
        return self._k_paths

    @k_paths.setter
    def k_paths(self, k_paths):
        """Sets the k_paths of this CompRouteInputRequestList.

        Specifies the maximum K number of paths to be computed between srcPEId and dstPEId  # noqa: E501

        :param k_paths: The k_paths of this CompRouteInputRequestList.  # noqa: E501
        :type: float
        """
        if k_paths is None:
            raise ValueError("Invalid value for `k_paths`, must not be `None`")  # noqa: E501

        self._k_paths = k_paths

    @property
    def qos_cons(self):
        """Gets the qos_cons of this CompRouteInputRequestList.  # noqa: E501


        :return: The qos_cons of this CompRouteInputRequestList.  # noqa: E501
        :rtype: CompRouteInputQosCons
        """
        return self._qos_cons

    @qos_cons.setter
    def qos_cons(self, qos_cons):
        """Sets the qos_cons of this CompRouteInputRequestList.


        :param qos_cons: The qos_cons of this CompRouteInputRequestList.  # noqa: E501
        :type: CompRouteInputQosCons
        """

        self._qos_cons = qos_cons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInputRequestList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInputRequestList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
