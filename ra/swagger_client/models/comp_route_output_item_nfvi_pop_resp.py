# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteOutputItemNfviPopResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vim_id': 'str',
        'nfvi_pop_id': 'str',
        'zone_atts': 'list[CompRouteOutputItemZoneAtts]'
    }

    attribute_map = {
        'vim_id': 'vimId',
        'nfvi_pop_id': 'nfviPopId',
        'zone_atts': 'zoneAtts'
    }

    def __init__(self, vim_id=None, nfvi_pop_id=None, zone_atts=None):  # noqa: E501
        """CompRouteOutputItemNfviPopResp - a model defined in Swagger"""  # noqa: E501

        self._vim_id = None
        self._nfvi_pop_id = None
        self._zone_atts = None
        self.discriminator = None

        self.vim_id = vim_id
        self.nfvi_pop_id = nfvi_pop_id
        self.zone_atts = zone_atts

    @property
    def vim_id(self):
        """Gets the vim_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501

        Identifier of the VIM  # noqa: E501

        :return: The vim_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :rtype: str
        """
        return self._vim_id

    @vim_id.setter
    def vim_id(self, vim_id):
        """Sets the vim_id of this CompRouteOutputItemNfviPopResp.

        Identifier of the VIM  # noqa: E501

        :param vim_id: The vim_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :type: str
        """
        if vim_id is None:
            raise ValueError("Invalid value for `vim_id`, must not be `None`")  # noqa: E501

        self._vim_id = vim_id

    @property
    def nfvi_pop_id(self):
        """Gets the nfvi_pop_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501

        Identifier of the NFVI-PoP  # noqa: E501

        :return: The nfvi_pop_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :rtype: str
        """
        return self._nfvi_pop_id

    @nfvi_pop_id.setter
    def nfvi_pop_id(self, nfvi_pop_id):
        """Sets the nfvi_pop_id of this CompRouteOutputItemNfviPopResp.

        Identifier of the NFVI-PoP  # noqa: E501

        :param nfvi_pop_id: The nfvi_pop_id of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :type: str
        """
        if nfvi_pop_id is None:
            raise ValueError("Invalid value for `nfvi_pop_id`, must not be `None`")  # noqa: E501

        self._nfvi_pop_id = nfvi_pop_id

    @property
    def zone_atts(self):
        """Gets the zone_atts of this CompRouteOutputItemNfviPopResp.  # noqa: E501


        :return: The zone_atts of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :rtype: list[CompRouteOutputItemZoneAtts]
        """
        return self._zone_atts

    @zone_atts.setter
    def zone_atts(self, zone_atts):
        """Sets the zone_atts of this CompRouteOutputItemNfviPopResp.


        :param zone_atts: The zone_atts of this CompRouteOutputItemNfviPopResp.  # noqa: E501
        :type: list[CompRouteOutputItemZoneAtts]
        """
        if zone_atts is None:
            raise ValueError("Invalid value for `zone_atts`, must not be `None`")  # noqa: E501

        self._zone_atts = zone_atts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutputItemNfviPopResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutputItemNfviPopResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
