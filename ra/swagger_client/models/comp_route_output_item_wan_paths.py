# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteOutputItemWanPaths(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wim_id': 'str',
        'wan_path_elements': 'list[WanLinkAtt]'
    }

    attribute_map = {
        'wim_id': 'wimId',
        'wan_path_elements': 'wanPathElements'
    }

    def __init__(self, wim_id=None, wan_path_elements=None):  # noqa: E501
        """CompRouteOutputItemWanPaths - a model defined in Swagger"""  # noqa: E501

        self._wim_id = None
        self._wan_path_elements = None
        self.discriminator = None

        self.wim_id = wim_id
        self.wan_path_elements = wan_path_elements

    @property
    def wim_id(self):
        """Gets the wim_id of this CompRouteOutputItemWanPaths.  # noqa: E501

        Identifier of WIM related to the asbtracted WAN  # noqa: E501

        :return: The wim_id of this CompRouteOutputItemWanPaths.  # noqa: E501
        :rtype: str
        """
        return self._wim_id

    @wim_id.setter
    def wim_id(self, wim_id):
        """Sets the wim_id of this CompRouteOutputItemWanPaths.

        Identifier of WIM related to the asbtracted WAN  # noqa: E501

        :param wim_id: The wim_id of this CompRouteOutputItemWanPaths.  # noqa: E501
        :type: str
        """
        if wim_id is None:
            raise ValueError("Invalid value for `wim_id`, must not be `None`")  # noqa: E501

        self._wim_id = wim_id

    @property
    def wan_path_elements(self):
        """Gets the wan_path_elements of this CompRouteOutputItemWanPaths.  # noqa: E501


        :return: The wan_path_elements of this CompRouteOutputItemWanPaths.  # noqa: E501
        :rtype: list[WanLinkAtt]
        """
        return self._wan_path_elements

    @wan_path_elements.setter
    def wan_path_elements(self, wan_path_elements):
        """Sets the wan_path_elements of this CompRouteOutputItemWanPaths.


        :param wan_path_elements: The wan_path_elements of this CompRouteOutputItemWanPaths.  # noqa: E501
        :type: list[WanLinkAtt]
        """
        if wan_path_elements is None:
            raise ValueError("Invalid value for `wan_path_elements`, must not be `None`")  # noqa: E501

        self._wan_path_elements = wan_path_elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutputItemWanPaths, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutputItemWanPaths):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
