# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetwLinkAtts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_cost': 'str',
        'link_cost_value': 'float',
        'link_delay': 'str',
        'link_delay_value': 'float',
        'link_avail_bw': 'str',
        'link_avail_bw_value': 'float'
    }

    attribute_map = {
        'link_cost': 'linkCost',
        'link_cost_value': 'linkCostValue',
        'link_delay': 'linkDelay',
        'link_delay_value': 'linkDelayValue',
        'link_avail_bw': 'linkAvailBw',
        'link_avail_bw_value': 'linkAvailBwValue'
    }

    def __init__(self, link_cost=None, link_cost_value=None, link_delay=None, link_delay_value=None, link_avail_bw=None, link_avail_bw_value=None):  # noqa: E501
        """NetwLinkAtts - a model defined in Swagger"""  # noqa: E501

        self._link_cost = None
        self._link_cost_value = None
        self._link_delay = None
        self._link_delay_value = None
        self._link_avail_bw = None
        self._link_avail_bw_value = None
        self.discriminator = None

        self.link_cost = link_cost
        self.link_cost_value = link_cost_value
        self.link_delay = link_delay
        self.link_delay_value = link_delay_value
        self.link_avail_bw = link_avail_bw
        self.link_avail_bw_value = link_avail_bw_value

    @property
    def link_cost(self):
        """Gets the link_cost of this NetwLinkAtts.  # noqa: E501

        Link cost name.  # noqa: E501

        :return: The link_cost of this NetwLinkAtts.  # noqa: E501
        :rtype: str
        """
        return self._link_cost

    @link_cost.setter
    def link_cost(self, link_cost):
        """Sets the link_cost of this NetwLinkAtts.

        Link cost name.  # noqa: E501

        :param link_cost: The link_cost of this NetwLinkAtts.  # noqa: E501
        :type: str
        """
        if link_cost is None:
            raise ValueError("Invalid value for `link_cost`, must not be `None`")  # noqa: E501

        self._link_cost = link_cost

    @property
    def link_cost_value(self):
        """Gets the link_cost_value of this NetwLinkAtts.  # noqa: E501

        Value of Link Cost  # noqa: E501

        :return: The link_cost_value of this NetwLinkAtts.  # noqa: E501
        :rtype: float
        """
        return self._link_cost_value

    @link_cost_value.setter
    def link_cost_value(self, link_cost_value):
        """Sets the link_cost_value of this NetwLinkAtts.

        Value of Link Cost  # noqa: E501

        :param link_cost_value: The link_cost_value of this NetwLinkAtts.  # noqa: E501
        :type: float
        """
        if link_cost_value is None:
            raise ValueError("Invalid value for `link_cost_value`, must not be `None`")  # noqa: E501

        self._link_cost_value = link_cost_value

    @property
    def link_delay(self):
        """Gets the link_delay of this NetwLinkAtts.  # noqa: E501

        Link delay name.  # noqa: E501

        :return: The link_delay of this NetwLinkAtts.  # noqa: E501
        :rtype: str
        """
        return self._link_delay

    @link_delay.setter
    def link_delay(self, link_delay):
        """Sets the link_delay of this NetwLinkAtts.

        Link delay name.  # noqa: E501

        :param link_delay: The link_delay of this NetwLinkAtts.  # noqa: E501
        :type: str
        """
        if link_delay is None:
            raise ValueError("Invalid value for `link_delay`, must not be `None`")  # noqa: E501

        self._link_delay = link_delay

    @property
    def link_delay_value(self):
        """Gets the link_delay_value of this NetwLinkAtts.  # noqa: E501

        Value of Link Delay (expressed in ms)  # noqa: E501

        :return: The link_delay_value of this NetwLinkAtts.  # noqa: E501
        :rtype: float
        """
        return self._link_delay_value

    @link_delay_value.setter
    def link_delay_value(self, link_delay_value):
        """Sets the link_delay_value of this NetwLinkAtts.

        Value of Link Delay (expressed in ms)  # noqa: E501

        :param link_delay_value: The link_delay_value of this NetwLinkAtts.  # noqa: E501
        :type: float
        """
        if link_delay_value is None:
            raise ValueError("Invalid value for `link_delay_value`, must not be `None`")  # noqa: E501

        self._link_delay_value = link_delay_value

    @property
    def link_avail_bw(self):
        """Gets the link_avail_bw of this NetwLinkAtts.  # noqa: E501

        Link available bandwidth name.  # noqa: E501

        :return: The link_avail_bw of this NetwLinkAtts.  # noqa: E501
        :rtype: str
        """
        return self._link_avail_bw

    @link_avail_bw.setter
    def link_avail_bw(self, link_avail_bw):
        """Sets the link_avail_bw of this NetwLinkAtts.

        Link available bandwidth name.  # noqa: E501

        :param link_avail_bw: The link_avail_bw of this NetwLinkAtts.  # noqa: E501
        :type: str
        """
        if link_avail_bw is None:
            raise ValueError("Invalid value for `link_avail_bw`, must not be `None`")  # noqa: E501

        self._link_avail_bw = link_avail_bw

    @property
    def link_avail_bw_value(self):
        """Gets the link_avail_bw_value of this NetwLinkAtts.  # noqa: E501

        Value of available bandwidth in the link (expressed in Mbps)  # noqa: E501

        :return: The link_avail_bw_value of this NetwLinkAtts.  # noqa: E501
        :rtype: float
        """
        return self._link_avail_bw_value

    @link_avail_bw_value.setter
    def link_avail_bw_value(self, link_avail_bw_value):
        """Sets the link_avail_bw_value of this NetwLinkAtts.

        Value of available bandwidth in the link (expressed in Mbps)  # noqa: E501

        :param link_avail_bw_value: The link_avail_bw_value of this NetwLinkAtts.  # noqa: E501
        :type: float
        """
        if link_avail_bw_value is None:
            raise ValueError("Invalid value for `link_avail_bw_value`, must not be `None`")  # noqa: E501

        self._link_avail_bw_value = link_avail_bw_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetwLinkAtts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetwLinkAtts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
