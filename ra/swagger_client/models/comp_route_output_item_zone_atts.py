# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteOutputItemZoneAtts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zone_id': 'str',
        'zone_name': 'str',
        'allocated_cpu': 'str',
        'allocated_memory': 'str'
    }

    attribute_map = {
        'zone_id': 'zoneId',
        'zone_name': 'zoneName',
        'allocated_cpu': 'allocatedCPU',
        'allocated_memory': 'allocatedMemory'
    }

    def __init__(self, zone_id=None, zone_name=None, allocated_cpu=None, allocated_memory=None):  # noqa: E501
        """CompRouteOutputItemZoneAtts - a model defined in Swagger"""  # noqa: E501

        self._zone_id = None
        self._zone_name = None
        self._allocated_cpu = None
        self._allocated_memory = None
        self.discriminator = None

        self.zone_id = zone_id
        self.zone_name = zone_name
        self.allocated_cpu = allocated_cpu
        self.allocated_memory = allocated_memory

    @property
    def zone_id(self):
        """Gets the zone_id of this CompRouteOutputItemZoneAtts.  # noqa: E501

        The identifier of the Resource Zone.  # noqa: E501

        :return: The zone_id of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this CompRouteOutputItemZoneAtts.

        The identifier of the Resource Zone.  # noqa: E501

        :param zone_id: The zone_id of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :type: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def zone_name(self):
        """Gets the zone_name of this CompRouteOutputItemZoneAtts.  # noqa: E501

        The name of the Resource Zone.  # noqa: E501

        :return: The zone_name of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name):
        """Sets the zone_name of this CompRouteOutputItemZoneAtts.

        The name of the Resource Zone.  # noqa: E501

        :param zone_name: The zone_name of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :type: str
        """
        if zone_name is None:
            raise ValueError("Invalid value for `zone_name`, must not be `None`")  # noqa: E501

        self._zone_name = zone_name

    @property
    def allocated_cpu(self):
        """Gets the allocated_cpu of this CompRouteOutputItemZoneAtts.  # noqa: E501

        The allocated capacity of CPU resources.  # noqa: E501

        :return: The allocated_cpu of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :rtype: str
        """
        return self._allocated_cpu

    @allocated_cpu.setter
    def allocated_cpu(self, allocated_cpu):
        """Sets the allocated_cpu of this CompRouteOutputItemZoneAtts.

        The allocated capacity of CPU resources.  # noqa: E501

        :param allocated_cpu: The allocated_cpu of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :type: str
        """
        if allocated_cpu is None:
            raise ValueError("Invalid value for `allocated_cpu`, must not be `None`")  # noqa: E501

        self._allocated_cpu = allocated_cpu

    @property
    def allocated_memory(self):
        """Gets the allocated_memory of this CompRouteOutputItemZoneAtts.  # noqa: E501

        The allocated capacity of Memory resources.  # noqa: E501

        :return: The allocated_memory of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :rtype: str
        """
        return self._allocated_memory

    @allocated_memory.setter
    def allocated_memory(self, allocated_memory):
        """Sets the allocated_memory of this CompRouteOutputItemZoneAtts.

        The allocated capacity of Memory resources.  # noqa: E501

        :param allocated_memory: The allocated_memory of this CompRouteOutputItemZoneAtts.  # noqa: E501
        :type: str
        """
        if allocated_memory is None:
            raise ValueError("Invalid value for `allocated_memory`, must not be `None`")  # noqa: E501

        self._allocated_memory = allocated_memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutputItemZoneAtts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutputItemZoneAtts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
