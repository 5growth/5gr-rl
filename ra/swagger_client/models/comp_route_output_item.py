# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteOutputItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'int',
        'inter_nfvi_pop_connectivity_id': 'str',
        'no_path': 'CompRouteOutputItemNoPath',
        'response': 'list[CompRouteOutputItemResponse]'
    }

    attribute_map = {
        'request_id': 'requestId',
        'inter_nfvi_pop_connectivity_id': 'interNfviPopConnectivityId',
        'no_path': 'noPath',
        'response': 'response'
    }

    def __init__(self, request_id=None, inter_nfvi_pop_connectivity_id=None, no_path=None, response=None):  # noqa: E501
        """CompRouteOutputItem - a model defined in Swagger"""  # noqa: E501

        self._request_id = None
        self._inter_nfvi_pop_connectivity_id = None
        self._no_path = None
        self._response = None
        self.discriminator = None

        self.request_id = request_id
        self.inter_nfvi_pop_connectivity_id = inter_nfvi_pop_connectivity_id
        if no_path is not None:
            self.no_path = no_path
        if response is not None:
            self.response = response

    @property
    def request_id(self):
        """Gets the request_id of this CompRouteOutputItem.  # noqa: E501

        ID value to unambiguosly identify the path computation request  # noqa: E501

        :return: The request_id of this CompRouteOutputItem.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CompRouteOutputItem.

        ID value to unambiguosly identify the path computation request  # noqa: E501

        :param request_id: The request_id of this CompRouteOutputItem.  # noqa: E501
        :type: int
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def inter_nfvi_pop_connectivity_id(self):
        """Gets the inter_nfvi_pop_connectivity_id of this CompRouteOutputItem.  # noqa: E501

        Inter-NfviPop connectivity identifier  # noqa: E501

        :return: The inter_nfvi_pop_connectivity_id of this CompRouteOutputItem.  # noqa: E501
        :rtype: str
        """
        return self._inter_nfvi_pop_connectivity_id

    @inter_nfvi_pop_connectivity_id.setter
    def inter_nfvi_pop_connectivity_id(self, inter_nfvi_pop_connectivity_id):
        """Sets the inter_nfvi_pop_connectivity_id of this CompRouteOutputItem.

        Inter-NfviPop connectivity identifier  # noqa: E501

        :param inter_nfvi_pop_connectivity_id: The inter_nfvi_pop_connectivity_id of this CompRouteOutputItem.  # noqa: E501
        :type: str
        """
        if inter_nfvi_pop_connectivity_id is None:
            raise ValueError("Invalid value for `inter_nfvi_pop_connectivity_id`, must not be `None`")  # noqa: E501

        self._inter_nfvi_pop_connectivity_id = inter_nfvi_pop_connectivity_id

    @property
    def no_path(self):
        """Gets the no_path of this CompRouteOutputItem.  # noqa: E501


        :return: The no_path of this CompRouteOutputItem.  # noqa: E501
        :rtype: CompRouteOutputItemNoPath
        """
        return self._no_path

    @no_path.setter
    def no_path(self, no_path):
        """Sets the no_path of this CompRouteOutputItem.


        :param no_path: The no_path of this CompRouteOutputItem.  # noqa: E501
        :type: CompRouteOutputItemNoPath
        """

        self._no_path = no_path

    @property
    def response(self):
        """Gets the response of this CompRouteOutputItem.  # noqa: E501


        :return: The response of this CompRouteOutputItem.  # noqa: E501
        :rtype: list[CompRouteOutputItemResponse]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this CompRouteOutputItem.


        :param response: The response of this CompRouteOutputItem.  # noqa: E501
        :type: list[CompRouteOutputItemResponse]
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutputItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutputItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
