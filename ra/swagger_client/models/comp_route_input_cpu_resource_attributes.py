# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteInputCpuResourceAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_capacity': 'str',
        'reserved_capacity': 'str',
        'total_capacity': 'str',
        'allocated_capacity': 'str'
    }

    attribute_map = {
        'available_capacity': 'availableCapacity',
        'reserved_capacity': 'reservedCapacity',
        'total_capacity': 'totalCapacity',
        'allocated_capacity': 'allocatedCapacity'
    }

    def __init__(self, available_capacity=None, reserved_capacity=None, total_capacity=None, allocated_capacity=None):  # noqa: E501
        """CompRouteInputCpuResourceAttributes - a model defined in Swagger"""  # noqa: E501

        self._available_capacity = None
        self._reserved_capacity = None
        self._total_capacity = None
        self._allocated_capacity = None
        self.discriminator = None

        self.available_capacity = available_capacity
        self.reserved_capacity = reserved_capacity
        self.total_capacity = total_capacity
        self.allocated_capacity = allocated_capacity

    @property
    def available_capacity(self):
        """Gets the available_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501

        The free capacity available for allocation and reservation of CPU resources.  # noqa: E501

        :return: The available_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this CompRouteInputCpuResourceAttributes.

        The free capacity available for allocation and reservation of CPU resources.  # noqa: E501

        :param available_capacity: The available_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :type: str
        """
        if available_capacity is None:
            raise ValueError("Invalid value for `available_capacity`, must not be `None`")  # noqa: E501

        self._available_capacity = available_capacity

    @property
    def reserved_capacity(self):
        """Gets the reserved_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501

        The reserved capacity of   CPU resources.  # noqa: E501

        :return: The reserved_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._reserved_capacity

    @reserved_capacity.setter
    def reserved_capacity(self, reserved_capacity):
        """Sets the reserved_capacity of this CompRouteInputCpuResourceAttributes.

        The reserved capacity of   CPU resources.  # noqa: E501

        :param reserved_capacity: The reserved_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :type: str
        """
        if reserved_capacity is None:
            raise ValueError("Invalid value for `reserved_capacity`, must not be `None`")  # noqa: E501

        self._reserved_capacity = reserved_capacity

    @property
    def total_capacity(self):
        """Gets the total_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501

        The total capacity of CPU resources.  # noqa: E501

        :return: The total_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this CompRouteInputCpuResourceAttributes.

        The total capacity of CPU resources.  # noqa: E501

        :param total_capacity: The total_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :type: str
        """
        if total_capacity is None:
            raise ValueError("Invalid value for `total_capacity`, must not be `None`")  # noqa: E501

        self._total_capacity = total_capacity

    @property
    def allocated_capacity(self):
        """Gets the allocated_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501

        The allocated capacity of CPU resources.  # noqa: E501

        :return: The allocated_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._allocated_capacity

    @allocated_capacity.setter
    def allocated_capacity(self, allocated_capacity):
        """Sets the allocated_capacity of this CompRouteInputCpuResourceAttributes.

        The allocated capacity of CPU resources.  # noqa: E501

        :param allocated_capacity: The allocated_capacity of this CompRouteInputCpuResourceAttributes.  # noqa: E501
        :type: str
        """
        if allocated_capacity is None:
            raise ValueError("Invalid value for `allocated_capacity`, must not be `None`")  # noqa: E501

        self._allocated_capacity = allocated_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInputCpuResourceAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInputCpuResourceAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
