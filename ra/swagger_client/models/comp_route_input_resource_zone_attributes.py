# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteInputResourceZoneAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zone_id': 'str',
        'zone_name': 'str',
        'zone_state': 'str',
        'memory_resource_attributes': 'CompRouteInputMemoryResourceAttributes',
        'cpu_resource_attributes': 'CompRouteInputCpuResourceAttributes',
        'storage_resource_attributes': 'CompRouteInputStorageResourceAttributes'
    }

    attribute_map = {
        'zone_id': 'zoneId',
        'zone_name': 'zoneName',
        'zone_state': 'zoneState',
        'memory_resource_attributes': 'memoryResourceAttributes',
        'cpu_resource_attributes': 'cpuResourceAttributes',
        'storage_resource_attributes': 'storageResourceAttributes'
    }

    def __init__(self, zone_id=None, zone_name=None, zone_state=None, memory_resource_attributes=None, cpu_resource_attributes=None, storage_resource_attributes=None):  # noqa: E501
        """CompRouteInputResourceZoneAttributes - a model defined in Swagger"""  # noqa: E501

        self._zone_id = None
        self._zone_name = None
        self._zone_state = None
        self._memory_resource_attributes = None
        self._cpu_resource_attributes = None
        self._storage_resource_attributes = None
        self.discriminator = None

        self.zone_id = zone_id
        self.zone_name = zone_name
        self.zone_state = zone_state
        self.memory_resource_attributes = memory_resource_attributes
        self.cpu_resource_attributes = cpu_resource_attributes
        self.storage_resource_attributes = storage_resource_attributes

    @property
    def zone_id(self):
        """Gets the zone_id of this CompRouteInputResourceZoneAttributes.  # noqa: E501

        The identifier of the Resource Zone.  # noqa: E501

        :return: The zone_id of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this CompRouteInputResourceZoneAttributes.

        The identifier of the Resource Zone.  # noqa: E501

        :param zone_id: The zone_id of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def zone_name(self):
        """Gets the zone_name of this CompRouteInputResourceZoneAttributes.  # noqa: E501

        The name of the Resource Zone.  # noqa: E501

        :return: The zone_name of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name):
        """Sets the zone_name of this CompRouteInputResourceZoneAttributes.

        The name of the Resource Zone.  # noqa: E501

        :param zone_name: The zone_name of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: str
        """
        if zone_name is None:
            raise ValueError("Invalid value for `zone_name`, must not be `None`")  # noqa: E501

        self._zone_name = zone_name

    @property
    def zone_state(self):
        """Gets the zone_state of this CompRouteInputResourceZoneAttributes.  # noqa: E501

        Information about the current state of the Resource Zone, e.g. if the Resource Zone is available.  # noqa: E501

        :return: The zone_state of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: str
        """
        return self._zone_state

    @zone_state.setter
    def zone_state(self, zone_state):
        """Sets the zone_state of this CompRouteInputResourceZoneAttributes.

        Information about the current state of the Resource Zone, e.g. if the Resource Zone is available.  # noqa: E501

        :param zone_state: The zone_state of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: str
        """
        if zone_state is None:
            raise ValueError("Invalid value for `zone_state`, must not be `None`")  # noqa: E501

        self._zone_state = zone_state

    @property
    def memory_resource_attributes(self):
        """Gets the memory_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501


        :return: The memory_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: CompRouteInputMemoryResourceAttributes
        """
        return self._memory_resource_attributes

    @memory_resource_attributes.setter
    def memory_resource_attributes(self, memory_resource_attributes):
        """Sets the memory_resource_attributes of this CompRouteInputResourceZoneAttributes.


        :param memory_resource_attributes: The memory_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: CompRouteInputMemoryResourceAttributes
        """
        if memory_resource_attributes is None:
            raise ValueError("Invalid value for `memory_resource_attributes`, must not be `None`")  # noqa: E501

        self._memory_resource_attributes = memory_resource_attributes

    @property
    def cpu_resource_attributes(self):
        """Gets the cpu_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501


        :return: The cpu_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: CompRouteInputCpuResourceAttributes
        """
        return self._cpu_resource_attributes

    @cpu_resource_attributes.setter
    def cpu_resource_attributes(self, cpu_resource_attributes):
        """Sets the cpu_resource_attributes of this CompRouteInputResourceZoneAttributes.


        :param cpu_resource_attributes: The cpu_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: CompRouteInputCpuResourceAttributes
        """
        if cpu_resource_attributes is None:
            raise ValueError("Invalid value for `cpu_resource_attributes`, must not be `None`")  # noqa: E501

        self._cpu_resource_attributes = cpu_resource_attributes

    @property
    def storage_resource_attributes(self):
        """Gets the storage_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501


        :return: The storage_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :rtype: CompRouteInputStorageResourceAttributes
        """
        return self._storage_resource_attributes

    @storage_resource_attributes.setter
    def storage_resource_attributes(self, storage_resource_attributes):
        """Sets the storage_resource_attributes of this CompRouteInputResourceZoneAttributes.


        :param storage_resource_attributes: The storage_resource_attributes of this CompRouteInputResourceZoneAttributes.  # noqa: E501
        :type: CompRouteInputStorageResourceAttributes
        """
        if storage_resource_attributes is None:
            raise ValueError("Invalid value for `storage_resource_attributes`, must not be `None`")  # noqa: E501

        self._storage_resource_attributes = storage_resource_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInputResourceZoneAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInputResourceZoneAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
