# coding: utf-8

"""
    5Growth RL RA API

    RESTful API for the 5Gr RL RA. Find more at http://5growth.eu  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompRouteInputQosCons(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth_cons': 'str',
        'bandwidth_cons_value': 'float',
        'delay_cons': 'str',
        'delay_cons_value': 'float'
    }

    attribute_map = {
        'bandwidth_cons': 'bandwidthCons',
        'bandwidth_cons_value': 'bandwidthConsValue',
        'delay_cons': 'delayCons',
        'delay_cons_value': 'delayConsValue'
    }

    def __init__(self, bandwidth_cons=None, bandwidth_cons_value=None, delay_cons=None, delay_cons_value=None):  # noqa: E501
        """CompRouteInputQosCons - a model defined in Swagger"""  # noqa: E501

        self._bandwidth_cons = None
        self._bandwidth_cons_value = None
        self._delay_cons = None
        self._delay_cons_value = None
        self.discriminator = None

        self.bandwidth_cons = bandwidth_cons
        self.bandwidth_cons_value = bandwidth_cons_value
        self.delay_cons = delay_cons
        self.delay_cons_value = delay_cons_value

    @property
    def bandwidth_cons(self):
        """Gets the bandwidth_cons of this CompRouteInputQosCons.  # noqa: E501

        required bandwidth for the interNfviPop connection  # noqa: E501

        :return: The bandwidth_cons of this CompRouteInputQosCons.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_cons

    @bandwidth_cons.setter
    def bandwidth_cons(self, bandwidth_cons):
        """Sets the bandwidth_cons of this CompRouteInputQosCons.

        required bandwidth for the interNfviPop connection  # noqa: E501

        :param bandwidth_cons: The bandwidth_cons of this CompRouteInputQosCons.  # noqa: E501
        :type: str
        """
        if bandwidth_cons is None:
            raise ValueError("Invalid value for `bandwidth_cons`, must not be `None`")  # noqa: E501

        self._bandwidth_cons = bandwidth_cons

    @property
    def bandwidth_cons_value(self):
        """Gets the bandwidth_cons_value of this CompRouteInputQosCons.  # noqa: E501

        Value of required bandwidth for the interNfviPop connection(expressed in Mbps)  # noqa: E501

        :return: The bandwidth_cons_value of this CompRouteInputQosCons.  # noqa: E501
        :rtype: float
        """
        return self._bandwidth_cons_value

    @bandwidth_cons_value.setter
    def bandwidth_cons_value(self, bandwidth_cons_value):
        """Sets the bandwidth_cons_value of this CompRouteInputQosCons.

        Value of required bandwidth for the interNfviPop connection(expressed in Mbps)  # noqa: E501

        :param bandwidth_cons_value: The bandwidth_cons_value of this CompRouteInputQosCons.  # noqa: E501
        :type: float
        """
        if bandwidth_cons_value is None:
            raise ValueError("Invalid value for `bandwidth_cons_value`, must not be `None`")  # noqa: E501

        self._bandwidth_cons_value = bandwidth_cons_value

    @property
    def delay_cons(self):
        """Gets the delay_cons of this CompRouteInputQosCons.  # noqa: E501

        required e2e delay for the interNfviPop connection  # noqa: E501

        :return: The delay_cons of this CompRouteInputQosCons.  # noqa: E501
        :rtype: str
        """
        return self._delay_cons

    @delay_cons.setter
    def delay_cons(self, delay_cons):
        """Sets the delay_cons of this CompRouteInputQosCons.

        required e2e delay for the interNfviPop connection  # noqa: E501

        :param delay_cons: The delay_cons of this CompRouteInputQosCons.  # noqa: E501
        :type: str
        """
        if delay_cons is None:
            raise ValueError("Invalid value for `delay_cons`, must not be `None`")  # noqa: E501

        self._delay_cons = delay_cons

    @property
    def delay_cons_value(self):
        """Gets the delay_cons_value of this CompRouteInputQosCons.  # noqa: E501

        Maximum tolerated value of required e2e delay for the interNfviPop connection (expressed in ms)  # noqa: E501

        :return: The delay_cons_value of this CompRouteInputQosCons.  # noqa: E501
        :rtype: float
        """
        return self._delay_cons_value

    @delay_cons_value.setter
    def delay_cons_value(self, delay_cons_value):
        """Sets the delay_cons_value of this CompRouteInputQosCons.

        Maximum tolerated value of required e2e delay for the interNfviPop connection (expressed in ms)  # noqa: E501

        :param delay_cons_value: The delay_cons_value of this CompRouteInputQosCons.  # noqa: E501
        :type: float
        """
        if delay_cons_value is None:
            raise ValueError("Invalid value for `delay_cons_value`, must not be `None`")  # noqa: E501

        self._delay_cons_value = delay_cons_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInputQosCons, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInputQosCons):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
