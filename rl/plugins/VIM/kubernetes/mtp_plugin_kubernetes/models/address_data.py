# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class AddressData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address_type: str=None, l2_address_data: object=None, l3_address_data: object=None):  # noqa: E501
        """AddressData - a model defined in Swagger

        :param address_type: The address_type of this AddressData.  # noqa: E501
        :type address_type: str
        :param l2_address_data: The l2_address_data of this AddressData.  # noqa: E501
        :type l2_address_data: object
        :param l3_address_data: The l3_address_data of this AddressData.  # noqa: E501
        :type l3_address_data: object
        """
        self.swagger_types = {
            'address_type': str,
            'l2_address_data': object,
            'l3_address_data': object
        }

        self.attribute_map = {
            'address_type': 'addressType',
            'l2_address_data': 'l2AddressData',
            'l3_address_data': 'l3AddressData'
        }

        self._address_type = address_type
        self._l2_address_data = l2_address_data
        self._l3_address_data = l3_address_data

    @classmethod
    def from_dict(cls, dikt) -> 'AddressData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddressData of this AddressData.  # noqa: E501
        :rtype: AddressData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_type(self) -> str:
        """Gets the address_type of this AddressData.

        Describes the type of the address to be assigned to the CP instantiated from the parent CPD. The content type shall be aligned with the address type supported by the layerProtocol attribute of the parent CPD.  # noqa: E501

        :return: The address_type of this AddressData.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type: str):
        """Sets the address_type of this AddressData.

        Describes the type of the address to be assigned to the CP instantiated from the parent CPD. The content type shall be aligned with the address type supported by the layerProtocol attribute of the parent CPD.  # noqa: E501

        :param address_type: The address_type of this AddressData.
        :type address_type: str
        """
        allowed_values = ["MAC", "IPV4", "IPV6"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def l2_address_data(self) -> object:
        """Gets the l2_address_data of this AddressData.

        Provides the information on the MAC addresses to be assigned to the CP(s) instantiated from the parent CPD. Shall be present when the addressType is MAC address.  # noqa: E501

        :return: The l2_address_data of this AddressData.
        :rtype: object
        """
        return self._l2_address_data

    @l2_address_data.setter
    def l2_address_data(self, l2_address_data: object):
        """Sets the l2_address_data of this AddressData.

        Provides the information on the MAC addresses to be assigned to the CP(s) instantiated from the parent CPD. Shall be present when the addressType is MAC address.  # noqa: E501

        :param l2_address_data: The l2_address_data of this AddressData.
        :type l2_address_data: object
        """

        self._l2_address_data = l2_address_data

    @property
    def l3_address_data(self) -> object:
        """Gets the l3_address_data of this AddressData.

        Provides the information on the IP addresses to be assigned to the CP instantiated from the parent CPD. Shall be present when the addressType is IP address.  # noqa: E501

        :return: The l3_address_data of this AddressData.
        :rtype: object
        """
        return self._l3_address_data

    @l3_address_data.setter
    def l3_address_data(self, l3_address_data: object):
        """Sets the l3_address_data of this AddressData.

        Provides the information on the IP addresses to be assigned to the CP instantiated from the parent CPD. Shall be present when the addressType is IP address.  # noqa: E501

        :param l3_address_data: The l3_address_data of this AddressData.
        :type l3_address_data: object
        """

        self._l3_address_data = l3_address_data
