# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class TunnelInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tunnel_type: str=None, tunnel_dst_address: str=None, tunnel_src_address: str=None, tunnel_specific_data: object=None):  # noqa: E501
        """TunnelInfo - a model defined in Swagger

        :param tunnel_type: The tunnel_type of this TunnelInfo.  # noqa: E501
        :type tunnel_type: str
        :param tunnel_dst_address: The tunnel_dst_address of this TunnelInfo.  # noqa: E501
        :type tunnel_dst_address: str
        :param tunnel_src_address: The tunnel_src_address of this TunnelInfo.  # noqa: E501
        :type tunnel_src_address: str
        :param tunnel_specific_data: The tunnel_specific_data of this TunnelInfo.  # noqa: E501
        :type tunnel_specific_data: object
        """
        self.swagger_types = {
            'tunnel_type': str,
            'tunnel_dst_address': str,
            'tunnel_src_address': str,
            'tunnel_specific_data': object
        }

        self.attribute_map = {
            'tunnel_type': 'tunnelType',
            'tunnel_dst_address': 'tunnelDstAddress',
            'tunnel_src_address': 'tunnelSrcAddress',
            'tunnel_specific_data': 'tunnelSpecificData'
        }

        self._tunnel_type = tunnel_type
        self._tunnel_dst_address = tunnel_dst_address
        self._tunnel_src_address = tunnel_src_address
        self._tunnel_specific_data = tunnel_specific_data

    @classmethod
    def from_dict(cls, dikt) -> 'TunnelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TunnelInfo of this TunnelInfo.  # noqa: E501
        :rtype: TunnelInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tunnel_type(self) -> str:
        """Gets the tunnel_type of this TunnelInfo.

        TType of tunnel (GTP-U, GRE, etc.)  # noqa: E501

        :return: The tunnel_type of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_type

    @tunnel_type.setter
    def tunnel_type(self, tunnel_type: str):
        """Sets the tunnel_type of this TunnelInfo.

        TType of tunnel (GTP-U, GRE, etc.)  # noqa: E501

        :param tunnel_type: The tunnel_type of this TunnelInfo.
        :type tunnel_type: str
        """
        allowed_values = ["GTP-U", "GRE"]  # noqa: E501
        if tunnel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tunnel_type` ({0}), must be one of {1}"
                .format(tunnel_type, allowed_values)
            )

        self._tunnel_type = tunnel_type

    @property
    def tunnel_dst_address(self) -> str:
        """Gets the tunnel_dst_address of this TunnelInfo.

        Destination address of the tunnel.  # noqa: E501

        :return: The tunnel_dst_address of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_dst_address

    @tunnel_dst_address.setter
    def tunnel_dst_address(self, tunnel_dst_address: str):
        """Sets the tunnel_dst_address of this TunnelInfo.

        Destination address of the tunnel.  # noqa: E501

        :param tunnel_dst_address: The tunnel_dst_address of this TunnelInfo.
        :type tunnel_dst_address: str
        """
        if tunnel_dst_address is None:
            raise ValueError("Invalid value for `tunnel_dst_address`, must not be `None`")  # noqa: E501

        self._tunnel_dst_address = tunnel_dst_address

    @property
    def tunnel_src_address(self) -> str:
        """Gets the tunnel_src_address of this TunnelInfo.

        Source address of the tunnel.  # noqa: E501

        :return: The tunnel_src_address of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_src_address

    @tunnel_src_address.setter
    def tunnel_src_address(self, tunnel_src_address: str):
        """Sets the tunnel_src_address of this TunnelInfo.

        Source address of the tunnel.  # noqa: E501

        :param tunnel_src_address: The tunnel_src_address of this TunnelInfo.
        :type tunnel_src_address: str
        """
        if tunnel_src_address is None:
            raise ValueError("Invalid value for `tunnel_src_address`, must not be `None`")  # noqa: E501

        self._tunnel_src_address = tunnel_src_address

    @property
    def tunnel_specific_data(self) -> object:
        """Gets the tunnel_specific_data of this TunnelInfo.

        Parameters specific to the tunnel.  # noqa: E501

        :return: The tunnel_specific_data of this TunnelInfo.
        :rtype: object
        """
        return self._tunnel_specific_data

    @tunnel_specific_data.setter
    def tunnel_specific_data(self, tunnel_specific_data: object):
        """Sets the tunnel_specific_data of this TunnelInfo.

        Parameters specific to the tunnel.  # noqa: E501

        :param tunnel_specific_data: The tunnel_specific_data of this TunnelInfo.
        :type tunnel_specific_data: object
        """

        self._tunnel_specific_data = tunnel_specific_data
