# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class NfviPop(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, geographical_location_info: str=None, network_connectivity_endpoint: str=None, nfvi_pop_id: str=None, vim_id: str=None):  # noqa: E501
        """NfviPop - a model defined in Swagger

        :param geographical_location_info: The geographical_location_info of this NfviPop.  # noqa: E501
        :type geographical_location_info: str
        :param network_connectivity_endpoint: The network_connectivity_endpoint of this NfviPop.  # noqa: E501
        :type network_connectivity_endpoint: str
        :param nfvi_pop_id: The nfvi_pop_id of this NfviPop.  # noqa: E501
        :type nfvi_pop_id: str
        :param vim_id: The vim_id of this NfviPop.  # noqa: E501
        :type vim_id: str
        """
        self.swagger_types = {
            'geographical_location_info': str,
            'network_connectivity_endpoint': str,
            'nfvi_pop_id': str,
            'vim_id': str
        }

        self.attribute_map = {
            'geographical_location_info': 'geographicalLocationInfo',
            'network_connectivity_endpoint': 'networkConnectivityEndpoint',
            'nfvi_pop_id': 'nfviPopId',
            'vim_id': 'vimId'
        }

        self._geographical_location_info = geographical_location_info
        self._network_connectivity_endpoint = network_connectivity_endpoint
        self._nfvi_pop_id = nfvi_pop_id
        self._vim_id = vim_id

    @classmethod
    def from_dict(cls, dikt) -> 'NfviPop':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NfviPop of this NfviPop.  # noqa: E501
        :rtype: NfviPop
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographical_location_info(self) -> str:
        """Gets the geographical_location_info of this NfviPop.

        It provides information about the geographic location (e.g. geographic coordinates or address of the building, etc.) of the NFVI resources that the VIM manages.  # noqa: E501

        :return: The geographical_location_info of this NfviPop.
        :rtype: str
        """
        return self._geographical_location_info

    @geographical_location_info.setter
    def geographical_location_info(self, geographical_location_info: str):
        """Sets the geographical_location_info of this NfviPop.

        It provides information about the geographic location (e.g. geographic coordinates or address of the building, etc.) of the NFVI resources that the VIM manages.  # noqa: E501

        :param geographical_location_info: The geographical_location_info of this NfviPop.
        :type geographical_location_info: str
        """
        if geographical_location_info is None:
            raise ValueError("Invalid value for `geographical_location_info`, must not be `None`")  # noqa: E501

        self._geographical_location_info = geographical_location_info

    @property
    def network_connectivity_endpoint(self) -> str:
        """Gets the network_connectivity_endpoint of this NfviPop.

        Information about network connectivity endpoints to the NFVI-PoP that the VIM manages which helps build topology information relative to NFVI-PoP connectivity to other NFVI-PoP or N-PoP.  # noqa: E501

        :return: The network_connectivity_endpoint of this NfviPop.
        :rtype: str
        """
        return self._network_connectivity_endpoint

    @network_connectivity_endpoint.setter
    def network_connectivity_endpoint(self, network_connectivity_endpoint: str):
        """Sets the network_connectivity_endpoint of this NfviPop.

        Information about network connectivity endpoints to the NFVI-PoP that the VIM manages which helps build topology information relative to NFVI-PoP connectivity to other NFVI-PoP or N-PoP.  # noqa: E501

        :param network_connectivity_endpoint: The network_connectivity_endpoint of this NfviPop.
        :type network_connectivity_endpoint: str
        """
        if network_connectivity_endpoint is None:
            raise ValueError("Invalid value for `network_connectivity_endpoint`, must not be `None`")  # noqa: E501

        self._network_connectivity_endpoint = network_connectivity_endpoint

    @property
    def nfvi_pop_id(self) -> str:
        """Gets the nfvi_pop_id of this NfviPop.

        Identification of the NFVI-PoP.  # noqa: E501

        :return: The nfvi_pop_id of this NfviPop.
        :rtype: str
        """
        return self._nfvi_pop_id

    @nfvi_pop_id.setter
    def nfvi_pop_id(self, nfvi_pop_id: str):
        """Sets the nfvi_pop_id of this NfviPop.

        Identification of the NFVI-PoP.  # noqa: E501

        :param nfvi_pop_id: The nfvi_pop_id of this NfviPop.
        :type nfvi_pop_id: str
        """
        if nfvi_pop_id is None:
            raise ValueError("Invalid value for `nfvi_pop_id`, must not be `None`")  # noqa: E501

        self._nfvi_pop_id = nfvi_pop_id

    @property
    def vim_id(self) -> str:
        """Gets the vim_id of this NfviPop.

        Identification of the VIM.  # noqa: E501

        :return: The vim_id of this NfviPop.
        :rtype: str
        """
        return self._vim_id

    @vim_id.setter
    def vim_id(self, vim_id: str):
        """Sets the vim_id of this NfviPop.

        Identification of the VIM.  # noqa: E501

        :param vim_id: The vim_id of this NfviPop.
        :type vim_id: str
        """
        if vim_id is None:
            raise ValueError("Invalid value for `vim_id`, must not be `None`")  # noqa: E501

        self._vim_id = vim_id
