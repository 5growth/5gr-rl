# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes.models.virtual_compute_resource_information_virtual_cpu import VirtualComputeResourceInformationVirtualCPU  # noqa: F401,E501
from mtp_plugin_kubernetes.models.virtual_compute_resource_information_virtual_memory import VirtualComputeResourceInformationVirtualMemory  # noqa: F401,E501
from mtp_plugin_kubernetes import util


class VirtualComputeResourceInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, acceleration_capability: str=None, compute_resource_type_id: str=None, virtual_cpu: VirtualComputeResourceInformationVirtualCPU=None, virtual_memory: VirtualComputeResourceInformationVirtualMemory=None):  # noqa: E501
        """VirtualComputeResourceInformation - a model defined in Swagger

        :param acceleration_capability: The acceleration_capability of this VirtualComputeResourceInformation.  # noqa: E501
        :type acceleration_capability: str
        :param compute_resource_type_id: The compute_resource_type_id of this VirtualComputeResourceInformation.  # noqa: E501
        :type compute_resource_type_id: str
        :param virtual_cpu: The virtual_cpu of this VirtualComputeResourceInformation.  # noqa: E501
        :type virtual_cpu: VirtualComputeResourceInformationVirtualCPU
        :param virtual_memory: The virtual_memory of this VirtualComputeResourceInformation.  # noqa: E501
        :type virtual_memory: VirtualComputeResourceInformationVirtualMemory
        """
        self.swagger_types = {
            'acceleration_capability': str,
            'compute_resource_type_id': str,
            'virtual_cpu': VirtualComputeResourceInformationVirtualCPU,
            'virtual_memory': VirtualComputeResourceInformationVirtualMemory
        }

        self.attribute_map = {
            'acceleration_capability': 'accelerationCapability',
            'compute_resource_type_id': 'computeResourceTypeId',
            'virtual_cpu': 'virtualCPU',
            'virtual_memory': 'virtualMemory'
        }

        self._acceleration_capability = acceleration_capability
        self._compute_resource_type_id = compute_resource_type_id
        self._virtual_cpu = virtual_cpu
        self._virtual_memory = virtual_memory

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualComputeResourceInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualComputeResourceInformation of this VirtualComputeResourceInformation.  # noqa: E501
        :rtype: VirtualComputeResourceInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_capability(self) -> str:
        """Gets the acceleration_capability of this VirtualComputeResourceInformation.

        Acceleration capabilities (e.g. crypto, GPU) for the consumable virtualised compute resources from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.  # noqa: E501

        :return: The acceleration_capability of this VirtualComputeResourceInformation.
        :rtype: str
        """
        return self._acceleration_capability

    @acceleration_capability.setter
    def acceleration_capability(self, acceleration_capability: str):
        """Sets the acceleration_capability of this VirtualComputeResourceInformation.

        Acceleration capabilities (e.g. crypto, GPU) for the consumable virtualised compute resources from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.  # noqa: E501

        :param acceleration_capability: The acceleration_capability of this VirtualComputeResourceInformation.
        :type acceleration_capability: str
        """
        if acceleration_capability is None:
            raise ValueError("Invalid value for `acceleration_capability`, must not be `None`")  # noqa: E501

        self._acceleration_capability = acceleration_capability

    @property
    def compute_resource_type_id(self) -> str:
        """Gets the compute_resource_type_id of this VirtualComputeResourceInformation.

        Identifier of the consumable virtualised compute resource type.  # noqa: E501

        :return: The compute_resource_type_id of this VirtualComputeResourceInformation.
        :rtype: str
        """
        return self._compute_resource_type_id

    @compute_resource_type_id.setter
    def compute_resource_type_id(self, compute_resource_type_id: str):
        """Sets the compute_resource_type_id of this VirtualComputeResourceInformation.

        Identifier of the consumable virtualised compute resource type.  # noqa: E501

        :param compute_resource_type_id: The compute_resource_type_id of this VirtualComputeResourceInformation.
        :type compute_resource_type_id: str
        """
        if compute_resource_type_id is None:
            raise ValueError("Invalid value for `compute_resource_type_id`, must not be `None`")  # noqa: E501

        self._compute_resource_type_id = compute_resource_type_id

    @property
    def virtual_cpu(self) -> VirtualComputeResourceInformationVirtualCPU:
        """Gets the virtual_cpu of this VirtualComputeResourceInformation.


        :return: The virtual_cpu of this VirtualComputeResourceInformation.
        :rtype: VirtualComputeResourceInformationVirtualCPU
        """
        return self._virtual_cpu

    @virtual_cpu.setter
    def virtual_cpu(self, virtual_cpu: VirtualComputeResourceInformationVirtualCPU):
        """Sets the virtual_cpu of this VirtualComputeResourceInformation.


        :param virtual_cpu: The virtual_cpu of this VirtualComputeResourceInformation.
        :type virtual_cpu: VirtualComputeResourceInformationVirtualCPU
        """
        if virtual_cpu is None:
            raise ValueError("Invalid value for `virtual_cpu`, must not be `None`")  # noqa: E501

        self._virtual_cpu = virtual_cpu

    @property
    def virtual_memory(self) -> VirtualComputeResourceInformationVirtualMemory:
        """Gets the virtual_memory of this VirtualComputeResourceInformation.


        :return: The virtual_memory of this VirtualComputeResourceInformation.
        :rtype: VirtualComputeResourceInformationVirtualMemory
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory: VirtualComputeResourceInformationVirtualMemory):
        """Sets the virtual_memory of this VirtualComputeResourceInformation.


        :param virtual_memory: The virtual_memory of this VirtualComputeResourceInformation.
        :type virtual_memory: VirtualComputeResourceInformationVirtualMemory
        """
        if virtual_memory is None:
            raise ValueError("Invalid value for `virtual_memory`, must not be `None`")  # noqa: E501

        self._virtual_memory = virtual_memory
