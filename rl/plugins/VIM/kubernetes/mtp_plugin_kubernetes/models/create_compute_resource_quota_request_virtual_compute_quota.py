# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class CreateComputeResourceQuotaRequestVirtualComputeQuota(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, num_vcp_us: int=None, num_vc_instances: int=None, virtual_mem_size: float=None):  # noqa: E501
        """CreateComputeResourceQuotaRequestVirtualComputeQuota - a model defined in Swagger

        :param num_vcp_us: The num_vcp_us of this CreateComputeResourceQuotaRequestVirtualComputeQuota.  # noqa: E501
        :type num_vcp_us: int
        :param num_vc_instances: The num_vc_instances of this CreateComputeResourceQuotaRequestVirtualComputeQuota.  # noqa: E501
        :type num_vc_instances: int
        :param virtual_mem_size: The virtual_mem_size of this CreateComputeResourceQuotaRequestVirtualComputeQuota.  # noqa: E501
        :type virtual_mem_size: float
        """
        self.swagger_types = {
            'num_vcp_us': int,
            'num_vc_instances': int,
            'virtual_mem_size': float
        }

        self.attribute_map = {
            'num_vcp_us': 'numVCPUs',
            'num_vc_instances': 'numVcInstances',
            'virtual_mem_size': 'virtualMemSize'
        }

        self._num_vcp_us = num_vcp_us
        self._num_vc_instances = num_vc_instances
        self._virtual_mem_size = virtual_mem_size

    @classmethod
    def from_dict(cls, dikt) -> 'CreateComputeResourceQuotaRequestVirtualComputeQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateComputeResourceQuotaRequest_virtualComputeQuota of this CreateComputeResourceQuotaRequestVirtualComputeQuota.  # noqa: E501
        :rtype: CreateComputeResourceQuotaRequestVirtualComputeQuota
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_vcp_us(self) -> int:
        """Gets the num_vcp_us of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Number of CPU cores to be restricted by the quota. The cardinality can be 0 if no specific number of CPU cores is to be restricted by the quota or the quota for CPU cores is not to be update.  # noqa: E501

        :return: The num_vcp_us of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :rtype: int
        """
        return self._num_vcp_us

    @num_vcp_us.setter
    def num_vcp_us(self, num_vcp_us: int):
        """Sets the num_vcp_us of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Number of CPU cores to be restricted by the quota. The cardinality can be 0 if no specific number of CPU cores is to be restricted by the quota or the quota for CPU cores is not to be update.  # noqa: E501

        :param num_vcp_us: The num_vcp_us of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :type num_vcp_us: int
        """
        if num_vcp_us is None:
            raise ValueError("Invalid value for `num_vcp_us`, must not be `None`")  # noqa: E501

        self._num_vcp_us = num_vcp_us

    @property
    def num_vc_instances(self) -> int:
        """Gets the num_vc_instances of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Number of virtualisation container instances to be restricted by the quota. The cardinality can be 0 if no specific number of virtualisation container instances is to be restricted by the quota or the quota for virtualisation container instances is not to be update.  # noqa: E501

        :return: The num_vc_instances of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :rtype: int
        """
        return self._num_vc_instances

    @num_vc_instances.setter
    def num_vc_instances(self, num_vc_instances: int):
        """Sets the num_vc_instances of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Number of virtualisation container instances to be restricted by the quota. The cardinality can be 0 if no specific number of virtualisation container instances is to be restricted by the quota or the quota for virtualisation container instances is not to be update.  # noqa: E501

        :param num_vc_instances: The num_vc_instances of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :type num_vc_instances: int
        """
        if num_vc_instances is None:
            raise ValueError("Invalid value for `num_vc_instances`, must not be `None`")  # noqa: E501

        self._num_vc_instances = num_vc_instances

    @property
    def virtual_mem_size(self) -> float:
        """Gets the virtual_mem_size of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Size of virtual memory to be restricted by the quota. The cardinality can be 0 if no specific size of virtual memory is to be restricted by the quota or the quota for virtual memory is not to be update.  # noqa: E501

        :return: The virtual_mem_size of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :rtype: float
        """
        return self._virtual_mem_size

    @virtual_mem_size.setter
    def virtual_mem_size(self, virtual_mem_size: float):
        """Sets the virtual_mem_size of this CreateComputeResourceQuotaRequestVirtualComputeQuota.

        Size of virtual memory to be restricted by the quota. The cardinality can be 0 if no specific size of virtual memory is to be restricted by the quota or the quota for virtual memory is not to be update.  # noqa: E501

        :param virtual_mem_size: The virtual_mem_size of this CreateComputeResourceQuotaRequestVirtualComputeQuota.
        :type virtual_mem_size: float
        """
        if virtual_mem_size is None:
            raise ValueError("Invalid value for `virtual_mem_size`, must not be `None`")  # noqa: E501

        self._virtual_mem_size = virtual_mem_size
