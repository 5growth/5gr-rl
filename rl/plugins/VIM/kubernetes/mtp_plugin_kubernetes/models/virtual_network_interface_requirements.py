# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class VirtualNetworkInterfaceRequirements(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, support_mandatory: bool=None, requirement: object=None):  # noqa: E501
        """VirtualNetworkInterfaceRequirements - a model defined in Swagger

        :param name: The name of this VirtualNetworkInterfaceRequirements.  # noqa: E501
        :type name: str
        :param description: The description of this VirtualNetworkInterfaceRequirements.  # noqa: E501
        :type description: str
        :param support_mandatory: The support_mandatory of this VirtualNetworkInterfaceRequirements.  # noqa: E501
        :type support_mandatory: bool
        :param requirement: The requirement of this VirtualNetworkInterfaceRequirements.  # noqa: E501
        :type requirement: object
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'support_mandatory': bool,
            'requirement': object
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'support_mandatory': 'supportMandatory',
            'requirement': 'requirement'
        }

        self._name = name
        self._description = description
        self._support_mandatory = support_mandatory
        self._requirement = requirement

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualNetworkInterfaceRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualNetworkInterfaceRequirements of this VirtualNetworkInterfaceRequirements.  # noqa: E501
        :rtype: VirtualNetworkInterfaceRequirements
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this VirtualNetworkInterfaceRequirements.

        Provides a human readable name for this requirement.  # noqa: E501

        :return: The name of this VirtualNetworkInterfaceRequirements.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VirtualNetworkInterfaceRequirements.

        Provides a human readable name for this requirement.  # noqa: E501

        :param name: The name of this VirtualNetworkInterfaceRequirements.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this VirtualNetworkInterfaceRequirements.

        Provides a human readable description for this requirement.  # noqa: E501

        :return: The description of this VirtualNetworkInterfaceRequirements.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this VirtualNetworkInterfaceRequirements.

        Provides a human readable description for this requirement.  # noqa: E501

        :param description: The description of this VirtualNetworkInterfaceRequirements.
        :type description: str
        """

        self._description = description

    @property
    def support_mandatory(self) -> bool:
        """Gets the support_mandatory of this VirtualNetworkInterfaceRequirements.

        Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation or desirable (FALSE).  # noqa: E501

        :return: The support_mandatory of this VirtualNetworkInterfaceRequirements.
        :rtype: bool
        """
        return self._support_mandatory

    @support_mandatory.setter
    def support_mandatory(self, support_mandatory: bool):
        """Sets the support_mandatory of this VirtualNetworkInterfaceRequirements.

        Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation or desirable (FALSE).  # noqa: E501

        :param support_mandatory: The support_mandatory of this VirtualNetworkInterfaceRequirements.
        :type support_mandatory: bool
        """
        if support_mandatory is None:
            raise ValueError("Invalid value for `support_mandatory`, must not be `None`")  # noqa: E501

        self._support_mandatory = support_mandatory

    @property
    def requirement(self) -> object:
        """Gets the requirement of this VirtualNetworkInterfaceRequirements.

        Specifies a requirement such as the support of SR-IOV, a particular data plane acceleration library, an API to be exposed by a NIC, etc.  # noqa: E501

        :return: The requirement of this VirtualNetworkInterfaceRequirements.
        :rtype: object
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement: object):
        """Sets the requirement of this VirtualNetworkInterfaceRequirements.

        Specifies a requirement such as the support of SR-IOV, a particular data plane acceleration library, an API to be exposed by a NIC, etc.  # noqa: E501

        :param requirement: The requirement of this VirtualNetworkInterfaceRequirements.
        :type requirement: object
        """
        if requirement is None:
            raise ValueError("Invalid value for `requirement`, must not be `None`")  # noqa: E501

        self._requirement = requirement
