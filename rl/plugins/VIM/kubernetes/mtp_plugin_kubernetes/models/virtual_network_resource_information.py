# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.allocate_network_result_network_data_network_qo_s import \
    AllocateNetworkResultNetworkDataNetworkQoS
from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class VirtualNetworkResourceInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: float=None, network_qo_s: List[AllocateNetworkResultNetworkDataNetworkQoS]=None, network_resource_type_id: str=None, network_type: str=None):  # noqa: E501
        """VirtualNetworkResourceInformation - a model defined in Swagger

        :param bandwidth: The bandwidth of this VirtualNetworkResourceInformation.  # noqa: E501
        :type bandwidth: float
        :param network_qo_s: The network_qo_s of this VirtualNetworkResourceInformation.  # noqa: E501
        :type network_qo_s: List[AllocateNetworkResultNetworkDataNetworkQoS]
        :param network_resource_type_id: The network_resource_type_id of this VirtualNetworkResourceInformation.  # noqa: E501
        :type network_resource_type_id: str
        :param network_type: The network_type of this VirtualNetworkResourceInformation.  # noqa: E501
        :type network_type: str
        """
        self.swagger_types = {
            'bandwidth': float,
            'network_qo_s': List[AllocateNetworkResultNetworkDataNetworkQoS],
            'network_resource_type_id': str,
            'network_type': str
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'network_qo_s': 'networkQoS',
            'network_resource_type_id': 'networkResourceTypeId',
            'network_type': 'networkType'
        }

        self._bandwidth = bandwidth
        self._network_qo_s = network_qo_s
        self._network_resource_type_id = network_resource_type_id
        self._network_type = network_type

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualNetworkResourceInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualNetworkResourceInformation of this VirtualNetworkResourceInformation.  # noqa: E501
        :rtype: VirtualNetworkResourceInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this VirtualNetworkResourceInformation.

        Minimum network bandwidth (in Mbps).  # noqa: E501

        :return: The bandwidth of this VirtualNetworkResourceInformation.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this VirtualNetworkResourceInformation.

        Minimum network bandwidth (in Mbps).  # noqa: E501

        :param bandwidth: The bandwidth of this VirtualNetworkResourceInformation.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def network_qo_s(self) -> List[AllocateNetworkResultNetworkDataNetworkQoS]:
        """Gets the network_qo_s of this VirtualNetworkResourceInformation.

        Element providing information about Quality of Service attributes that the network shall support.  # noqa: E501

        :return: The network_qo_s of this VirtualNetworkResourceInformation.
        :rtype: List[AllocateNetworkResultNetworkDataNetworkQoS]
        """
        return self._network_qo_s

    @network_qo_s.setter
    def network_qo_s(self, network_qo_s: List[AllocateNetworkResultNetworkDataNetworkQoS]):
        """Sets the network_qo_s of this VirtualNetworkResourceInformation.

        Element providing information about Quality of Service attributes that the network shall support.  # noqa: E501

        :param network_qo_s: The network_qo_s of this VirtualNetworkResourceInformation.
        :type network_qo_s: List[AllocateNetworkResultNetworkDataNetworkQoS]
        """
        if network_qo_s is None:
            raise ValueError("Invalid value for `network_qo_s`, must not be `None`")  # noqa: E501

        self._network_qo_s = network_qo_s

    @property
    def network_resource_type_id(self) -> str:
        """Gets the network_resource_type_id of this VirtualNetworkResourceInformation.

        Identifier of the network resource type.  # noqa: E501

        :return: The network_resource_type_id of this VirtualNetworkResourceInformation.
        :rtype: str
        """
        return self._network_resource_type_id

    @network_resource_type_id.setter
    def network_resource_type_id(self, network_resource_type_id: str):
        """Sets the network_resource_type_id of this VirtualNetworkResourceInformation.

        Identifier of the network resource type.  # noqa: E501

        :param network_resource_type_id: The network_resource_type_id of this VirtualNetworkResourceInformation.
        :type network_resource_type_id: str
        """
        if network_resource_type_id is None:
            raise ValueError("Invalid value for `network_resource_type_id`, must not be `None`")  # noqa: E501

        self._network_resource_type_id = network_resource_type_id

    @property
    def network_type(self) -> str:
        """Gets the network_type of this VirtualNetworkResourceInformation.

        The type of network that maps to the virtualised network. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.  # noqa: E501

        :return: The network_type of this VirtualNetworkResourceInformation.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type: str):
        """Sets the network_type of this VirtualNetworkResourceInformation.

        The type of network that maps to the virtualised network. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.  # noqa: E501

        :param network_type: The network_type of this VirtualNetworkResourceInformation.
        :type network_type: str
        """
        if network_type is None:
            raise ValueError("Invalid value for `network_type`, must not be `None`")  # noqa: E501

        self._network_type = network_type
