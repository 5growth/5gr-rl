# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.inter_nfvi_pop_network_topology import InterNfviPopNetworkTopology
from mtp_plugin_kubernetes.models.inter_nfvi_pop_network_type import InterNfviPopNetworkType
from mtp_plugin_kubernetes.models.logical_link_inter_nfvi_pops_inner_logical_links_network_qo_s import \
    LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS
from mtp_plugin_kubernetes.models.network_layer import NetworkLayer


class LogicalLinkInterNfviPopsInnerLogicalLinks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, logical_link_id: str=None, total_bandwidth: float=None, available_bandwidth: float=None, network_qo_s: LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS=None, src_gw_ip_address: str=None, local_link_id: int=None, dst_gw_ip_address: str=None, remote_link_id: int=None, network_layer: NetworkLayer=None, inter_nfvi_pop_network_type: InterNfviPopNetworkType=None, inter_nfvi_pop_network_topology: InterNfviPopNetworkTopology=None):  # noqa: E501
        """LogicalLinkInterNfviPopsInnerLogicalLinks - a model defined in Swagger

        :param logical_link_id: The logical_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type logical_link_id: str
        :param total_bandwidth: The total_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type total_bandwidth: float
        :param available_bandwidth: The available_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type available_bandwidth: float
        :param network_qo_s: The network_qo_s of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type network_qo_s: LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS
        :param src_gw_ip_address: The src_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type src_gw_ip_address: str
        :param local_link_id: The local_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type local_link_id: int
        :param dst_gw_ip_address: The dst_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type dst_gw_ip_address: str
        :param remote_link_id: The remote_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type remote_link_id: int
        :param network_layer: The network_layer of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type network_layer: NetworkLayer
        :param inter_nfvi_pop_network_type: The inter_nfvi_pop_network_type of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type inter_nfvi_pop_network_type: InterNfviPopNetworkType
        :param inter_nfvi_pop_network_topology: The inter_nfvi_pop_network_topology of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :type inter_nfvi_pop_network_topology: InterNfviPopNetworkTopology
        """
        self.swagger_types = {
            'logical_link_id': str,
            'total_bandwidth': float,
            'available_bandwidth': float,
            'network_qo_s': LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS,
            'src_gw_ip_address': str,
            'local_link_id': int,
            'dst_gw_ip_address': str,
            'remote_link_id': int,
            'network_layer': NetworkLayer,
            'inter_nfvi_pop_network_type': InterNfviPopNetworkType,
            'inter_nfvi_pop_network_topology': InterNfviPopNetworkTopology
        }

        self.attribute_map = {
            'logical_link_id': 'logicalLinkId',
            'total_bandwidth': 'totalBandwidth',
            'available_bandwidth': 'availableBandwidth',
            'network_qo_s': 'networkQoS',
            'src_gw_ip_address': 'srcGwIpAddress',
            'local_link_id': 'localLinkId',
            'dst_gw_ip_address': 'dstGwIpAddress',
            'remote_link_id': 'remoteLinkId',
            'network_layer': 'networkLayer',
            'inter_nfvi_pop_network_type': 'interNfviPopNetworkType',
            'inter_nfvi_pop_network_topology': 'interNfviPopNetworkTopology'
        }

        self._logical_link_id = logical_link_id
        self._total_bandwidth = total_bandwidth
        self._available_bandwidth = available_bandwidth
        self._network_qo_s = network_qo_s
        self._src_gw_ip_address = src_gw_ip_address
        self._local_link_id = local_link_id
        self._dst_gw_ip_address = dst_gw_ip_address
        self._remote_link_id = remote_link_id
        self._network_layer = network_layer
        self._inter_nfvi_pop_network_type = inter_nfvi_pop_network_type
        self._inter_nfvi_pop_network_topology = inter_nfvi_pop_network_topology

    @classmethod
    def from_dict(cls, dikt) -> 'LogicalLinkInterNfviPopsInnerLogicalLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The logicalLinkInterNfviPops_inner_logicalLinks of this LogicalLinkInterNfviPopsInnerLogicalLinks.  # noqa: E501
        :rtype: LogicalLinkInterNfviPopsInnerLogicalLinks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logical_link_id(self) -> str:
        """Gets the logical_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        (numbered) Identifier of the logical link  # noqa: E501

        :return: The logical_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: str
        """
        return self._logical_link_id

    @logical_link_id.setter
    def logical_link_id(self, logical_link_id: str):
        """Sets the logical_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        (numbered) Identifier of the logical link  # noqa: E501

        :param logical_link_id: The logical_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type logical_link_id: str
        """
        if logical_link_id is None:
            raise ValueError("Invalid value for `logical_link_id`, must not be `None`")  # noqa: E501

        self._logical_link_id = logical_link_id

    @property
    def total_bandwidth(self) -> float:
        """Gets the total_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Total bandwidth capacity supported by the logical link (in Mbps).  # noqa: E501

        :return: The total_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: float
        """
        return self._total_bandwidth

    @total_bandwidth.setter
    def total_bandwidth(self, total_bandwidth: float):
        """Sets the total_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Total bandwidth capacity supported by the logical link (in Mbps).  # noqa: E501

        :param total_bandwidth: The total_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type total_bandwidth: float
        """
        if total_bandwidth is None:
            raise ValueError("Invalid value for `total_bandwidth`, must not be `None`")  # noqa: E501

        self._total_bandwidth = total_bandwidth

    @property
    def available_bandwidth(self) -> float:
        """Gets the available_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Available bandwidth capacity supported by the logical link (in Mbps).  # noqa: E501

        :return: The available_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: float
        """
        return self._available_bandwidth

    @available_bandwidth.setter
    def available_bandwidth(self, available_bandwidth: float):
        """Sets the available_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Available bandwidth capacity supported by the logical link (in Mbps).  # noqa: E501

        :param available_bandwidth: The available_bandwidth of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type available_bandwidth: float
        """
        if available_bandwidth is None:
            raise ValueError("Invalid value for `available_bandwidth`, must not be `None`")  # noqa: E501

        self._available_bandwidth = available_bandwidth

    @property
    def network_qo_s(self) -> LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS:
        """Gets the network_qo_s of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :return: The network_qo_s of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS
        """
        return self._network_qo_s

    @network_qo_s.setter
    def network_qo_s(self, network_qo_s: LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS):
        """Sets the network_qo_s of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :param network_qo_s: The network_qo_s of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type network_qo_s: LogicalLinkInterNfviPopsInnerLogicalLinksNetworkQoS
        """
        if network_qo_s is None:
            raise ValueError("Invalid value for `network_qo_s`, must not be `None`")  # noqa: E501

        self._network_qo_s = network_qo_s

    @property
    def src_gw_ip_address(self) -> str:
        """Gets the src_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        5GT - Source NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32).  # noqa: E501

        :return: The src_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: str
        """
        return self._src_gw_ip_address

    @src_gw_ip_address.setter
    def src_gw_ip_address(self, src_gw_ip_address: str):
        """Sets the src_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        5GT - Source NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32).  # noqa: E501

        :param src_gw_ip_address: The src_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type src_gw_ip_address: str
        """
        if src_gw_ip_address is None:
            raise ValueError("Invalid value for `src_gw_ip_address`, must not be `None`")  # noqa: E501

        self._src_gw_ip_address = src_gw_ip_address

    @property
    def local_link_id(self) -> int:
        """Gets the local_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Local Logical Link Id.  # noqa: E501

        :return: The local_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: int
        """
        return self._local_link_id

    @local_link_id.setter
    def local_link_id(self, local_link_id: int):
        """Sets the local_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Local Logical Link Id.  # noqa: E501

        :param local_link_id: The local_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type local_link_id: int
        """
        if local_link_id is None:
            raise ValueError("Invalid value for `local_link_id`, must not be `None`")  # noqa: E501

        self._local_link_id = local_link_id

    @property
    def dst_gw_ip_address(self) -> str:
        """Gets the dst_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        5GT - Destination NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32).  # noqa: E501

        :return: The dst_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: str
        """
        return self._dst_gw_ip_address

    @dst_gw_ip_address.setter
    def dst_gw_ip_address(self, dst_gw_ip_address: str):
        """Sets the dst_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        5GT - Destination NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32).  # noqa: E501

        :param dst_gw_ip_address: The dst_gw_ip_address of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type dst_gw_ip_address: str
        """
        if dst_gw_ip_address is None:
            raise ValueError("Invalid value for `dst_gw_ip_address`, must not be `None`")  # noqa: E501

        self._dst_gw_ip_address = dst_gw_ip_address

    @property
    def remote_link_id(self) -> int:
        """Gets the remote_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Remote Logical Link Id.  # noqa: E501

        :return: The remote_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: int
        """
        return self._remote_link_id

    @remote_link_id.setter
    def remote_link_id(self, remote_link_id: int):
        """Sets the remote_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.

        Remote Logical Link Id.  # noqa: E501

        :param remote_link_id: The remote_link_id of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type remote_link_id: int
        """
        if remote_link_id is None:
            raise ValueError("Invalid value for `remote_link_id`, must not be `None`")  # noqa: E501

        self._remote_link_id = remote_link_id

    @property
    def network_layer(self) -> NetworkLayer:
        """Gets the network_layer of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :return: The network_layer of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: NetworkLayer
        """
        return self._network_layer

    @network_layer.setter
    def network_layer(self, network_layer: NetworkLayer):
        """Sets the network_layer of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :param network_layer: The network_layer of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type network_layer: NetworkLayer
        """
        if network_layer is None:
            raise ValueError("Invalid value for `network_layer`, must not be `None`")  # noqa: E501

        self._network_layer = network_layer

    @property
    def inter_nfvi_pop_network_type(self) -> InterNfviPopNetworkType:
        """Gets the inter_nfvi_pop_network_type of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :return: The inter_nfvi_pop_network_type of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: InterNfviPopNetworkType
        """
        return self._inter_nfvi_pop_network_type

    @inter_nfvi_pop_network_type.setter
    def inter_nfvi_pop_network_type(self, inter_nfvi_pop_network_type: InterNfviPopNetworkType):
        """Sets the inter_nfvi_pop_network_type of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :param inter_nfvi_pop_network_type: The inter_nfvi_pop_network_type of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type inter_nfvi_pop_network_type: InterNfviPopNetworkType
        """
        if inter_nfvi_pop_network_type is None:
            raise ValueError("Invalid value for `inter_nfvi_pop_network_type`, must not be `None`")  # noqa: E501

        self._inter_nfvi_pop_network_type = inter_nfvi_pop_network_type

    @property
    def inter_nfvi_pop_network_topology(self) -> InterNfviPopNetworkTopology:
        """Gets the inter_nfvi_pop_network_topology of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :return: The inter_nfvi_pop_network_topology of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :rtype: InterNfviPopNetworkTopology
        """
        return self._inter_nfvi_pop_network_topology

    @inter_nfvi_pop_network_topology.setter
    def inter_nfvi_pop_network_topology(self, inter_nfvi_pop_network_topology: InterNfviPopNetworkTopology):
        """Sets the inter_nfvi_pop_network_topology of this LogicalLinkInterNfviPopsInnerLogicalLinks.


        :param inter_nfvi_pop_network_topology: The inter_nfvi_pop_network_topology of this LogicalLinkInterNfviPopsInnerLogicalLinks.
        :type inter_nfvi_pop_network_topology: InterNfviPopNetworkTopology
        """
        if inter_nfvi_pop_network_topology is None:
            raise ValueError("Invalid value for `inter_nfvi_pop_network_topology`, must not be `None`")  # noqa: E501

        self._inter_nfvi_pop_network_topology = inter_nfvi_pop_network_topology
