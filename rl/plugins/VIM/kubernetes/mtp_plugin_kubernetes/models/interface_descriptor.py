# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.tunnel_info import TunnelInfo


class InterfaceDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, interface_type: str=None, tunnel_info: TunnelInfo=None, src_mac_address: str=None, dst_mac_address: str=None, dst_ip_address: str=None):  # noqa: E501
        """InterfaceDescriptor - a model defined in Swagger

        :param interface_type: The interface_type of this InterfaceDescriptor.  # noqa: E501
        :type interface_type: str
        :param tunnel_info: The tunnel_info of this InterfaceDescriptor.  # noqa: E501
        :type tunnel_info: TunnelInfo
        :param src_mac_address: The src_mac_address of this InterfaceDescriptor.  # noqa: E501
        :type src_mac_address: str
        :param dst_mac_address: The dst_mac_address of this InterfaceDescriptor.  # noqa: E501
        :type dst_mac_address: str
        :param dst_ip_address: The dst_ip_address of this InterfaceDescriptor.  # noqa: E501
        :type dst_ip_address: str
        """
        self.swagger_types = {
            'interface_type': str,
            'tunnel_info': TunnelInfo,
            'src_mac_address': str,
            'dst_mac_address': str,
            'dst_ip_address': str
        }

        self.attribute_map = {
            'interface_type': 'interfaceType',
            'tunnel_info': 'tunnelInfo',
            'src_mac_address': 'srcMACAddress',
            'dst_mac_address': 'dstMACAddress',
            'dst_ip_address': 'dstIPAddress'
        }

        self._interface_type = interface_type
        self._tunnel_info = tunnel_info
        self._src_mac_address = src_mac_address
        self._dst_mac_address = dst_mac_address
        self._dst_ip_address = dst_ip_address

    @classmethod
    def from_dict(cls, dikt) -> 'InterfaceDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InterfaceDescriptor of this InterfaceDescriptor.  # noqa: E501
        :rtype: InterfaceDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface_type(self) -> str:
        """Gets the interface_type of this InterfaceDescriptor.

        Type of interface (TUNNEL, MAC, IP, etc.)  # noqa: E501

        :return: The interface_type of this InterfaceDescriptor.
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type: str):
        """Sets the interface_type of this InterfaceDescriptor.

        Type of interface (TUNNEL, MAC, IP, etc.)  # noqa: E501

        :param interface_type: The interface_type of this InterfaceDescriptor.
        :type interface_type: str
        """
        allowed_values = ["TUNNEL", "MAC", "IP"]  # noqa: E501
        if interface_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_type` ({0}), must be one of {1}"
                .format(interface_type, allowed_values)
            )

        self._interface_type = interface_type

    @property
    def tunnel_info(self) -> TunnelInfo:
        """Gets the tunnel_info of this InterfaceDescriptor.


        :return: The tunnel_info of this InterfaceDescriptor.
        :rtype: TunnelInfo
        """
        return self._tunnel_info

    @tunnel_info.setter
    def tunnel_info(self, tunnel_info: TunnelInfo):
        """Sets the tunnel_info of this InterfaceDescriptor.


        :param tunnel_info: The tunnel_info of this InterfaceDescriptor.
        :type tunnel_info: TunnelInfo
        """

        self._tunnel_info = tunnel_info

    @property
    def src_mac_address(self) -> str:
        """Gets the src_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the source address identifies the MAC address of the interface.  # noqa: E501

        :return: The src_mac_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._src_mac_address

    @src_mac_address.setter
    def src_mac_address(self, src_mac_address: str):
        """Sets the src_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the source address identifies the MAC address of the interface.  # noqa: E501

        :param src_mac_address: The src_mac_address of this InterfaceDescriptor.
        :type src_mac_address: str
        """

        self._src_mac_address = src_mac_address

    @property
    def dst_mac_address(self) -> str:
        """Gets the dst_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the destination address identifies the MAC address of the interface. Only used for dstInterface.  # noqa: E501

        :return: The dst_mac_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._dst_mac_address

    @dst_mac_address.setter
    def dst_mac_address(self, dst_mac_address: str):
        """Sets the dst_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the destination address identifies the MAC address of the interface. Only used for dstInterface.  # noqa: E501

        :param dst_mac_address: The dst_mac_address of this InterfaceDescriptor.
        :type dst_mac_address: str
        """

        self._dst_mac_address = dst_mac_address

    @property
    def dst_ip_address(self) -> str:
        """Gets the dst_ip_address of this InterfaceDescriptor.

        f the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.  # noqa: E501

        :return: The dst_ip_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._dst_ip_address

    @dst_ip_address.setter
    def dst_ip_address(self, dst_ip_address: str):
        """Sets the dst_ip_address of this InterfaceDescriptor.

        f the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.  # noqa: E501

        :param dst_ip_address: The dst_ip_address of this InterfaceDescriptor.
        :type dst_ip_address: str
        """

        self._dst_ip_address = dst_ip_address
