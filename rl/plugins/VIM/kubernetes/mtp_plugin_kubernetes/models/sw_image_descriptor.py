# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class SwImageDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, version: str=None, checksum: str=None, container_format: str=None, disk_format: str=None, min_disk: float=None, min_ram: float=None, size: float=None, sw_image: str=None, operating_system: str=None, supported_virtualization_environment: List[str]=None):  # noqa: E501
        """SwImageDescriptor - a model defined in Swagger

        :param id: The id of this SwImageDescriptor.  # noqa: E501
        :type id: str
        :param name: The name of this SwImageDescriptor.  # noqa: E501
        :type name: str
        :param version: The version of this SwImageDescriptor.  # noqa: E501
        :type version: str
        :param checksum: The checksum of this SwImageDescriptor.  # noqa: E501
        :type checksum: str
        :param container_format: The container_format of this SwImageDescriptor.  # noqa: E501
        :type container_format: str
        :param disk_format: The disk_format of this SwImageDescriptor.  # noqa: E501
        :type disk_format: str
        :param min_disk: The min_disk of this SwImageDescriptor.  # noqa: E501
        :type min_disk: float
        :param min_ram: The min_ram of this SwImageDescriptor.  # noqa: E501
        :type min_ram: float
        :param size: The size of this SwImageDescriptor.  # noqa: E501
        :type size: float
        :param sw_image: The sw_image of this SwImageDescriptor.  # noqa: E501
        :type sw_image: str
        :param operating_system: The operating_system of this SwImageDescriptor.  # noqa: E501
        :type operating_system: str
        :param supported_virtualization_environment: The supported_virtualization_environment of this SwImageDescriptor.  # noqa: E501
        :type supported_virtualization_environment: List[str]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'version': str,
            'checksum': str,
            'container_format': str,
            'disk_format': str,
            'min_disk': float,
            'min_ram': float,
            'size': float,
            'sw_image': str,
            'operating_system': str,
            'supported_virtualization_environment': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'version': 'version',
            'checksum': 'checksum',
            'container_format': 'containerFormat',
            'disk_format': 'diskFormat',
            'min_disk': 'minDisk',
            'min_ram': 'minRam',
            'size': 'size',
            'sw_image': 'swImage',
            'operating_system': 'operatingSystem',
            'supported_virtualization_environment': 'supportedVirtualizationEnvironment'
        }

        self._id = id
        self._name = name
        self._version = version
        self._checksum = checksum
        self._container_format = container_format
        self._disk_format = disk_format
        self._min_disk = min_disk
        self._min_ram = min_ram
        self._size = size
        self._sw_image = sw_image
        self._operating_system = operating_system
        self._supported_virtualization_environment = supported_virtualization_environment

    @classmethod
    def from_dict(cls, dikt) -> 'SwImageDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SwImageDescriptor of this SwImageDescriptor.  # noqa: E501
        :rtype: SwImageDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SwImageDescriptor.

        The identifier of this software image.  # noqa: E501

        :return: The id of this SwImageDescriptor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SwImageDescriptor.

        The identifier of this software image.  # noqa: E501

        :param id: The id of this SwImageDescriptor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SwImageDescriptor.

        The name of this software image.  # noqa: E501

        :return: The name of this SwImageDescriptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SwImageDescriptor.

        The name of this software image.  # noqa: E501

        :param name: The name of this SwImageDescriptor.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this SwImageDescriptor.

        The version of this software image.  # noqa: E501

        :return: The version of this SwImageDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SwImageDescriptor.

        The version of this software image.  # noqa: E501

        :param version: The version of this SwImageDescriptor.
        :type version: str
        """

        self._version = version

    @property
    def checksum(self) -> str:
        """Gets the checksum of this SwImageDescriptor.

        The checksum of this software image  # noqa: E501

        :return: The checksum of this SwImageDescriptor.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """Sets the checksum of this SwImageDescriptor.

        The checksum of this software image  # noqa: E501

        :param checksum: The checksum of this SwImageDescriptor.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def container_format(self) -> str:
        """Gets the container_format of this SwImageDescriptor.

        The container format describes the container file format in which software image is provided.  # noqa: E501

        :return: The container_format of this SwImageDescriptor.
        :rtype: str
        """
        return self._container_format

    @container_format.setter
    def container_format(self, container_format: str):
        """Sets the container_format of this SwImageDescriptor.

        The container format describes the container file format in which software image is provided.  # noqa: E501

        :param container_format: The container_format of this SwImageDescriptor.
        :type container_format: str
        """
        if container_format is None:
            raise ValueError("Invalid value for `container_format`, must not be `None`")  # noqa: E501

        self._container_format = container_format

    @property
    def disk_format(self) -> str:
        """Gets the disk_format of this SwImageDescriptor.

        The disk format of a software image is the format of the underlying disk image.  # noqa: E501

        :return: The disk_format of this SwImageDescriptor.
        :rtype: str
        """
        return self._disk_format

    @disk_format.setter
    def disk_format(self, disk_format: str):
        """Sets the disk_format of this SwImageDescriptor.

        The disk format of a software image is the format of the underlying disk image.  # noqa: E501

        :param disk_format: The disk_format of this SwImageDescriptor.
        :type disk_format: str
        """

        self._disk_format = disk_format

    @property
    def min_disk(self) -> float:
        """Gets the min_disk of this SwImageDescriptor.

        The minimal disk size requirement for this software image. The value of the \"size of storage\" attribute of the VirtualStorageDesc referencing this SwImageDesc shall not be smaller than the value of minDisk.  # noqa: E501

        :return: The min_disk of this SwImageDescriptor.
        :rtype: float
        """
        return self._min_disk

    @min_disk.setter
    def min_disk(self, min_disk: float):
        """Sets the min_disk of this SwImageDescriptor.

        The minimal disk size requirement for this software image. The value of the \"size of storage\" attribute of the VirtualStorageDesc referencing this SwImageDesc shall not be smaller than the value of minDisk.  # noqa: E501

        :param min_disk: The min_disk of this SwImageDescriptor.
        :type min_disk: float
        """

        self._min_disk = min_disk

    @property
    def min_ram(self) -> float:
        """Gets the min_ram of this SwImageDescriptor.

        The minimal RAM requirement for this software image. The value of the \"size\" attribute of VirtualMemoryData of the Vdu referencing this SwImageDesc shall not be smaller than the value of minRam.  # noqa: E501

        :return: The min_ram of this SwImageDescriptor.
        :rtype: float
        """
        return self._min_ram

    @min_ram.setter
    def min_ram(self, min_ram: float):
        """Sets the min_ram of this SwImageDescriptor.

        The minimal RAM requirement for this software image. The value of the \"size\" attribute of VirtualMemoryData of the Vdu referencing this SwImageDesc shall not be smaller than the value of minRam.  # noqa: E501

        :param min_ram: The min_ram of this SwImageDescriptor.
        :type min_ram: float
        """

        self._min_ram = min_ram

    @property
    def size(self) -> float:
        """Gets the size of this SwImageDescriptor.

        The size of this software image.  # noqa: E501

        :return: The size of this SwImageDescriptor.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size: float):
        """Sets the size of this SwImageDescriptor.

        The size of this software image.  # noqa: E501

        :param size: The size of this SwImageDescriptor.
        :type size: float
        """

        self._size = size

    @property
    def sw_image(self) -> str:
        """Gets the sw_image of this SwImageDescriptor.

        This is a reference to the actual software image. The reference can be relative to the root of the VNF Package or can be a URL.  # noqa: E501

        :return: The sw_image of this SwImageDescriptor.
        :rtype: str
        """
        return self._sw_image

    @sw_image.setter
    def sw_image(self, sw_image: str):
        """Sets the sw_image of this SwImageDescriptor.

        This is a reference to the actual software image. The reference can be relative to the root of the VNF Package or can be a URL.  # noqa: E501

        :param sw_image: The sw_image of this SwImageDescriptor.
        :type sw_image: str
        """
        if sw_image is None:
            raise ValueError("Invalid value for `sw_image`, must not be `None`")  # noqa: E501

        self._sw_image = sw_image

    @property
    def operating_system(self) -> str:
        """Gets the operating_system of this SwImageDescriptor.

        Identifies the operating system used in the software image. This attribute may also identify if a 32 bit or 64 bit software image is used.  # noqa: E501

        :return: The operating_system of this SwImageDescriptor.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system: str):
        """Sets the operating_system of this SwImageDescriptor.

        Identifies the operating system used in the software image. This attribute may also identify if a 32 bit or 64 bit software image is used.  # noqa: E501

        :param operating_system: The operating_system of this SwImageDescriptor.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def supported_virtualization_environment(self) -> List[str]:
        """Gets the supported_virtualization_environment of this SwImageDescriptor.

        Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image.  # noqa: E501

        :return: The supported_virtualization_environment of this SwImageDescriptor.
        :rtype: List[str]
        """
        return self._supported_virtualization_environment

    @supported_virtualization_environment.setter
    def supported_virtualization_environment(self, supported_virtualization_environment: List[str]):
        """Sets the supported_virtualization_environment of this SwImageDescriptor.

        Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image.  # noqa: E501

        :param supported_virtualization_environment: The supported_virtualization_environment of this SwImageDescriptor.
        :type supported_virtualization_environment: List[str]
        """

        self._supported_virtualization_environment = supported_virtualization_environment
