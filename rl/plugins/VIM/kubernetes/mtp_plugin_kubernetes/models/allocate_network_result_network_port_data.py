# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes.models.meta_data_inner import MetaDataInner  # noqa: F401,E501
from mtp_plugin_kubernetes import util


class AllocateNetworkResultNetworkPortData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attached_resource_id: str=None, bandwidth: float=None, metadata: List[MetaDataInner]=None, network_id: str=None, operational_state: str=None, port_type: str=None, resource_id: str=None, segment_id: str=None):  # noqa: E501
        """AllocateNetworkResultNetworkPortData - a model defined in Swagger

        :param attached_resource_id: The attached_resource_id of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type attached_resource_id: str
        :param bandwidth: The bandwidth of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type bandwidth: float
        :param metadata: The metadata of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type metadata: List[MetaDataInner]
        :param network_id: The network_id of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type network_id: str
        :param operational_state: The operational_state of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type operational_state: str
        :param port_type: The port_type of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type port_type: str
        :param resource_id: The resource_id of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type resource_id: str
        :param segment_id: The segment_id of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :type segment_id: str
        """
        self.swagger_types = {
            'attached_resource_id': str,
            'bandwidth': float,
            'metadata': List[MetaDataInner],
            'network_id': str,
            'operational_state': str,
            'port_type': str,
            'resource_id': str,
            'segment_id': str
        }

        self.attribute_map = {
            'attached_resource_id': 'attachedResourceId',
            'bandwidth': 'bandwidth',
            'metadata': 'metadata',
            'network_id': 'networkId',
            'operational_state': 'operationalState',
            'port_type': 'portType',
            'resource_id': 'resourceId',
            'segment_id': 'segmentId'
        }

        self._attached_resource_id = attached_resource_id
        self._bandwidth = bandwidth
        self._metadata = metadata
        self._network_id = network_id
        self._operational_state = operational_state
        self._port_type = port_type
        self._resource_id = resource_id
        self._segment_id = segment_id

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateNetworkResultNetworkPortData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateNetworkResult_networkPortData of this AllocateNetworkResultNetworkPortData.  # noqa: E501
        :rtype: AllocateNetworkResultNetworkPortData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_resource_id(self) -> str:
        """Gets the attached_resource_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the attached resource to the network port (e.g. a virtualised compute resource, or identifier of the virtual network interface). The cardinality can be \"0\" if there is no specific resource connected to the network port.  # noqa: E501

        :return: The attached_resource_id of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._attached_resource_id

    @attached_resource_id.setter
    def attached_resource_id(self, attached_resource_id: str):
        """Sets the attached_resource_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the attached resource to the network port (e.g. a virtualised compute resource, or identifier of the virtual network interface). The cardinality can be \"0\" if there is no specific resource connected to the network port.  # noqa: E501

        :param attached_resource_id: The attached_resource_id of this AllocateNetworkResultNetworkPortData.
        :type attached_resource_id: str
        """
        if attached_resource_id is None:
            raise ValueError("Invalid value for `attached_resource_id`, must not be `None`")  # noqa: E501

        self._attached_resource_id = attached_resource_id

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this AllocateNetworkResultNetworkPortData.

        The bandwidth of the virtual network port (in Mbps). Cardinality can be \"0\" for virtual network ports without any specific allocated bandwidth.  # noqa: E501

        :return: The bandwidth of this AllocateNetworkResultNetworkPortData.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this AllocateNetworkResultNetworkPortData.

        The bandwidth of the virtual network port (in Mbps). Cardinality can be \"0\" for virtual network ports without any specific allocated bandwidth.  # noqa: E501

        :param bandwidth: The bandwidth of this AllocateNetworkResultNetworkPortData.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this AllocateNetworkResultNetworkPortData.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :return: The metadata of this AllocateNetworkResultNetworkPortData.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this AllocateNetworkResultNetworkPortData.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :param metadata: The metadata of this AllocateNetworkResultNetworkPortData.
        :type metadata: List[MetaDataInner]
        """

        self._metadata = metadata

    @property
    def network_id(self) -> str:
        """Gets the network_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the network that the port belongs to. When creating a port, such port needs to be part of a network.  # noqa: E501

        :return: The network_id of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id: str):
        """Sets the network_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the network that the port belongs to. When creating a port, such port needs to be part of a network.  # noqa: E501

        :param network_id: The network_id of this AllocateNetworkResultNetworkPortData.
        :type network_id: str
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this AllocateNetworkResultNetworkPortData.

        The operational state of the virtual network port.  # noqa: E501

        :return: The operational_state of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this AllocateNetworkResultNetworkPortData.

        The operational state of the virtual network port.  # noqa: E501

        :param operational_state: The operational_state of this AllocateNetworkResultNetworkPortData.
        :type operational_state: str
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")  # noqa: E501

        self._operational_state = operational_state

    @property
    def port_type(self) -> str:
        """Gets the port_type of this AllocateNetworkResultNetworkPortData.

        Type of network port. Examples of types are access ports (layer 2 or 3), or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.  # noqa: E501

        :return: The port_type of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._port_type

    @port_type.setter
    def port_type(self, port_type: str):
        """Sets the port_type of this AllocateNetworkResultNetworkPortData.

        Type of network port. Examples of types are access ports (layer 2 or 3), or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.  # noqa: E501

        :param port_type: The port_type of this AllocateNetworkResultNetworkPortData.
        :type port_type: str
        """
        if port_type is None:
            raise ValueError("Invalid value for `port_type`, must not be `None`")  # noqa: E501

        self._port_type = port_type

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the virtual network port.  # noqa: E501

        :return: The resource_id of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this AllocateNetworkResultNetworkPortData.

        Identifier of the virtual network port.  # noqa: E501

        :param resource_id: The resource_id of this AllocateNetworkResultNetworkPortData.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def segment_id(self) -> str:
        """Gets the segment_id of this AllocateNetworkResultNetworkPortData.

        The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be \"0\" for flat networks without any specific segmentation.  # noqa: E501

        :return: The segment_id of this AllocateNetworkResultNetworkPortData.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id: str):
        """Sets the segment_id of this AllocateNetworkResultNetworkPortData.

        The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be \"0\" for flat networks without any specific segmentation.  # noqa: E501

        :param segment_id: The segment_id of this AllocateNetworkResultNetworkPortData.
        :type segment_id: str
        """
        if segment_id is None:
            raise ValueError("Invalid value for `segment_id`, must not be `None`")  # noqa: E501

        self._segment_id = segment_id
