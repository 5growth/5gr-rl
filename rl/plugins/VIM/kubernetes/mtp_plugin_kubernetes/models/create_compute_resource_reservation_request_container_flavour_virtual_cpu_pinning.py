# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cpu_map: str=None, cpu_pinning_policy: str=None, cpu_pinning_rules: str=None):  # noqa: E501
        """CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning - a model defined in Swagger

        :param cpu_map: The cpu_map of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.  # noqa: E501
        :type cpu_map: str
        :param cpu_pinning_policy: The cpu_pinning_policy of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.  # noqa: E501
        :type cpu_pinning_policy: str
        :param cpu_pinning_rules: The cpu_pinning_rules of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.  # noqa: E501
        :type cpu_pinning_rules: str
        """
        self.swagger_types = {
            'cpu_map': str,
            'cpu_pinning_policy': str,
            'cpu_pinning_rules': str
        }

        self.attribute_map = {
            'cpu_map': 'cpuMap',
            'cpu_pinning_policy': 'cpuPinningPolicy',
            'cpu_pinning_rules': 'cpuPinningRules'
        }

        self._cpu_map = cpu_map
        self._cpu_pinning_policy = cpu_pinning_policy
        self._cpu_pinning_rules = cpu_pinning_rules

    @classmethod
    def from_dict(cls, dikt) -> 'CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateComputeResourceReservationRequest_containerFlavour_virtualCpuPinning of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.  # noqa: E501
        :rtype: CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_map(self) -> str:
        """Gets the cpu_map of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        Shows the association of virtual CPU cores to physical CPU cores.  # noqa: E501

        :return: The cpu_map of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :rtype: str
        """
        return self._cpu_map

    @cpu_map.setter
    def cpu_map(self, cpu_map: str):
        """Sets the cpu_map of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        Shows the association of virtual CPU cores to physical CPU cores.  # noqa: E501

        :param cpu_map: The cpu_map of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :type cpu_map: str
        """
        if cpu_map is None:
            raise ValueError("Invalid value for `cpu_map`, must not be `None`")  # noqa: E501

        self._cpu_map = cpu_map

    @property
    def cpu_pinning_policy(self) -> str:
        """Gets the cpu_pinning_policy of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.  # noqa: E501

        :return: The cpu_pinning_policy of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :rtype: str
        """
        return self._cpu_pinning_policy

    @cpu_pinning_policy.setter
    def cpu_pinning_policy(self, cpu_pinning_policy: str):
        """Sets the cpu_pinning_policy of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.  # noqa: E501

        :param cpu_pinning_policy: The cpu_pinning_policy of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :type cpu_pinning_policy: str
        """
        if cpu_pinning_policy is None:
            raise ValueError("Invalid value for `cpu_pinning_policy`, must not be `None`")  # noqa: E501

        self._cpu_pinning_policy = cpu_pinning_policy

    @property
    def cpu_pinning_rules(self) -> str:
        """Gets the cpu_pinning_rules of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.  # noqa: E501

        :return: The cpu_pinning_rules of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :rtype: str
        """
        return self._cpu_pinning_rules

    @cpu_pinning_rules.setter
    def cpu_pinning_rules(self, cpu_pinning_rules: str):
        """Sets the cpu_pinning_rules of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.

        A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.  # noqa: E501

        :param cpu_pinning_rules: The cpu_pinning_rules of this CreateComputeResourceReservationRequestContainerFlavourVirtualCpuPinning.
        :type cpu_pinning_rules: str
        """
        if cpu_pinning_rules is None:
            raise ValueError("Invalid value for `cpu_pinning_rules`, must not be `None`")  # noqa: E501

        self._cpu_pinning_rules = cpu_pinning_rules
