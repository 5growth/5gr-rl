# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.address_data import AddressData
from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.virtual_network_interface_requirements import VirtualNetworkInterfaceRequirements


class AppExternalCpd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cpd_id: str=None, layer_protocol: str=None, cp_role: str=None, description: str=None, address_data: List[AddressData]=None, virtual_network_interface_requirements: List[VirtualNetworkInterfaceRequirements]=None):  # noqa: E501
        """AppExternalCpd - a model defined in Swagger

        :param cpd_id: The cpd_id of this AppExternalCpd.  # noqa: E501
        :type cpd_id: str
        :param layer_protocol: The layer_protocol of this AppExternalCpd.  # noqa: E501
        :type layer_protocol: str
        :param cp_role: The cp_role of this AppExternalCpd.  # noqa: E501
        :type cp_role: str
        :param description: The description of this AppExternalCpd.  # noqa: E501
        :type description: str
        :param address_data: The address_data of this AppExternalCpd.  # noqa: E501
        :type address_data: List[AddressData]
        :param virtual_network_interface_requirements: The virtual_network_interface_requirements of this AppExternalCpd.  # noqa: E501
        :type virtual_network_interface_requirements: List[VirtualNetworkInterfaceRequirements]
        """
        self.swagger_types = {
            'cpd_id': str,
            'layer_protocol': str,
            'cp_role': str,
            'description': str,
            'address_data': List[AddressData],
            'virtual_network_interface_requirements': List[VirtualNetworkInterfaceRequirements]
        }

        self.attribute_map = {
            'cpd_id': 'cpdId',
            'layer_protocol': 'layerProtocol',
            'cp_role': 'cpRole',
            'description': 'description',
            'address_data': 'addressData',
            'virtual_network_interface_requirements': 'virtualNetworkInterfaceRequirements'
        }

        self._cpd_id = cpd_id
        self._layer_protocol = layer_protocol
        self._cp_role = cp_role
        self._description = description
        self._address_data = address_data
        self._virtual_network_interface_requirements = virtual_network_interface_requirements

    @classmethod
    def from_dict(cls, dikt) -> 'AppExternalCpd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppExternalCpd of this AppExternalCpd.  # noqa: E501
        :rtype: AppExternalCpd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpd_id(self) -> str:
        """Gets the cpd_id of this AppExternalCpd.

        Identifier of this cpd information element.  # noqa: E501

        :return: The cpd_id of this AppExternalCpd.
        :rtype: str
        """
        return self._cpd_id

    @cpd_id.setter
    def cpd_id(self, cpd_id: str):
        """Sets the cpd_id of this AppExternalCpd.

        Identifier of this cpd information element.  # noqa: E501

        :param cpd_id: The cpd_id of this AppExternalCpd.
        :type cpd_id: str
        """
        if cpd_id is None:
            raise ValueError("Invalid value for `cpd_id`, must not be `None`")  # noqa: E501

        self._cpd_id = cpd_id

    @property
    def layer_protocol(self) -> str:
        """Gets the layer_protocol of this AppExternalCpd.

        Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).  # noqa: E501

        :return: The layer_protocol of this AppExternalCpd.
        :rtype: str
        """
        return self._layer_protocol

    @layer_protocol.setter
    def layer_protocol(self, layer_protocol: str):
        """Sets the layer_protocol of this AppExternalCpd.

        Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).  # noqa: E501

        :param layer_protocol: The layer_protocol of this AppExternalCpd.
        :type layer_protocol: str
        """
        allowed_values = ["Ethernet", "MPLS", "ODU2", "IPV4", "IPV6", "Pseudo-Wire"]  # noqa: E501
        if layer_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `layer_protocol` ({0}), must be one of {1}"
                .format(layer_protocol, allowed_values)
            )

        self._layer_protocol = layer_protocol

    @property
    def cp_role(self) -> str:
        """Gets the cp_role of this AppExternalCpd.

        Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.  # noqa: E501

        :return: The cp_role of this AppExternalCpd.
        :rtype: str
        """
        return self._cp_role

    @cp_role.setter
    def cp_role(self, cp_role: str):
        """Sets the cp_role of this AppExternalCpd.

        Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.  # noqa: E501

        :param cp_role: The cp_role of this AppExternalCpd.
        :type cp_role: str
        """

        self._cp_role = cp_role

    @property
    def description(self) -> str:
        """Gets the description of this AppExternalCpd.

        Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).  # noqa: E501

        :return: The description of this AppExternalCpd.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this AppExternalCpd.

        Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).  # noqa: E501

        :param description: The description of this AppExternalCpd.
        :type description: str
        """

        self._description = description

    @property
    def address_data(self) -> List[AddressData]:
        """Gets the address_data of this AppExternalCpd.

        Provides information on the addresses to be assigned to the CP(s) instantiated from this CPD.  # noqa: E501

        :return: The address_data of this AppExternalCpd.
        :rtype: List[AddressData]
        """
        return self._address_data

    @address_data.setter
    def address_data(self, address_data: List[AddressData]):
        """Sets the address_data of this AppExternalCpd.

        Provides information on the addresses to be assigned to the CP(s) instantiated from this CPD.  # noqa: E501

        :param address_data: The address_data of this AppExternalCpd.
        :type address_data: List[AddressData]
        """

        self._address_data = address_data

    @property
    def virtual_network_interface_requirements(self) -> List[VirtualNetworkInterfaceRequirements]:
        """Gets the virtual_network_interface_requirements of this AppExternalCpd.

        Specifies requirements on a virtual network interface realizing the CPs instantiated from this CPD.  # noqa: E501

        :return: The virtual_network_interface_requirements of this AppExternalCpd.
        :rtype: List[VirtualNetworkInterfaceRequirements]
        """
        return self._virtual_network_interface_requirements

    @virtual_network_interface_requirements.setter
    def virtual_network_interface_requirements(self, virtual_network_interface_requirements: List[VirtualNetworkInterfaceRequirements]):
        """Sets the virtual_network_interface_requirements of this AppExternalCpd.

        Specifies requirements on a virtual network interface realizing the CPs instantiated from this CPD.  # noqa: E501

        :param virtual_network_interface_requirements: The virtual_network_interface_requirements of this AppExternalCpd.
        :type virtual_network_interface_requirements: List[VirtualNetworkInterfaceRequirements]
        """

        self._virtual_network_interface_requirements = virtual_network_interface_requirements
