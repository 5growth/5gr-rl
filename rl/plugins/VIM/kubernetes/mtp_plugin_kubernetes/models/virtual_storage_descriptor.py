# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class VirtualStorageDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type_of_storage: str=None, size_of_storage: float=None, rdma_enabled: bool=None, sw_image_desc: str=None):  # noqa: E501
        """VirtualStorageDescriptor - a model defined in Swagger

        :param id: The id of this VirtualStorageDescriptor.  # noqa: E501
        :type id: str
        :param type_of_storage: The type_of_storage of this VirtualStorageDescriptor.  # noqa: E501
        :type type_of_storage: str
        :param size_of_storage: The size_of_storage of this VirtualStorageDescriptor.  # noqa: E501
        :type size_of_storage: float
        :param rdma_enabled: The rdma_enabled of this VirtualStorageDescriptor.  # noqa: E501
        :type rdma_enabled: bool
        :param sw_image_desc: The sw_image_desc of this VirtualStorageDescriptor.  # noqa: E501
        :type sw_image_desc: str
        """
        self.swagger_types = {
            'id': str,
            'type_of_storage': str,
            'size_of_storage': float,
            'rdma_enabled': bool,
            'sw_image_desc': str
        }

        self.attribute_map = {
            'id': 'id',
            'type_of_storage': 'typeOfStorage',
            'size_of_storage': 'sizeOfStorage',
            'rdma_enabled': 'rdmaEnabled',
            'sw_image_desc': 'swImageDesc'
        }

        self._id = id
        self._type_of_storage = type_of_storage
        self._size_of_storage = size_of_storage
        self._rdma_enabled = rdma_enabled
        self._sw_image_desc = sw_image_desc

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualStorageDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualStorageDescriptor of this VirtualStorageDescriptor.  # noqa: E501
        :rtype: VirtualStorageDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VirtualStorageDescriptor.

        The identifier of this virtual storage descriptor in the appD.  # noqa: E501

        :return: The id of this VirtualStorageDescriptor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VirtualStorageDescriptor.

        The identifier of this virtual storage descriptor in the appD.  # noqa: E501

        :param id: The id of this VirtualStorageDescriptor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type_of_storage(self) -> str:
        """Gets the type_of_storage of this VirtualStorageDescriptor.

        Type of virtualised storage resource (e.g. volume, object).  # noqa: E501

        :return: The type_of_storage of this VirtualStorageDescriptor.
        :rtype: str
        """
        return self._type_of_storage

    @type_of_storage.setter
    def type_of_storage(self, type_of_storage: str):
        """Sets the type_of_storage of this VirtualStorageDescriptor.

        Type of virtualised storage resource (e.g. volume, object).  # noqa: E501

        :param type_of_storage: The type_of_storage of this VirtualStorageDescriptor.
        :type type_of_storage: str
        """
        if type_of_storage is None:
            raise ValueError("Invalid value for `type_of_storage`, must not be `None`")  # noqa: E501

        self._type_of_storage = type_of_storage

    @property
    def size_of_storage(self) -> float:
        """Gets the size_of_storage of this VirtualStorageDescriptor.

        Size of virtualised storage resource (e.g. size of volume, in GB).  # noqa: E501

        :return: The size_of_storage of this VirtualStorageDescriptor.
        :rtype: float
        """
        return self._size_of_storage

    @size_of_storage.setter
    def size_of_storage(self, size_of_storage: float):
        """Sets the size_of_storage of this VirtualStorageDescriptor.

        Size of virtualised storage resource (e.g. size of volume, in GB).  # noqa: E501

        :param size_of_storage: The size_of_storage of this VirtualStorageDescriptor.
        :type size_of_storage: float
        """
        if size_of_storage is None:
            raise ValueError("Invalid value for `size_of_storage`, must not be `None`")  # noqa: E501

        self._size_of_storage = size_of_storage

    @property
    def rdma_enabled(self) -> bool:
        """Gets the rdma_enabled of this VirtualStorageDescriptor.

        Indicate if the storage supports RDMA.  # noqa: E501

        :return: The rdma_enabled of this VirtualStorageDescriptor.
        :rtype: bool
        """
        return self._rdma_enabled

    @rdma_enabled.setter
    def rdma_enabled(self, rdma_enabled: bool):
        """Sets the rdma_enabled of this VirtualStorageDescriptor.

        Indicate if the storage supports RDMA.  # noqa: E501

        :param rdma_enabled: The rdma_enabled of this VirtualStorageDescriptor.
        :type rdma_enabled: bool
        """

        self._rdma_enabled = rdma_enabled

    @property
    def sw_image_desc(self) -> str:
        """Gets the sw_image_desc of this VirtualStorageDescriptor.

        Software image to be loaded on the VirtualStorage Resource created based on this VirtualStorageDescriptor identifier.  # noqa: E501

        :return: The sw_image_desc of this VirtualStorageDescriptor.
        :rtype: str
        """
        return self._sw_image_desc

    @sw_image_desc.setter
    def sw_image_desc(self, sw_image_desc: str):
        """Sets the sw_image_desc of this VirtualStorageDescriptor.

        Software image to be loaded on the VirtualStorage Resource created based on this VirtualStorageDescriptor identifier.  # noqa: E501

        :param sw_image_desc: The sw_image_desc of this VirtualStorageDescriptor.
        :type sw_image_desc: str
        """

        self._sw_image_desc = sw_image_desc
