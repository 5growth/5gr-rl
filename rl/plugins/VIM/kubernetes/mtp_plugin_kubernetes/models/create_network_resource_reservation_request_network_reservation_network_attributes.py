# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.meta_data_inner import MetaDataInner


class CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: float=None, is_shared: bool=None, metadata: List[MetaDataInner]=None, network_type: str=None, segment_type: str=None):  # noqa: E501
        """CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes - a model defined in Swagger

        :param bandwidth: The bandwidth of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :type bandwidth: float
        :param is_shared: The is_shared of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :type is_shared: bool
        :param metadata: The metadata of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :type metadata: List[MetaDataInner]
        :param network_type: The network_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :type network_type: str
        :param segment_type: The segment_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :type segment_type: str
        """
        self.swagger_types = {
            'bandwidth': float,
            'is_shared': bool,
            'metadata': List[MetaDataInner],
            'network_type': str,
            'segment_type': str
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'is_shared': 'isShared',
            'metadata': 'metadata',
            'network_type': 'networkType',
            'segment_type': 'segmentType'
        }

        self._bandwidth = bandwidth
        self._is_shared = is_shared
        self._metadata = metadata
        self._network_type = network_type
        self._segment_type = segment_type

    @classmethod
    def from_dict(cls, dikt) -> 'CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateNetworkResourceReservationRequest_networkReservation_networkAttributes of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.  # noqa: E501
        :rtype: CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        Minimum network bitrate (in Mbps).  # noqa: E501

        :return: The bandwidth of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        Minimum network bitrate (in Mbps).  # noqa: E501

        :param bandwidth: The bandwidth of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def is_shared(self) -> bool:
        """Gets the is_shared of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        It defines whether the virtualised network to be reserved is shared among consumers.  # noqa: E501

        :return: The is_shared of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared: bool):
        """Sets the is_shared of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        It defines whether the virtualised network to be reserved is shared among consumers.  # noqa: E501

        :param is_shared: The is_shared of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :type is_shared: bool
        """
        if is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")  # noqa: E501

        self._is_shared = is_shared

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :return: The metadata of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.  # noqa: E501

        :param metadata: The metadata of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :type metadata: List[MetaDataInner]
        """

        self._metadata = metadata

    @property
    def network_type(self) -> str:
        """Gets the network_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        The type of network that maps to the virtualised network to be reserved. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.  # noqa: E501

        :return: The network_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type: str):
        """Sets the network_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        The type of network that maps to the virtualised network to be reserved. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.  # noqa: E501

        :param network_type: The network_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :type network_type: str
        """
        if network_type is None:
            raise ValueError("Invalid value for `network_type`, must not be `None`")  # noqa: E501

        self._network_type = network_type

    @property
    def segment_type(self) -> str:
        """Gets the segment_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        The isolated segment for the virtualised network to be reserved. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key.  # noqa: E501

        :return: The segment_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type: str):
        """Sets the segment_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.

        The isolated segment for the virtualised network to be reserved. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key.  # noqa: E501

        :param segment_type: The segment_type of this CreateNetworkResourceReservationRequestNetworkReservationNetworkAttributes.
        :type segment_type: str
        """
        if segment_type is None:
            raise ValueError("Invalid value for `segment_type`, must not be `None`")  # noqa: E501

        self._segment_type = segment_type
