# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.app_external_cpd import AppExternalCpd
from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.change_app_instance_state_op_config import ChangeAppInstanceStateOpConfig
from mtp_plugin_kubernetes.models.dns_rule_descriptor import DNSRuleDescriptor
from mtp_plugin_kubernetes.models.latency_descriptor import LatencyDescriptor
from mtp_plugin_kubernetes.models.service_dependency import ServiceDependency
from mtp_plugin_kubernetes.models.sw_image_descriptor import SwImageDescriptor
from mtp_plugin_kubernetes.models.terminate_app_instance_op_config import TerminateAppInstanceOpConfig
from mtp_plugin_kubernetes.models.traffic_rule_descriptor import TrafficRuleDescriptor
from mtp_plugin_kubernetes.models.transport_dependency import TransportDependency
from mtp_plugin_kubernetes.models.virtual_compute_description import VirtualComputeDescription
from mtp_plugin_kubernetes.models.virtual_storage_descriptor import VirtualStorageDescriptor


class AppD(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, app_d_id: str=None, app_name: str=None, app_provider: str=None, app_soft_version: str=None, app_d_version: str=None, mec_version: List[str]=None, app_info_name: str=None, app_description: str=None, virtual_compute_descriptor: VirtualComputeDescription=None, sw_image_descriptor: List[SwImageDescriptor]=None, virtual_storage_descriptor: List[VirtualStorageDescriptor]=None, app_ext_cpd: List[AppExternalCpd]=None, app_service_required: List[ServiceDependency]=None, app_service_optional: List[ServiceDependency]=None, transport_dependencies: List[TransportDependency]=None, app_traffic_rule: List[TrafficRuleDescriptor]=None, app_dns_rule: List[DNSRuleDescriptor]=None, app_latency: LatencyDescriptor=None, terminate_app_instance_op_config: TerminateAppInstanceOpConfig=None, change_app_instance_state_op_config: ChangeAppInstanceStateOpConfig=None):  # noqa: E501
        """AppD - a model defined in Swagger

        :param app_d_id: The app_d_id of this AppD.  # noqa: E501
        :type app_d_id: str
        :param app_name: The app_name of this AppD.  # noqa: E501
        :type app_name: str
        :param app_provider: The app_provider of this AppD.  # noqa: E501
        :type app_provider: str
        :param app_soft_version: The app_soft_version of this AppD.  # noqa: E501
        :type app_soft_version: str
        :param app_d_version: The app_d_version of this AppD.  # noqa: E501
        :type app_d_version: str
        :param mec_version: The mec_version of this AppD.  # noqa: E501
        :type mec_version: List[str]
        :param app_info_name: The app_info_name of this AppD.  # noqa: E501
        :type app_info_name: str
        :param app_description: The app_description of this AppD.  # noqa: E501
        :type app_description: str
        :param virtual_compute_descriptor: The virtual_compute_descriptor of this AppD.  # noqa: E501
        :type virtual_compute_descriptor: VirtualComputeDescription
        :param sw_image_descriptor: The sw_image_descriptor of this AppD.  # noqa: E501
        :type sw_image_descriptor: List[SwImageDescriptor]
        :param virtual_storage_descriptor: The virtual_storage_descriptor of this AppD.  # noqa: E501
        :type virtual_storage_descriptor: List[VirtualStorageDescriptor]
        :param app_ext_cpd: The app_ext_cpd of this AppD.  # noqa: E501
        :type app_ext_cpd: List[AppExternalCpd]
        :param app_service_required: The app_service_required of this AppD.  # noqa: E501
        :type app_service_required: List[ServiceDependency]
        :param app_service_optional: The app_service_optional of this AppD.  # noqa: E501
        :type app_service_optional: List[ServiceDependency]
        :param transport_dependencies: The transport_dependencies of this AppD.  # noqa: E501
        :type transport_dependencies: List[TransportDependency]
        :param app_traffic_rule: The app_traffic_rule of this AppD.  # noqa: E501
        :type app_traffic_rule: List[TrafficRuleDescriptor]
        :param app_dns_rule: The app_dns_rule of this AppD.  # noqa: E501
        :type app_dns_rule: List[DNSRuleDescriptor]
        :param app_latency: The app_latency of this AppD.  # noqa: E501
        :type app_latency: LatencyDescriptor
        :param terminate_app_instance_op_config: The terminate_app_instance_op_config of this AppD.  # noqa: E501
        :type terminate_app_instance_op_config: TerminateAppInstanceOpConfig
        :param change_app_instance_state_op_config: The change_app_instance_state_op_config of this AppD.  # noqa: E501
        :type change_app_instance_state_op_config: ChangeAppInstanceStateOpConfig
        """
        self.swagger_types = {
            'app_d_id': str,
            'app_name': str,
            'app_provider': str,
            'app_soft_version': str,
            'app_d_version': str,
            'mec_version': List[str],
            'app_info_name': str,
            'app_description': str,
            'virtual_compute_descriptor': VirtualComputeDescription,
            'sw_image_descriptor': List[SwImageDescriptor],
            'virtual_storage_descriptor': List[VirtualStorageDescriptor],
            'app_ext_cpd': List[AppExternalCpd],
            'app_service_required': List[ServiceDependency],
            'app_service_optional': List[ServiceDependency],
            'transport_dependencies': List[TransportDependency],
            'app_traffic_rule': List[TrafficRuleDescriptor],
            'app_dns_rule': List[DNSRuleDescriptor],
            'app_latency': LatencyDescriptor,
            'terminate_app_instance_op_config': TerminateAppInstanceOpConfig,
            'change_app_instance_state_op_config': ChangeAppInstanceStateOpConfig
        }

        self.attribute_map = {
            'app_d_id': 'appDId',
            'app_name': 'appName',
            'app_provider': 'appProvider',
            'app_soft_version': 'appSoftVersion',
            'app_d_version': 'appDVersion',
            'mec_version': 'mecVersion',
            'app_info_name': 'appInfoName',
            'app_description': 'appDescription',
            'virtual_compute_descriptor': 'virtualComputeDescriptor',
            'sw_image_descriptor': 'swImageDescriptor',
            'virtual_storage_descriptor': 'virtualStorageDescriptor',
            'app_ext_cpd': 'appExtCpd',
            'app_service_required': 'appServiceRequired',
            'app_service_optional': 'appServiceOptional',
            'transport_dependencies': 'transportDependencies',
            'app_traffic_rule': 'appTrafficRule',
            'app_dns_rule': 'appDNSRule',
            'app_latency': 'appLatency',
            'terminate_app_instance_op_config': 'terminateAppInstanceOpConfig',
            'change_app_instance_state_op_config': 'changeAppInstanceStateOpConfig'
        }

        self._app_d_id = app_d_id
        self._app_name = app_name
        self._app_provider = app_provider
        self._app_soft_version = app_soft_version
        self._app_d_version = app_d_version
        self._mec_version = mec_version
        self._app_info_name = app_info_name
        self._app_description = app_description
        self._virtual_compute_descriptor = virtual_compute_descriptor
        self._sw_image_descriptor = sw_image_descriptor
        self._virtual_storage_descriptor = virtual_storage_descriptor
        self._app_ext_cpd = app_ext_cpd
        self._app_service_required = app_service_required
        self._app_service_optional = app_service_optional
        self._transport_dependencies = transport_dependencies
        self._app_traffic_rule = app_traffic_rule
        self._app_dns_rule = app_dns_rule
        self._app_latency = app_latency
        self._terminate_app_instance_op_config = terminate_app_instance_op_config
        self._change_app_instance_state_op_config = change_app_instance_state_op_config

    @classmethod
    def from_dict(cls, dikt) -> 'AppD':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppD of this AppD.  # noqa: E501
        :rtype: AppD
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_d_id(self) -> str:
        """Gets the app_d_id of this AppD.

        Identifier of this mobile edge application descriptor. This attribute shall be globally unique.  # noqa: E501

        :return: The app_d_id of this AppD.
        :rtype: str
        """
        return self._app_d_id

    @app_d_id.setter
    def app_d_id(self, app_d_id: str):
        """Sets the app_d_id of this AppD.

        Identifier of this mobile edge application descriptor. This attribute shall be globally unique.  # noqa: E501

        :param app_d_id: The app_d_id of this AppD.
        :type app_d_id: str
        """
        if app_d_id is None:
            raise ValueError("Invalid value for `app_d_id`, must not be `None`")  # noqa: E501

        self._app_d_id = app_d_id

    @property
    def app_name(self) -> str:
        """Gets the app_name of this AppD.

        Name to identify the mobile edge application.  # noqa: E501

        :return: The app_name of this AppD.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name: str):
        """Sets the app_name of this AppD.

        Name to identify the mobile edge application.  # noqa: E501

        :param app_name: The app_name of this AppD.
        :type app_name: str
        """

        self._app_name = app_name

    @property
    def app_provider(self) -> str:
        """Gets the app_provider of this AppD.

        Provider of the application and of the AppD.  # noqa: E501

        :return: The app_provider of this AppD.
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider: str):
        """Sets the app_provider of this AppD.

        Provider of the application and of the AppD.  # noqa: E501

        :param app_provider: The app_provider of this AppD.
        :type app_provider: str
        """

        self._app_provider = app_provider

    @property
    def app_soft_version(self) -> str:
        """Gets the app_soft_version of this AppD.

        AvailableIdentifies the version of software of the mobile edge application.  # noqa: E501

        :return: The app_soft_version of this AppD.
        :rtype: str
        """
        return self._app_soft_version

    @app_soft_version.setter
    def app_soft_version(self, app_soft_version: str):
        """Sets the app_soft_version of this AppD.

        AvailableIdentifies the version of software of the mobile edge application.  # noqa: E501

        :param app_soft_version: The app_soft_version of this AppD.
        :type app_soft_version: str
        """

        self._app_soft_version = app_soft_version

    @property
    def app_d_version(self) -> str:
        """Gets the app_d_version of this AppD.

        Identifies the version of the application descriptor.  # noqa: E501

        :return: The app_d_version of this AppD.
        :rtype: str
        """
        return self._app_d_version

    @app_d_version.setter
    def app_d_version(self, app_d_version: str):
        """Sets the app_d_version of this AppD.

        Identifies the version of the application descriptor.  # noqa: E501

        :param app_d_version: The app_d_version of this AppD.
        :type app_d_version: str
        """

        self._app_d_version = app_d_version

    @property
    def mec_version(self) -> List[str]:
        """Gets the mec_version of this AppD.

        Identifies version(s) of ME system compatible with the mobile edge application described in this version of the AppD.  # noqa: E501

        :return: The mec_version of this AppD.
        :rtype: List[str]
        """
        return self._mec_version

    @mec_version.setter
    def mec_version(self, mec_version: List[str]):
        """Sets the mec_version of this AppD.

        Identifies version(s) of ME system compatible with the mobile edge application described in this version of the AppD.  # noqa: E501

        :param mec_version: The mec_version of this AppD.
        :type mec_version: List[str]
        """

        self._mec_version = mec_version

    @property
    def app_info_name(self) -> str:
        """Gets the app_info_name of this AppD.

        Human readable name for the ME application product. May change during the ME application product lifetime.  # noqa: E501

        :return: The app_info_name of this AppD.
        :rtype: str
        """
        return self._app_info_name

    @app_info_name.setter
    def app_info_name(self, app_info_name: str):
        """Sets the app_info_name of this AppD.

        Human readable name for the ME application product. May change during the ME application product lifetime.  # noqa: E501

        :param app_info_name: The app_info_name of this AppD.
        :type app_info_name: str
        """

        self._app_info_name = app_info_name

    @property
    def app_description(self) -> str:
        """Gets the app_description of this AppD.

        Human readable description of the mobile edge application.  # noqa: E501

        :return: The app_description of this AppD.
        :rtype: str
        """
        return self._app_description

    @app_description.setter
    def app_description(self, app_description: str):
        """Sets the app_description of this AppD.

        Human readable description of the mobile edge application.  # noqa: E501

        :param app_description: The app_description of this AppD.
        :type app_description: str
        """

        self._app_description = app_description

    @property
    def virtual_compute_descriptor(self) -> VirtualComputeDescription:
        """Gets the virtual_compute_descriptor of this AppD.


        :return: The virtual_compute_descriptor of this AppD.
        :rtype: VirtualComputeDescription
        """
        return self._virtual_compute_descriptor

    @virtual_compute_descriptor.setter
    def virtual_compute_descriptor(self, virtual_compute_descriptor: VirtualComputeDescription):
        """Sets the virtual_compute_descriptor of this AppD.


        :param virtual_compute_descriptor: The virtual_compute_descriptor of this AppD.
        :type virtual_compute_descriptor: VirtualComputeDescription
        """

        self._virtual_compute_descriptor = virtual_compute_descriptor

    @property
    def sw_image_descriptor(self) -> List[SwImageDescriptor]:
        """Gets the sw_image_descriptor of this AppD.


        :return: The sw_image_descriptor of this AppD.
        :rtype: List[SwImageDescriptor]
        """
        return self._sw_image_descriptor

    @sw_image_descriptor.setter
    def sw_image_descriptor(self, sw_image_descriptor: List[SwImageDescriptor]):
        """Sets the sw_image_descriptor of this AppD.


        :param sw_image_descriptor: The sw_image_descriptor of this AppD.
        :type sw_image_descriptor: List[SwImageDescriptor]
        """

        self._sw_image_descriptor = sw_image_descriptor

    @property
    def virtual_storage_descriptor(self) -> List[VirtualStorageDescriptor]:
        """Gets the virtual_storage_descriptor of this AppD.


        :return: The virtual_storage_descriptor of this AppD.
        :rtype: List[VirtualStorageDescriptor]
        """
        return self._virtual_storage_descriptor

    @virtual_storage_descriptor.setter
    def virtual_storage_descriptor(self, virtual_storage_descriptor: List[VirtualStorageDescriptor]):
        """Sets the virtual_storage_descriptor of this AppD.


        :param virtual_storage_descriptor: The virtual_storage_descriptor of this AppD.
        :type virtual_storage_descriptor: List[VirtualStorageDescriptor]
        """

        self._virtual_storage_descriptor = virtual_storage_descriptor

    @property
    def app_ext_cpd(self) -> List[AppExternalCpd]:
        """Gets the app_ext_cpd of this AppD.


        :return: The app_ext_cpd of this AppD.
        :rtype: List[AppExternalCpd]
        """
        return self._app_ext_cpd

    @app_ext_cpd.setter
    def app_ext_cpd(self, app_ext_cpd: List[AppExternalCpd]):
        """Sets the app_ext_cpd of this AppD.


        :param app_ext_cpd: The app_ext_cpd of this AppD.
        :type app_ext_cpd: List[AppExternalCpd]
        """

        self._app_ext_cpd = app_ext_cpd

    @property
    def app_service_required(self) -> List[ServiceDependency]:
        """Gets the app_service_required of this AppD.

        Describes services a mobile edge application requires to run.  # noqa: E501

        :return: The app_service_required of this AppD.
        :rtype: List[ServiceDependency]
        """
        return self._app_service_required

    @app_service_required.setter
    def app_service_required(self, app_service_required: List[ServiceDependency]):
        """Sets the app_service_required of this AppD.

        Describes services a mobile edge application requires to run.  # noqa: E501

        :param app_service_required: The app_service_required of this AppD.
        :type app_service_required: List[ServiceDependency]
        """

        self._app_service_required = app_service_required

    @property
    def app_service_optional(self) -> List[ServiceDependency]:
        """Gets the app_service_optional of this AppD.

        Describes services a mobile edge application may use if available.  # noqa: E501

        :return: The app_service_optional of this AppD.
        :rtype: List[ServiceDependency]
        """
        return self._app_service_optional

    @app_service_optional.setter
    def app_service_optional(self, app_service_optional: List[ServiceDependency]):
        """Sets the app_service_optional of this AppD.

        Describes services a mobile edge application may use if available.  # noqa: E501

        :param app_service_optional: The app_service_optional of this AppD.
        :type app_service_optional: List[ServiceDependency]
        """

        self._app_service_optional = app_service_optional

    @property
    def transport_dependencies(self) -> List[TransportDependency]:
        """Gets the transport_dependencies of this AppD.

        Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.  # noqa: E501

        :return: The transport_dependencies of this AppD.
        :rtype: List[TransportDependency]
        """
        return self._transport_dependencies

    @transport_dependencies.setter
    def transport_dependencies(self, transport_dependencies: List[TransportDependency]):
        """Sets the transport_dependencies of this AppD.

        Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.  # noqa: E501

        :param transport_dependencies: The transport_dependencies of this AppD.
        :type transport_dependencies: List[TransportDependency]
        """

        self._transport_dependencies = transport_dependencies

    @property
    def app_traffic_rule(self) -> List[TrafficRuleDescriptor]:
        """Gets the app_traffic_rule of this AppD.

        Describes traffic rules the mobile edge application requires.  # noqa: E501

        :return: The app_traffic_rule of this AppD.
        :rtype: List[TrafficRuleDescriptor]
        """
        return self._app_traffic_rule

    @app_traffic_rule.setter
    def app_traffic_rule(self, app_traffic_rule: List[TrafficRuleDescriptor]):
        """Sets the app_traffic_rule of this AppD.

        Describes traffic rules the mobile edge application requires.  # noqa: E501

        :param app_traffic_rule: The app_traffic_rule of this AppD.
        :type app_traffic_rule: List[TrafficRuleDescriptor]
        """

        self._app_traffic_rule = app_traffic_rule

    @property
    def app_dns_rule(self) -> List[DNSRuleDescriptor]:
        """Gets the app_dns_rule of this AppD.

        Describes DNS rules the mobile edge application requires.  # noqa: E501

        :return: The app_dns_rule of this AppD.
        :rtype: List[DNSRuleDescriptor]
        """
        return self._app_dns_rule

    @app_dns_rule.setter
    def app_dns_rule(self, app_dns_rule: List[DNSRuleDescriptor]):
        """Sets the app_dns_rule of this AppD.

        Describes DNS rules the mobile edge application requires.  # noqa: E501

        :param app_dns_rule: The app_dns_rule of this AppD.
        :type app_dns_rule: List[DNSRuleDescriptor]
        """

        self._app_dns_rule = app_dns_rule

    @property
    def app_latency(self) -> LatencyDescriptor:
        """Gets the app_latency of this AppD.


        :return: The app_latency of this AppD.
        :rtype: LatencyDescriptor
        """
        return self._app_latency

    @app_latency.setter
    def app_latency(self, app_latency: LatencyDescriptor):
        """Sets the app_latency of this AppD.


        :param app_latency: The app_latency of this AppD.
        :type app_latency: LatencyDescriptor
        """

        self._app_latency = app_latency

    @property
    def terminate_app_instance_op_config(self) -> TerminateAppInstanceOpConfig:
        """Gets the terminate_app_instance_op_config of this AppD.


        :return: The terminate_app_instance_op_config of this AppD.
        :rtype: TerminateAppInstanceOpConfig
        """
        return self._terminate_app_instance_op_config

    @terminate_app_instance_op_config.setter
    def terminate_app_instance_op_config(self, terminate_app_instance_op_config: TerminateAppInstanceOpConfig):
        """Sets the terminate_app_instance_op_config of this AppD.


        :param terminate_app_instance_op_config: The terminate_app_instance_op_config of this AppD.
        :type terminate_app_instance_op_config: TerminateAppInstanceOpConfig
        """

        self._terminate_app_instance_op_config = terminate_app_instance_op_config

    @property
    def change_app_instance_state_op_config(self) -> ChangeAppInstanceStateOpConfig:
        """Gets the change_app_instance_state_op_config of this AppD.


        :return: The change_app_instance_state_op_config of this AppD.
        :rtype: ChangeAppInstanceStateOpConfig
        """
        return self._change_app_instance_state_op_config

    @change_app_instance_state_op_config.setter
    def change_app_instance_state_op_config(self, change_app_instance_state_op_config: ChangeAppInstanceStateOpConfig):
        """Sets the change_app_instance_state_op_config of this AppD.


        :param change_app_instance_state_op_config: The change_app_instance_state_op_config of this AppD.
        :type change_app_instance_state_op_config: ChangeAppInstanceStateOpConfig
        """

        self._change_app_instance_state_op_config = change_app_instance_state_op_config
