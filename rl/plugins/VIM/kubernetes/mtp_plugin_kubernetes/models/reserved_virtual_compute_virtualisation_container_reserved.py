# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes.models.create_compute_resource_reservation_request_container_flavour_storage_attributes import CreateComputeResourceReservationRequestContainerFlavourStorageAttributes  # noqa: F401,E501
from mtp_plugin_kubernetes.models.reserved_virtual_compute_virtualisation_container_reserved_flavour_id import ReservedVirtualComputeVirtualisationContainerReservedFlavourId  # noqa: F401,E501
from mtp_plugin_kubernetes.models.reserved_virtual_compute_virtualisation_container_reserved_virtual_cpu import ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu  # noqa: F401,E501
from mtp_plugin_kubernetes.models.reserved_virtual_compute_virtualisation_container_reserved_virtual_memory import ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory  # noqa: F401,E501
from mtp_plugin_kubernetes.models.reserved_virtual_compute_virtualisation_container_reserved_virtual_network_interface import ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface  # noqa: F401,E501
from mtp_plugin_kubernetes import util


class ReservedVirtualComputeVirtualisationContainerReserved(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, acceleration_capability: str=None, container_id: str=None, flavour_id: List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]=None, virtual_cpu: ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu=None, virtual_disks: List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]=None, virtual_memory: ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory=None, virtual_network_interface: List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]=None, zone_id: str=None):  # noqa: E501
        """ReservedVirtualComputeVirtualisationContainerReserved - a model defined in Swagger

        :param acceleration_capability: The acceleration_capability of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type acceleration_capability: str
        :param container_id: The container_id of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type container_id: str
        :param flavour_id: The flavour_id of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type flavour_id: List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]
        :param virtual_cpu: The virtual_cpu of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type virtual_cpu: ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu
        :param virtual_disks: The virtual_disks of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type virtual_disks: List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]
        :param virtual_memory: The virtual_memory of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type virtual_memory: ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory
        :param virtual_network_interface: The virtual_network_interface of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type virtual_network_interface: List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]
        :param zone_id: The zone_id of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :type zone_id: str
        """
        self.swagger_types = {
            'acceleration_capability': str,
            'container_id': str,
            'flavour_id': List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId],
            'virtual_cpu': ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu,
            'virtual_disks': List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes],
            'virtual_memory': ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory,
            'virtual_network_interface': List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface],
            'zone_id': str
        }

        self.attribute_map = {
            'acceleration_capability': 'accelerationCapability',
            'container_id': 'containerId',
            'flavour_id': 'flavourId',
            'virtual_cpu': 'virtualCpu',
            'virtual_disks': 'virtualDisks',
            'virtual_memory': 'virtualMemory',
            'virtual_network_interface': 'virtualNetworkInterface',
            'zone_id': 'zoneId'
        }

        self._acceleration_capability = acceleration_capability
        self._container_id = container_id
        self._flavour_id = flavour_id
        self._virtual_cpu = virtual_cpu
        self._virtual_disks = virtual_disks
        self._virtual_memory = virtual_memory
        self._virtual_network_interface = virtual_network_interface
        self._zone_id = zone_id

    @classmethod
    def from_dict(cls, dikt) -> 'ReservedVirtualComputeVirtualisationContainerReserved':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReservedVirtualCompute_virtualisationContainerReserved of this ReservedVirtualComputeVirtualisationContainerReserved.  # noqa: E501
        :rtype: ReservedVirtualComputeVirtualisationContainerReserved
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_capability(self) -> str:
        """Gets the acceleration_capability of this ReservedVirtualComputeVirtualisationContainerReserved.

        Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.  # noqa: E501

        :return: The acceleration_capability of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: str
        """
        return self._acceleration_capability

    @acceleration_capability.setter
    def acceleration_capability(self, acceleration_capability: str):
        """Sets the acceleration_capability of this ReservedVirtualComputeVirtualisationContainerReserved.

        Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.  # noqa: E501

        :param acceleration_capability: The acceleration_capability of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type acceleration_capability: str
        """
        if acceleration_capability is None:
            raise ValueError("Invalid value for `acceleration_capability`, must not be `None`")  # noqa: E501

        self._acceleration_capability = acceleration_capability

    @property
    def container_id(self) -> str:
        """Gets the container_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        The identifier of the virtualisation container that has been reserved.  # noqa: E501

        :return: The container_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id: str):
        """Sets the container_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        The identifier of the virtualisation container that has been reserved.  # noqa: E501

        :param container_id: The container_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type container_id: str
        """
        if container_id is None:
            raise ValueError("Invalid value for `container_id`, must not be `None`")  # noqa: E501

        self._container_id = container_id

    @property
    def flavour_id(self) -> List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]:
        """Gets the flavour_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        Identifier of the given compute flavour used to reserve the virtualisation container.  # noqa: E501

        :return: The flavour_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]
        """
        return self._flavour_id

    @flavour_id.setter
    def flavour_id(self, flavour_id: List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]):
        """Sets the flavour_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        Identifier of the given compute flavour used to reserve the virtualisation container.  # noqa: E501

        :param flavour_id: The flavour_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type flavour_id: List[ReservedVirtualComputeVirtualisationContainerReservedFlavourId]
        """
        if flavour_id is None:
            raise ValueError("Invalid value for `flavour_id`, must not be `None`")  # noqa: E501

        self._flavour_id = flavour_id

    @property
    def virtual_cpu(self) -> ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu:
        """Gets the virtual_cpu of this ReservedVirtualComputeVirtualisationContainerReserved.


        :return: The virtual_cpu of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu
        """
        return self._virtual_cpu

    @virtual_cpu.setter
    def virtual_cpu(self, virtual_cpu: ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu):
        """Sets the virtual_cpu of this ReservedVirtualComputeVirtualisationContainerReserved.


        :param virtual_cpu: The virtual_cpu of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type virtual_cpu: ReservedVirtualComputeVirtualisationContainerReservedVirtualCpu
        """
        if virtual_cpu is None:
            raise ValueError("Invalid value for `virtual_cpu`, must not be `None`")  # noqa: E501

        self._virtual_cpu = virtual_cpu

    @property
    def virtual_disks(self) -> List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]:
        """Gets the virtual_disks of this ReservedVirtualComputeVirtualisationContainerReserved.

        Element with information of the virtualised storage resources attached to the reserved virtualisation container.  # noqa: E501

        :return: The virtual_disks of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]
        """
        return self._virtual_disks

    @virtual_disks.setter
    def virtual_disks(self, virtual_disks: List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]):
        """Sets the virtual_disks of this ReservedVirtualComputeVirtualisationContainerReserved.

        Element with information of the virtualised storage resources attached to the reserved virtualisation container.  # noqa: E501

        :param virtual_disks: The virtual_disks of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type virtual_disks: List[CreateComputeResourceReservationRequestContainerFlavourStorageAttributes]
        """
        if virtual_disks is None:
            raise ValueError("Invalid value for `virtual_disks`, must not be `None`")  # noqa: E501

        self._virtual_disks = virtual_disks

    @property
    def virtual_memory(self) -> ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory:
        """Gets the virtual_memory of this ReservedVirtualComputeVirtualisationContainerReserved.


        :return: The virtual_memory of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory: ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory):
        """Sets the virtual_memory of this ReservedVirtualComputeVirtualisationContainerReserved.


        :param virtual_memory: The virtual_memory of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type virtual_memory: ReservedVirtualComputeVirtualisationContainerReservedVirtualMemory
        """
        if virtual_memory is None:
            raise ValueError("Invalid value for `virtual_memory`, must not be `None`")  # noqa: E501

        self._virtual_memory = virtual_memory

    @property
    def virtual_network_interface(self) -> List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]:
        """Gets the virtual_network_interface of this ReservedVirtualComputeVirtualisationContainerReserved.

        Element with information of the virtual network interfaces of the reserved virtualisation container.  # noqa: E501

        :return: The virtual_network_interface of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]
        """
        return self._virtual_network_interface

    @virtual_network_interface.setter
    def virtual_network_interface(self, virtual_network_interface: List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]):
        """Sets the virtual_network_interface of this ReservedVirtualComputeVirtualisationContainerReserved.

        Element with information of the virtual network interfaces of the reserved virtualisation container.  # noqa: E501

        :param virtual_network_interface: The virtual_network_interface of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type virtual_network_interface: List[ReservedVirtualComputeVirtualisationContainerReservedVirtualNetworkInterface]
        """
        if virtual_network_interface is None:
            raise ValueError("Invalid value for `virtual_network_interface`, must not be `None`")  # noqa: E501

        self._virtual_network_interface = virtual_network_interface

    @property
    def zone_id(self) -> str:
        """Gets the zone_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        References the resource zone where the virtualisation container has been reserved. Cardinality can be 0 to cover the case where reserved network resources are not bound to a specific resource zone.  # noqa: E501

        :return: The zone_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: str):
        """Sets the zone_id of this ReservedVirtualComputeVirtualisationContainerReserved.

        References the resource zone where the virtualisation container has been reserved. Cardinality can be 0 to cover the case where reserved network resources are not bound to a specific resource zone.  # noqa: E501

        :param zone_id: The zone_id of this ReservedVirtualComputeVirtualisationContainerReserved.
        :type zone_id: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id
