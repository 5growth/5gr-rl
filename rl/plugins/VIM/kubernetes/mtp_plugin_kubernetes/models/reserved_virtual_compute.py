# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.reserved_virtual_compute_compute_pool_reserved import \
    ReservedVirtualComputeComputePoolReserved
from mtp_plugin_kubernetes.models.reserved_virtual_compute_virtualisation_container_reserved import \
    ReservedVirtualComputeVirtualisationContainerReserved


class ReservedVirtualCompute(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, compute_pool_reserved: ReservedVirtualComputeComputePoolReserved=None, end_time: datetime=None, expiry_time: datetime=None, reservation_id: str=None, reservation_status: str=None, start_time: datetime=None, virtualisation_container_reserved: ReservedVirtualComputeVirtualisationContainerReserved=None):  # noqa: E501
        """ReservedVirtualCompute - a model defined in Swagger

        :param compute_pool_reserved: The compute_pool_reserved of this ReservedVirtualCompute.  # noqa: E501
        :type compute_pool_reserved: ReservedVirtualComputeComputePoolReserved
        :param end_time: The end_time of this ReservedVirtualCompute.  # noqa: E501
        :type end_time: datetime
        :param expiry_time: The expiry_time of this ReservedVirtualCompute.  # noqa: E501
        :type expiry_time: datetime
        :param reservation_id: The reservation_id of this ReservedVirtualCompute.  # noqa: E501
        :type reservation_id: str
        :param reservation_status: The reservation_status of this ReservedVirtualCompute.  # noqa: E501
        :type reservation_status: str
        :param start_time: The start_time of this ReservedVirtualCompute.  # noqa: E501
        :type start_time: datetime
        :param virtualisation_container_reserved: The virtualisation_container_reserved of this ReservedVirtualCompute.  # noqa: E501
        :type virtualisation_container_reserved: ReservedVirtualComputeVirtualisationContainerReserved
        """
        self.swagger_types = {
            'compute_pool_reserved': ReservedVirtualComputeComputePoolReserved,
            'end_time': datetime,
            'expiry_time': datetime,
            'reservation_id': str,
            'reservation_status': str,
            'start_time': datetime,
            'virtualisation_container_reserved': ReservedVirtualComputeVirtualisationContainerReserved
        }

        self.attribute_map = {
            'compute_pool_reserved': 'computePoolReserved',
            'end_time': 'endTime',
            'expiry_time': 'expiryTime',
            'reservation_id': 'reservationId',
            'reservation_status': 'reservationStatus',
            'start_time': 'startTime',
            'virtualisation_container_reserved': 'virtualisationContainerReserved'
        }

        self._compute_pool_reserved = compute_pool_reserved
        self._end_time = end_time
        self._expiry_time = expiry_time
        self._reservation_id = reservation_id
        self._reservation_status = reservation_status
        self._start_time = start_time
        self._virtualisation_container_reserved = virtualisation_container_reserved

    @classmethod
    def from_dict(cls, dikt) -> 'ReservedVirtualCompute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReservedVirtualCompute of this ReservedVirtualCompute.  # noqa: E501
        :rtype: ReservedVirtualCompute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_pool_reserved(self) -> ReservedVirtualComputeComputePoolReserved:
        """Gets the compute_pool_reserved of this ReservedVirtualCompute.


        :return: The compute_pool_reserved of this ReservedVirtualCompute.
        :rtype: ReservedVirtualComputeComputePoolReserved
        """
        return self._compute_pool_reserved

    @compute_pool_reserved.setter
    def compute_pool_reserved(self, compute_pool_reserved: ReservedVirtualComputeComputePoolReserved):
        """Sets the compute_pool_reserved of this ReservedVirtualCompute.


        :param compute_pool_reserved: The compute_pool_reserved of this ReservedVirtualCompute.
        :type compute_pool_reserved: ReservedVirtualComputeComputePoolReserved
        """
        if compute_pool_reserved is None:
            raise ValueError("Invalid value for `compute_pool_reserved`, must not be `None`")  # noqa: E501

        self._compute_pool_reserved = compute_pool_reserved

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this ReservedVirtualCompute.

        Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.  # noqa: E501

        :return: The end_time of this ReservedVirtualCompute.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this ReservedVirtualCompute.

        Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.  # noqa: E501

        :param end_time: The end_time of this ReservedVirtualCompute.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def expiry_time(self) -> datetime:
        """Gets the expiry_time of this ReservedVirtualCompute.

        Indication when the VIM can release the reservation in case no allocation request against this reservation was made.  # noqa: E501

        :return: The expiry_time of this ReservedVirtualCompute.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time: datetime):
        """Sets the expiry_time of this ReservedVirtualCompute.

        Indication when the VIM can release the reservation in case no allocation request against this reservation was made.  # noqa: E501

        :param expiry_time: The expiry_time of this ReservedVirtualCompute.
        :type expiry_time: datetime
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")  # noqa: E501

        self._expiry_time = expiry_time

    @property
    def reservation_id(self) -> str:
        """Gets the reservation_id of this ReservedVirtualCompute.

        Identifier of the resource reservation.  # noqa: E501

        :return: The reservation_id of this ReservedVirtualCompute.
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id: str):
        """Sets the reservation_id of this ReservedVirtualCompute.

        Identifier of the resource reservation.  # noqa: E501

        :param reservation_id: The reservation_id of this ReservedVirtualCompute.
        :type reservation_id: str
        """
        if reservation_id is None:
            raise ValueError("Invalid value for `reservation_id`, must not be `None`")  # noqa: E501

        self._reservation_id = reservation_id

    @property
    def reservation_status(self) -> str:
        """Gets the reservation_status of this ReservedVirtualCompute.

        Status of the compute resource reservation, e.g. to indicate if a reservation is being used.  # noqa: E501

        :return: The reservation_status of this ReservedVirtualCompute.
        :rtype: str
        """
        return self._reservation_status

    @reservation_status.setter
    def reservation_status(self, reservation_status: str):
        """Sets the reservation_status of this ReservedVirtualCompute.

        Status of the compute resource reservation, e.g. to indicate if a reservation is being used.  # noqa: E501

        :param reservation_status: The reservation_status of this ReservedVirtualCompute.
        :type reservation_status: str
        """
        if reservation_status is None:
            raise ValueError("Invalid value for `reservation_status`, must not be `None`")  # noqa: E501

        self._reservation_status = reservation_status

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this ReservedVirtualCompute.

        Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.  # noqa: E501

        :return: The start_time of this ReservedVirtualCompute.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this ReservedVirtualCompute.

        Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.  # noqa: E501

        :param start_time: The start_time of this ReservedVirtualCompute.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def virtualisation_container_reserved(self) -> ReservedVirtualComputeVirtualisationContainerReserved:
        """Gets the virtualisation_container_reserved of this ReservedVirtualCompute.


        :return: The virtualisation_container_reserved of this ReservedVirtualCompute.
        :rtype: ReservedVirtualComputeVirtualisationContainerReserved
        """
        return self._virtualisation_container_reserved

    @virtualisation_container_reserved.setter
    def virtualisation_container_reserved(self, virtualisation_container_reserved: ReservedVirtualComputeVirtualisationContainerReserved):
        """Sets the virtualisation_container_reserved of this ReservedVirtualCompute.


        :param virtualisation_container_reserved: The virtualisation_container_reserved of this ReservedVirtualCompute.
        :type virtualisation_container_reserved: ReservedVirtualComputeVirtualisationContainerReserved
        """
        if virtualisation_container_reserved is None:
            raise ValueError("Invalid value for `virtualisation_container_reserved`, must not be `None`")  # noqa: E501

        self._virtualisation_container_reserved = virtualisation_container_reserved
