# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes.models.query_compute_capacity_request_time_period import QueryComputeCapacityRequestTimePeriod  # noqa: F401,E501
from mtp_plugin_kubernetes import util


class QueryComputeCapacityRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attribute_selector: str=None, compute_resource_type_id: str=None, resource_criteria: str=None, time_period: QueryComputeCapacityRequestTimePeriod=None, zone_id: str=None):  # noqa: E501
        """QueryComputeCapacityRequest - a model defined in Swagger

        :param attribute_selector: The attribute_selector of this QueryComputeCapacityRequest.  # noqa: E501
        :type attribute_selector: str
        :param compute_resource_type_id: The compute_resource_type_id of this QueryComputeCapacityRequest.  # noqa: E501
        :type compute_resource_type_id: str
        :param resource_criteria: The resource_criteria of this QueryComputeCapacityRequest.  # noqa: E501
        :type resource_criteria: str
        :param time_period: The time_period of this QueryComputeCapacityRequest.  # noqa: E501
        :type time_period: QueryComputeCapacityRequestTimePeriod
        :param zone_id: The zone_id of this QueryComputeCapacityRequest.  # noqa: E501
        :type zone_id: str
        """
        self.swagger_types = {
            'attribute_selector': str,
            'compute_resource_type_id': str,
            'resource_criteria': str,
            'time_period': QueryComputeCapacityRequestTimePeriod,
            'zone_id': str
        }

        self.attribute_map = {
            'attribute_selector': 'attributeSelector',
            'compute_resource_type_id': 'computeResourceTypeId',
            'resource_criteria': 'resourceCriteria',
            'time_period': 'timePeriod',
            'zone_id': 'zoneId'
        }

        self._attribute_selector = attribute_selector
        self._compute_resource_type_id = compute_resource_type_id
        self._resource_criteria = resource_criteria
        self._time_period = time_period
        self._zone_id = zone_id

    @classmethod
    def from_dict(cls, dikt) -> 'QueryComputeCapacityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryComputeCapacityRequest of this QueryComputeCapacityRequest.  # noqa: E501
        :rtype: QueryComputeCapacityRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_selector(self) -> str:
        """Gets the attribute_selector of this QueryComputeCapacityRequest.

        Input parameter for selecting which capacity information (i.e. available, total, reserved and/or allocated capacity) is queried. When not present, all four values are requested.  # noqa: E501

        :return: The attribute_selector of this QueryComputeCapacityRequest.
        :rtype: str
        """
        return self._attribute_selector

    @attribute_selector.setter
    def attribute_selector(self, attribute_selector: str):
        """Sets the attribute_selector of this QueryComputeCapacityRequest.

        Input parameter for selecting which capacity information (i.e. available, total, reserved and/or allocated capacity) is queried. When not present, all four values are requested.  # noqa: E501

        :param attribute_selector: The attribute_selector of this QueryComputeCapacityRequest.
        :type attribute_selector: str
        """
        if attribute_selector is None:
            raise ValueError("Invalid value for `attribute_selector`, must not be `None`")  # noqa: E501

        self._attribute_selector = attribute_selector

    @property
    def compute_resource_type_id(self) -> str:
        """Gets the compute_resource_type_id of this QueryComputeCapacityRequest.

        Identifier of the resource type for which the issuer wants to know the available, total, reserved and/or allocated capacity.  # noqa: E501

        :return: The compute_resource_type_id of this QueryComputeCapacityRequest.
        :rtype: str
        """
        return self._compute_resource_type_id

    @compute_resource_type_id.setter
    def compute_resource_type_id(self, compute_resource_type_id: str):
        """Sets the compute_resource_type_id of this QueryComputeCapacityRequest.

        Identifier of the resource type for which the issuer wants to know the available, total, reserved and/or allocated capacity.  # noqa: E501

        :param compute_resource_type_id: The compute_resource_type_id of this QueryComputeCapacityRequest.
        :type compute_resource_type_id: str
        """
        if compute_resource_type_id is None:
            raise ValueError("Invalid value for `compute_resource_type_id`, must not be `None`")  # noqa: E501

        self._compute_resource_type_id = compute_resource_type_id

    @property
    def resource_criteria(self) -> str:
        """Gets the resource_criteria of this QueryComputeCapacityRequest.

        Input capacity computation parameter for selecting the virtual memory, virtual CPU and acceleration capabilities for which the issuer wants to know the available, total, reserved and/or allocated capacity. Selecting parameters/attributes that shall be used are defined in the VirtualComputeResourceInformation, VirtualCpuResourceInformation, and VirtualMemoryResourceInformation information elements. This information element and the computeResourceTypeId are mutually exclusive.  # noqa: E501

        :return: The resource_criteria of this QueryComputeCapacityRequest.
        :rtype: str
        """
        return self._resource_criteria

    @resource_criteria.setter
    def resource_criteria(self, resource_criteria: str):
        """Sets the resource_criteria of this QueryComputeCapacityRequest.

        Input capacity computation parameter for selecting the virtual memory, virtual CPU and acceleration capabilities for which the issuer wants to know the available, total, reserved and/or allocated capacity. Selecting parameters/attributes that shall be used are defined in the VirtualComputeResourceInformation, VirtualCpuResourceInformation, and VirtualMemoryResourceInformation information elements. This information element and the computeResourceTypeId are mutually exclusive.  # noqa: E501

        :param resource_criteria: The resource_criteria of this QueryComputeCapacityRequest.
        :type resource_criteria: str
        """
        if resource_criteria is None:
            raise ValueError("Invalid value for `resource_criteria`, must not be `None`")  # noqa: E501

        self._resource_criteria = resource_criteria

    @property
    def time_period(self) -> QueryComputeCapacityRequestTimePeriod:
        """Gets the time_period of this QueryComputeCapacityRequest.


        :return: The time_period of this QueryComputeCapacityRequest.
        :rtype: QueryComputeCapacityRequestTimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period: QueryComputeCapacityRequestTimePeriod):
        """Sets the time_period of this QueryComputeCapacityRequest.


        :param time_period: The time_period of this QueryComputeCapacityRequest.
        :type time_period: QueryComputeCapacityRequestTimePeriod
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")  # noqa: E501

        self._time_period = time_period

    @property
    def zone_id(self) -> str:
        """Gets the zone_id of this QueryComputeCapacityRequest.

        When specified this parameter identifies the resource zone for which the capacity is requested. When not specified the total capacity managed by the VIM instance will be returned.  # noqa: E501

        :return: The zone_id of this QueryComputeCapacityRequest.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: str):
        """Sets the zone_id of this QueryComputeCapacityRequest.

        When specified this parameter identifies the resource zone for which the capacity is requested. When not specified the total capacity managed by the VIM instance will be returned.  # noqa: E501

        :param zone_id: The zone_id of this QueryComputeCapacityRequest.
        :type zone_id: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id
