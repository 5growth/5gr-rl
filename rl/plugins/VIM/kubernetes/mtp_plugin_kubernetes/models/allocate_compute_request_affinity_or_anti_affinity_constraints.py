# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.allocate_compute_request_affinity_anti_affinity_resource_list import \
    AllocateComputeRequestAffinityAntiAffinityResourceList
from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class AllocateComputeRequestAffinityOrAntiAffinityConstraints(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, affinity_anti_affinity_resource_group: str=None, affinity_anti_affinity_resource_list: AllocateComputeRequestAffinityAntiAffinityResourceList=None, scope: str=None, type: str=None):  # noqa: E501
        """AllocateComputeRequestAffinityOrAntiAffinityConstraints - a model defined in Swagger

        :param affinity_anti_affinity_resource_group: The affinity_anti_affinity_resource_group of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.  # noqa: E501
        :type affinity_anti_affinity_resource_group: str
        :param affinity_anti_affinity_resource_list: The affinity_anti_affinity_resource_list of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.  # noqa: E501
        :type affinity_anti_affinity_resource_list: AllocateComputeRequestAffinityAntiAffinityResourceList
        :param scope: The scope of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.  # noqa: E501
        :type scope: str
        :param type: The type of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'affinity_anti_affinity_resource_group': str,
            'affinity_anti_affinity_resource_list': AllocateComputeRequestAffinityAntiAffinityResourceList,
            'scope': str,
            'type': str
        }

        self.attribute_map = {
            'affinity_anti_affinity_resource_group': 'affinityAntiAffinityResourceGroup',
            'affinity_anti_affinity_resource_list': 'affinityAntiAffinityResourceList',
            'scope': 'scope',
            'type': 'type'
        }

        self._affinity_anti_affinity_resource_group = affinity_anti_affinity_resource_group
        self._affinity_anti_affinity_resource_list = affinity_anti_affinity_resource_list
        self._scope = scope
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateComputeRequestAffinityOrAntiAffinityConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateComputeRequest_affinityOrAntiAffinityConstraints of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.  # noqa: E501
        :rtype: AllocateComputeRequestAffinityOrAntiAffinityConstraints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_anti_affinity_resource_group(self) -> str:
        """Gets the affinity_anti_affinity_resource_group of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.  # noqa: E501

        :return: The affinity_anti_affinity_resource_group of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :rtype: str
        """
        return self._affinity_anti_affinity_resource_group

    @affinity_anti_affinity_resource_group.setter
    def affinity_anti_affinity_resource_group(self, affinity_anti_affinity_resource_group: str):
        """Sets the affinity_anti_affinity_resource_group of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.  # noqa: E501

        :param affinity_anti_affinity_resource_group: The affinity_anti_affinity_resource_group of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :type affinity_anti_affinity_resource_group: str
        """
        if affinity_anti_affinity_resource_group is None:
            raise ValueError("Invalid value for `affinity_anti_affinity_resource_group`, must not be `None`")  # noqa: E501

        self._affinity_anti_affinity_resource_group = affinity_anti_affinity_resource_group

    @property
    def affinity_anti_affinity_resource_list(self) -> AllocateComputeRequestAffinityAntiAffinityResourceList:
        """Gets the affinity_anti_affinity_resource_list of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.


        :return: The affinity_anti_affinity_resource_list of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :rtype: AllocateComputeRequestAffinityAntiAffinityResourceList
        """
        return self._affinity_anti_affinity_resource_list

    @affinity_anti_affinity_resource_list.setter
    def affinity_anti_affinity_resource_list(self, affinity_anti_affinity_resource_list: AllocateComputeRequestAffinityAntiAffinityResourceList):
        """Sets the affinity_anti_affinity_resource_list of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.


        :param affinity_anti_affinity_resource_list: The affinity_anti_affinity_resource_list of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :type affinity_anti_affinity_resource_list: AllocateComputeRequestAffinityAntiAffinityResourceList
        """
        if affinity_anti_affinity_resource_list is None:
            raise ValueError("Invalid value for `affinity_anti_affinity_resource_list`, must not be `None`")  # noqa: E501

        self._affinity_anti_affinity_resource_list = affinity_anti_affinity_resource_list

    @property
    def scope(self) -> str:
        """Gets the scope of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.  # noqa: E501

        :return: The scope of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.  # noqa: E501

        :param scope: The scope of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def type(self) -> str:
        """Gets the type of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Indicates whether this is an affinity or anti-affinity constraint.  # noqa: E501

        :return: The type of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.

        Indicates whether this is an affinity or anti-affinity constraint.  # noqa: E501

        :param type: The type of this AllocateComputeRequestAffinityOrAntiAffinityConstraints.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
