# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class VirtualComputeResourceInformationVirtualCPU(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cpu_architecture: str=None, cpu_clock: float=None, num_virtual_cpu: float=None, virtual_cpu_oversubscription_policy: str=None, virtual_cpu_pinning_supported: bool=None):  # noqa: E501
        """VirtualComputeResourceInformationVirtualCPU - a model defined in Swagger

        :param cpu_architecture: The cpu_architecture of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :type cpu_architecture: str
        :param cpu_clock: The cpu_clock of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :type cpu_clock: float
        :param num_virtual_cpu: The num_virtual_cpu of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :type num_virtual_cpu: float
        :param virtual_cpu_oversubscription_policy: The virtual_cpu_oversubscription_policy of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :type virtual_cpu_oversubscription_policy: str
        :param virtual_cpu_pinning_supported: The virtual_cpu_pinning_supported of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :type virtual_cpu_pinning_supported: bool
        """
        self.swagger_types = {
            'cpu_architecture': str,
            'cpu_clock': float,
            'num_virtual_cpu': float,
            'virtual_cpu_oversubscription_policy': str,
            'virtual_cpu_pinning_supported': bool
        }

        self.attribute_map = {
            'cpu_architecture': 'cpuArchitecture',
            'cpu_clock': 'cpuClock',
            'num_virtual_cpu': 'numVirtualCpu',
            'virtual_cpu_oversubscription_policy': 'virtualCpuOversubscriptionPolicy',
            'virtual_cpu_pinning_supported': 'virtualCpuPinningSupported'
        }

        self._cpu_architecture = cpu_architecture
        self._cpu_clock = cpu_clock
        self._num_virtual_cpu = num_virtual_cpu
        self._virtual_cpu_oversubscription_policy = virtual_cpu_oversubscription_policy
        self._virtual_cpu_pinning_supported = virtual_cpu_pinning_supported

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualComputeResourceInformationVirtualCPU':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualComputeResourceInformation_virtualCPU of this VirtualComputeResourceInformationVirtualCPU.  # noqa: E501
        :rtype: VirtualComputeResourceInformationVirtualCPU
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_architecture(self) -> str:
        """Gets the cpu_architecture of this VirtualComputeResourceInformationVirtualCPU.

        CPU architecture type. Examples are x86, ARM.  # noqa: E501

        :return: The cpu_architecture of this VirtualComputeResourceInformationVirtualCPU.
        :rtype: str
        """
        return self._cpu_architecture

    @cpu_architecture.setter
    def cpu_architecture(self, cpu_architecture: str):
        """Sets the cpu_architecture of this VirtualComputeResourceInformationVirtualCPU.

        CPU architecture type. Examples are x86, ARM.  # noqa: E501

        :param cpu_architecture: The cpu_architecture of this VirtualComputeResourceInformationVirtualCPU.
        :type cpu_architecture: str
        """
        if cpu_architecture is None:
            raise ValueError("Invalid value for `cpu_architecture`, must not be `None`")  # noqa: E501

        self._cpu_architecture = cpu_architecture

    @property
    def cpu_clock(self) -> float:
        """Gets the cpu_clock of this VirtualComputeResourceInformationVirtualCPU.

        Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.  # noqa: E501

        :return: The cpu_clock of this VirtualComputeResourceInformationVirtualCPU.
        :rtype: float
        """
        return self._cpu_clock

    @cpu_clock.setter
    def cpu_clock(self, cpu_clock: float):
        """Sets the cpu_clock of this VirtualComputeResourceInformationVirtualCPU.

        Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.  # noqa: E501

        :param cpu_clock: The cpu_clock of this VirtualComputeResourceInformationVirtualCPU.
        :type cpu_clock: float
        """
        if cpu_clock is None:
            raise ValueError("Invalid value for `cpu_clock`, must not be `None`")  # noqa: E501

        self._cpu_clock = cpu_clock

    @property
    def num_virtual_cpu(self) -> float:
        """Gets the num_virtual_cpu of this VirtualComputeResourceInformationVirtualCPU.

        Number of virtual CPUs. Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.  # noqa: E501

        :return: The num_virtual_cpu of this VirtualComputeResourceInformationVirtualCPU.
        :rtype: float
        """
        return self._num_virtual_cpu

    @num_virtual_cpu.setter
    def num_virtual_cpu(self, num_virtual_cpu: float):
        """Sets the num_virtual_cpu of this VirtualComputeResourceInformationVirtualCPU.

        Number of virtual CPUs. Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.  # noqa: E501

        :param num_virtual_cpu: The num_virtual_cpu of this VirtualComputeResourceInformationVirtualCPU.
        :type num_virtual_cpu: float
        """
        if num_virtual_cpu is None:
            raise ValueError("Invalid value for `num_virtual_cpu`, must not be `None`")  # noqa: E501

        self._num_virtual_cpu = num_virtual_cpu

    @property
    def virtual_cpu_oversubscription_policy(self) -> str:
        """Gets the virtual_cpu_oversubscription_policy of this VirtualComputeResourceInformationVirtualCPU.

        The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no concrete policy is defined.  # noqa: E501

        :return: The virtual_cpu_oversubscription_policy of this VirtualComputeResourceInformationVirtualCPU.
        :rtype: str
        """
        return self._virtual_cpu_oversubscription_policy

    @virtual_cpu_oversubscription_policy.setter
    def virtual_cpu_oversubscription_policy(self, virtual_cpu_oversubscription_policy: str):
        """Sets the virtual_cpu_oversubscription_policy of this VirtualComputeResourceInformationVirtualCPU.

        The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no concrete policy is defined.  # noqa: E501

        :param virtual_cpu_oversubscription_policy: The virtual_cpu_oversubscription_policy of this VirtualComputeResourceInformationVirtualCPU.
        :type virtual_cpu_oversubscription_policy: str
        """
        if virtual_cpu_oversubscription_policy is None:
            raise ValueError("Invalid value for `virtual_cpu_oversubscription_policy`, must not be `None`")  # noqa: E501

        self._virtual_cpu_oversubscription_policy = virtual_cpu_oversubscription_policy

    @property
    def virtual_cpu_pinning_supported(self) -> bool:
        """Gets the virtual_cpu_pinning_supported of this VirtualComputeResourceInformationVirtualCPU.

        It defines whether CPU pinning capability is available on the consumable virtualised compute resource.  # noqa: E501

        :return: The virtual_cpu_pinning_supported of this VirtualComputeResourceInformationVirtualCPU.
        :rtype: bool
        """
        return self._virtual_cpu_pinning_supported

    @virtual_cpu_pinning_supported.setter
    def virtual_cpu_pinning_supported(self, virtual_cpu_pinning_supported: bool):
        """Sets the virtual_cpu_pinning_supported of this VirtualComputeResourceInformationVirtualCPU.

        It defines whether CPU pinning capability is available on the consumable virtualised compute resource.  # noqa: E501

        :param virtual_cpu_pinning_supported: The virtual_cpu_pinning_supported of this VirtualComputeResourceInformationVirtualCPU.
        :type virtual_cpu_pinning_supported: bool
        """
        if virtual_cpu_pinning_supported is None:
            raise ValueError("Invalid value for `virtual_cpu_pinning_supported`, must not be `None`")  # noqa: E501

        self._virtual_cpu_pinning_supported = virtual_cpu_pinning_supported
