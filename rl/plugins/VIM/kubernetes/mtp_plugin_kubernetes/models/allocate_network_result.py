# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.allocate_network_result_subnet_data import AllocateNetworkResultSubnetData

from mtp_plugin_kubernetes.models.allocate_network_result_network_port_data import AllocateNetworkResultNetworkPortData

from mtp_plugin_kubernetes.models.allocate_network_result_network_data import AllocateNetworkResultNetworkData

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class AllocateNetworkResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, network_data: AllocateNetworkResultNetworkData=None, network_port_data: AllocateNetworkResultNetworkPortData=None, subnet_data: AllocateNetworkResultSubnetData=None):  # noqa: E501
        """AllocateNetworkResult - a model defined in Swagger

        :param network_data: The network_data of this AllocateNetworkResult.  # noqa: E501
        :type network_data: AllocateNetworkResultNetworkData
        :param network_port_data: The network_port_data of this AllocateNetworkResult.  # noqa: E501
        :type network_port_data: AllocateNetworkResultNetworkPortData
        :param subnet_data: The subnet_data of this AllocateNetworkResult.  # noqa: E501
        :type subnet_data: AllocateNetworkResultSubnetData
        """
        self.swagger_types = {
            'network_data': AllocateNetworkResultNetworkData,
            'network_port_data': AllocateNetworkResultNetworkPortData,
            'subnet_data': AllocateNetworkResultSubnetData
        }

        self.attribute_map = {
            'network_data': 'networkData',
            'network_port_data': 'networkPortData',
            'subnet_data': 'subnetData'
        }

        self._network_data = network_data
        self._network_port_data = network_port_data
        self._subnet_data = subnet_data

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateNetworkResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateNetworkResult of this AllocateNetworkResult.  # noqa: E501
        :rtype: AllocateNetworkResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_data(self) -> AllocateNetworkResultNetworkData:
        """Gets the network_data of this AllocateNetworkResult.


        :return: The network_data of this AllocateNetworkResult.
        :rtype: AllocateNetworkResultNetworkData
        """
        return self._network_data

    @network_data.setter
    def network_data(self, network_data: AllocateNetworkResultNetworkData):
        """Sets the network_data of this AllocateNetworkResult.


        :param network_data: The network_data of this AllocateNetworkResult.
        :type network_data: AllocateNetworkResultNetworkData
        """
        if network_data is None:
            raise ValueError("Invalid value for `network_data`, must not be `None`")  # noqa: E501

        self._network_data = network_data

    @property
    def network_port_data(self) -> AllocateNetworkResultNetworkPortData:
        """Gets the network_port_data of this AllocateNetworkResult.


        :return: The network_port_data of this AllocateNetworkResult.
        :rtype: AllocateNetworkResultNetworkPortData
        """
        return self._network_port_data

    @network_port_data.setter
    def network_port_data(self, network_port_data: AllocateNetworkResultNetworkPortData):
        """Sets the network_port_data of this AllocateNetworkResult.


        :param network_port_data: The network_port_data of this AllocateNetworkResult.
        :type network_port_data: AllocateNetworkResultNetworkPortData
        """
        if network_port_data is None:
            raise ValueError("Invalid value for `network_port_data`, must not be `None`")  # noqa: E501

        self._network_port_data = network_port_data

    @property
    def subnet_data(self) -> AllocateNetworkResultSubnetData:
        """Gets the subnet_data of this AllocateNetworkResult.


        :return: The subnet_data of this AllocateNetworkResult.
        :rtype: AllocateNetworkResultSubnetData
        """
        return self._subnet_data

    @subnet_data.setter
    def subnet_data(self, subnet_data: AllocateNetworkResultSubnetData):
        """Sets the subnet_data of this AllocateNetworkResult.


        :param subnet_data: The subnet_data of this AllocateNetworkResult.
        :type subnet_data: AllocateNetworkResultSubnetData
        """
        if subnet_data is None:
            raise ValueError("Invalid value for `subnet_data`, must not be `None`")  # noqa: E501

        self._subnet_data = subnet_data
