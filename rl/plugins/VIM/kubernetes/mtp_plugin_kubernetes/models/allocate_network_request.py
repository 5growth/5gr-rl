# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.subnet_data import SubnetData

from mtp_plugin_kubernetes.models.meta_data_inner import MetaDataInner

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class AllocateNetworkRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, affinity_or_anti_affinity_constraints: str=None, location_constraints: str=None, metadata: List[MetaDataInner]=None, network_resource_name: str=None, network_resource_type: str=None, reservation_id: str=None, resource_group_id: str=None, type_network_data: str=None, type_network_port_data: str=None, type_subnet_data: SubnetData=None):  # noqa: E501
        """AllocateNetworkRequest - a model defined in Swagger

        :param affinity_or_anti_affinity_constraints: The affinity_or_anti_affinity_constraints of this AllocateNetworkRequest.  # noqa: E501
        :type affinity_or_anti_affinity_constraints: str
        :param location_constraints: The location_constraints of this AllocateNetworkRequest.  # noqa: E501
        :type location_constraints: str
        :param metadata: The metadata of this AllocateNetworkRequest.  # noqa: E501
        :type metadata: List[MetaDataInner]
        :param network_resource_name: The network_resource_name of this AllocateNetworkRequest.  # noqa: E501
        :type network_resource_name: str
        :param network_resource_type: The network_resource_type of this AllocateNetworkRequest.  # noqa: E501
        :type network_resource_type: str
        :param reservation_id: The reservation_id of this AllocateNetworkRequest.  # noqa: E501
        :type reservation_id: str
        :param resource_group_id: The resource_group_id of this AllocateNetworkRequest.  # noqa: E501
        :type resource_group_id: str
        :param type_network_data: The type_network_data of this AllocateNetworkRequest.  # noqa: E501
        :type type_network_data: str
        :param type_network_port_data: The type_network_port_data of this AllocateNetworkRequest.  # noqa: E501
        :type type_network_port_data: str
        :param type_subnet_data: The type_subnet_data of this AllocateNetworkRequest.  # noqa: E501
        :type type_subnet_data: SubnetData
        """
        self.swagger_types = {
            'affinity_or_anti_affinity_constraints': str,
            'location_constraints': str,
            'metadata': List[MetaDataInner],
            'network_resource_name': str,
            'network_resource_type': str,
            'reservation_id': str,
            'resource_group_id': str,
            'type_network_data': str,
            'type_network_port_data': str,
            'type_subnet_data': SubnetData
        }

        self.attribute_map = {
            'affinity_or_anti_affinity_constraints': 'affinityOrAntiAffinityConstraints',
            'location_constraints': 'locationConstraints',
            'metadata': 'metadata',
            'network_resource_name': 'networkResourceName',
            'network_resource_type': 'networkResourceType',
            'reservation_id': 'reservationId',
            'resource_group_id': 'resourceGroupId',
            'type_network_data': 'typeNetworkData',
            'type_network_port_data': 'typeNetworkPortData',
            'type_subnet_data': 'typeSubnetData'
        }

        self._affinity_or_anti_affinity_constraints = affinity_or_anti_affinity_constraints
        self._location_constraints = location_constraints
        self._metadata = metadata
        self._network_resource_name = network_resource_name
        self._network_resource_type = network_resource_type
        self._reservation_id = reservation_id
        self._resource_group_id = resource_group_id
        self._type_network_data = type_network_data
        self._type_network_port_data = type_network_port_data
        self._type_subnet_data = type_subnet_data

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateNetworkRequest of this AllocateNetworkRequest.  # noqa: E501
        :rtype: AllocateNetworkRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_or_anti_affinity_constraints(self) -> str:
        """Gets the affinity_or_anti_affinity_constraints of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :return: The affinity_or_anti_affinity_constraints of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._affinity_or_anti_affinity_constraints

    @affinity_or_anti_affinity_constraints.setter
    def affinity_or_anti_affinity_constraints(self, affinity_or_anti_affinity_constraints: str):
        """Sets the affinity_or_anti_affinity_constraints of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :param affinity_or_anti_affinity_constraints: The affinity_or_anti_affinity_constraints of this AllocateNetworkRequest.
        :type affinity_or_anti_affinity_constraints: str
        """
        if affinity_or_anti_affinity_constraints is None:
            raise ValueError("Invalid value for `affinity_or_anti_affinity_constraints`, must not be `None`")  # noqa: E501

        self._affinity_or_anti_affinity_constraints = affinity_or_anti_affinity_constraints

    @property
    def location_constraints(self) -> str:
        """Gets the location_constraints of this AllocateNetworkRequest.

        Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.  # noqa: E501

        :return: The location_constraints of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._location_constraints

    @location_constraints.setter
    def location_constraints(self, location_constraints: str):
        """Sets the location_constraints of this AllocateNetworkRequest.

        Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.  # noqa: E501

        :param location_constraints: The location_constraints of this AllocateNetworkRequest.
        :type location_constraints: str
        """
        if location_constraints is None:
            raise ValueError("Invalid value for `location_constraints`, must not be `None`")  # noqa: E501

        self._location_constraints = location_constraints

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :return: The metadata of this AllocateNetworkRequest.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :param metadata: The metadata of this AllocateNetworkRequest.
        :type metadata: List[MetaDataInner]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def network_resource_name(self) -> str:
        """Gets the network_resource_name of this AllocateNetworkRequest.

        Name provided by the consumer for the virtualised network resource to allocate. It can be used for identifying resources from consumer side.  # noqa: E501

        :return: The network_resource_name of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._network_resource_name

    @network_resource_name.setter
    def network_resource_name(self, network_resource_name: str):
        """Sets the network_resource_name of this AllocateNetworkRequest.

        Name provided by the consumer for the virtualised network resource to allocate. It can be used for identifying resources from consumer side.  # noqa: E501

        :param network_resource_name: The network_resource_name of this AllocateNetworkRequest.
        :type network_resource_name: str
        """
        if network_resource_name is None:
            raise ValueError("Invalid value for `network_resource_name`, must not be `None`")  # noqa: E501

        self._network_resource_name = network_resource_name

    @property
    def network_resource_type(self) -> str:
        """Gets the network_resource_type of this AllocateNetworkRequest.

        Type of virtualised network resource. Possible values are: \"network\", \"subnet\" or network-port.  # noqa: E501

        :return: The network_resource_type of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._network_resource_type

    @network_resource_type.setter
    def network_resource_type(self, network_resource_type: str):
        """Sets the network_resource_type of this AllocateNetworkRequest.

        Type of virtualised network resource. Possible values are: \"network\", \"subnet\" or network-port.  # noqa: E501

        :param network_resource_type: The network_resource_type of this AllocateNetworkRequest.
        :type network_resource_type: str
        """
        if network_resource_type is None:
            raise ValueError("Invalid value for `network_resource_type`, must not be `None`")  # noqa: E501

        self._network_resource_type = network_resource_type

    @property
    def reservation_id(self) -> str:
        """Gets the reservation_id of this AllocateNetworkRequest.

        Identifier of the resource reservation applicable to this virtualised resource management operation.  # noqa: E501

        :return: The reservation_id of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id: str):
        """Sets the reservation_id of this AllocateNetworkRequest.

        Identifier of the resource reservation applicable to this virtualised resource management operation.  # noqa: E501

        :param reservation_id: The reservation_id of this AllocateNetworkRequest.
        :type reservation_id: str
        """
        if reservation_id is None:
            raise ValueError("Invalid value for `reservation_id`, must not be `None`")  # noqa: E501

        self._reservation_id = reservation_id

    @property
    def resource_group_id(self) -> str:
        """Gets the resource_group_id of this AllocateNetworkRequest.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :return: The resource_group_id of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._resource_group_id

    @resource_group_id.setter
    def resource_group_id(self, resource_group_id: str):
        """Sets the resource_group_id of this AllocateNetworkRequest.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :param resource_group_id: The resource_group_id of this AllocateNetworkRequest.
        :type resource_group_id: str
        """
        if resource_group_id is None:
            raise ValueError("Invalid value for `resource_group_id`, must not be `None`")  # noqa: E501

        self._resource_group_id = resource_group_id

    @property
    def type_network_data(self) -> str:
        """Gets the type_network_data of this AllocateNetworkRequest.

        The network data provides information about the particular virtual network resource to create. Cardinality can be \"0\" depending on the value of networkResourceType.  # noqa: E501

        :return: The type_network_data of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._type_network_data

    @type_network_data.setter
    def type_network_data(self, type_network_data: str):
        """Sets the type_network_data of this AllocateNetworkRequest.

        The network data provides information about the particular virtual network resource to create. Cardinality can be \"0\" depending on the value of networkResourceType.  # noqa: E501

        :param type_network_data: The type_network_data of this AllocateNetworkRequest.
        :type type_network_data: str
        """
        if type_network_data is None:
            raise ValueError("Invalid value for `type_network_data`, must not be `None`")  # noqa: E501

        self._type_network_data = type_network_data

    @property
    def type_network_port_data(self) -> str:
        """Gets the type_network_port_data of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :return: The type_network_port_data of this AllocateNetworkRequest.
        :rtype: str
        """
        return self._type_network_port_data

    @type_network_port_data.setter
    def type_network_port_data(self, type_network_port_data: str):
        """Sets the type_network_port_data of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :param type_network_port_data: The type_network_port_data of this AllocateNetworkRequest.
        :type type_network_port_data: str
        """
        if type_network_port_data is None:
            raise ValueError("Invalid value for `type_network_port_data`, must not be `None`")  # noqa: E501

        self._type_network_port_data = type_network_port_data

    @property
    def type_subnet_data(self) -> SubnetData:
        """Gets the type_subnet_data of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :return: The type_subnet_data of this AllocateNetworkRequest.
        :rtype: SubnetData
        """
        return self._type_subnet_data

    @type_subnet_data.setter
    def type_subnet_data(self, type_subnet_data: SubnetData):
        """Sets the type_subnet_data of this AllocateNetworkRequest.

        The binary software image file.  # noqa: E501

        :param type_subnet_data: The type_subnet_data of this AllocateNetworkRequest.
        :type type_subnet_data: SubnetData
        """
        if type_subnet_data is None:
            raise ValueError("Invalid value for `type_subnet_data`, must not be `None`")  # noqa: E501

        self._type_subnet_data = type_subnet_data
