# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class VirtualComputeResourceInformationVirtualMemory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, numa_supported: bool=None, virtual_mem_oversubscription_policy: str=None, virtual_mem_size: float=None):  # noqa: E501
        """VirtualComputeResourceInformationVirtualMemory - a model defined in Swagger

        :param numa_supported: The numa_supported of this VirtualComputeResourceInformationVirtualMemory.  # noqa: E501
        :type numa_supported: bool
        :param virtual_mem_oversubscription_policy: The virtual_mem_oversubscription_policy of this VirtualComputeResourceInformationVirtualMemory.  # noqa: E501
        :type virtual_mem_oversubscription_policy: str
        :param virtual_mem_size: The virtual_mem_size of this VirtualComputeResourceInformationVirtualMemory.  # noqa: E501
        :type virtual_mem_size: float
        """
        self.swagger_types = {
            'numa_supported': bool,
            'virtual_mem_oversubscription_policy': str,
            'virtual_mem_size': float
        }

        self.attribute_map = {
            'numa_supported': 'numaSupported',
            'virtual_mem_oversubscription_policy': 'virtualMemOversubscriptionPolicy',
            'virtual_mem_size': 'virtualMemSize'
        }

        self._numa_supported = numa_supported
        self._virtual_mem_oversubscription_policy = virtual_mem_oversubscription_policy
        self._virtual_mem_size = virtual_mem_size

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualComputeResourceInformationVirtualMemory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualComputeResourceInformation_virtualMemory of this VirtualComputeResourceInformationVirtualMemory.  # noqa: E501
        :rtype: VirtualComputeResourceInformationVirtualMemory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def numa_supported(self) -> bool:
        """Gets the numa_supported of this VirtualComputeResourceInformationVirtualMemory.

        It specifies if the memory allocation can be cognisant of the relevant process/core allocation.  # noqa: E501

        :return: The numa_supported of this VirtualComputeResourceInformationVirtualMemory.
        :rtype: bool
        """
        return self._numa_supported

    @numa_supported.setter
    def numa_supported(self, numa_supported: bool):
        """Sets the numa_supported of this VirtualComputeResourceInformationVirtualMemory.

        It specifies if the memory allocation can be cognisant of the relevant process/core allocation.  # noqa: E501

        :param numa_supported: The numa_supported of this VirtualComputeResourceInformationVirtualMemory.
        :type numa_supported: bool
        """
        if numa_supported is None:
            raise ValueError("Invalid value for `numa_supported`, must not be `None`")  # noqa: E501

        self._numa_supported = numa_supported

    @property
    def virtual_mem_oversubscription_policy(self) -> str:
        """Gets the virtual_mem_oversubscription_policy of this VirtualComputeResourceInformationVirtualMemory.

        The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no concrete policy is defined.  # noqa: E501

        :return: The virtual_mem_oversubscription_policy of this VirtualComputeResourceInformationVirtualMemory.
        :rtype: str
        """
        return self._virtual_mem_oversubscription_policy

    @virtual_mem_oversubscription_policy.setter
    def virtual_mem_oversubscription_policy(self, virtual_mem_oversubscription_policy: str):
        """Sets the virtual_mem_oversubscription_policy of this VirtualComputeResourceInformationVirtualMemory.

        The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no concrete policy is defined.  # noqa: E501

        :param virtual_mem_oversubscription_policy: The virtual_mem_oversubscription_policy of this VirtualComputeResourceInformationVirtualMemory.
        :type virtual_mem_oversubscription_policy: str
        """
        if virtual_mem_oversubscription_policy is None:
            raise ValueError("Invalid value for `virtual_mem_oversubscription_policy`, must not be `None`")  # noqa: E501

        self._virtual_mem_oversubscription_policy = virtual_mem_oversubscription_policy

    @property
    def virtual_mem_size(self) -> float:
        """Gets the virtual_mem_size of this VirtualComputeResourceInformationVirtualMemory.

        Amount of virtual memory (e.g. in MB). Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.  # noqa: E501

        :return: The virtual_mem_size of this VirtualComputeResourceInformationVirtualMemory.
        :rtype: float
        """
        return self._virtual_mem_size

    @virtual_mem_size.setter
    def virtual_mem_size(self, virtual_mem_size: float):
        """Sets the virtual_mem_size of this VirtualComputeResourceInformationVirtualMemory.

        Amount of virtual memory (e.g. in MB). Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.  # noqa: E501

        :param virtual_mem_size: The virtual_mem_size of this VirtualComputeResourceInformationVirtualMemory.
        :type virtual_mem_size: float
        """
        if virtual_mem_size is None:
            raise ValueError("Invalid value for `virtual_mem_size`, must not be `None`")  # noqa: E501

        self._virtual_mem_size = virtual_mem_size
