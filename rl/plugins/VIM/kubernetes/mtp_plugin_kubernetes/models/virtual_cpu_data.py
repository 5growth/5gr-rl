# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.virtual_cpu_pinning_data import VirtualCpuPinningData


class VirtualCpuData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cpu_architecture: str=None, num_virtual_cpu: float=None, virtual_cpu_clock: float=None, virtual_cpu_oversubscription_policy: str=None, virtual_cpu_pinning: VirtualCpuPinningData=None):  # noqa: E501
        """VirtualCpuData - a model defined in Swagger

        :param cpu_architecture: The cpu_architecture of this VirtualCpuData.  # noqa: E501
        :type cpu_architecture: str
        :param num_virtual_cpu: The num_virtual_cpu of this VirtualCpuData.  # noqa: E501
        :type num_virtual_cpu: float
        :param virtual_cpu_clock: The virtual_cpu_clock of this VirtualCpuData.  # noqa: E501
        :type virtual_cpu_clock: float
        :param virtual_cpu_oversubscription_policy: The virtual_cpu_oversubscription_policy of this VirtualCpuData.  # noqa: E501
        :type virtual_cpu_oversubscription_policy: str
        :param virtual_cpu_pinning: The virtual_cpu_pinning of this VirtualCpuData.  # noqa: E501
        :type virtual_cpu_pinning: VirtualCpuPinningData
        """
        self.swagger_types = {
            'cpu_architecture': str,
            'num_virtual_cpu': float,
            'virtual_cpu_clock': float,
            'virtual_cpu_oversubscription_policy': str,
            'virtual_cpu_pinning': VirtualCpuPinningData
        }

        self.attribute_map = {
            'cpu_architecture': 'cpuArchitecture',
            'num_virtual_cpu': 'numVirtualCpu',
            'virtual_cpu_clock': 'virtualCpuClock',
            'virtual_cpu_oversubscription_policy': 'virtualCpuOversubscriptionPolicy',
            'virtual_cpu_pinning': 'virtualCpuPinning'
        }

        self._cpu_architecture = cpu_architecture
        self._num_virtual_cpu = num_virtual_cpu
        self._virtual_cpu_clock = virtual_cpu_clock
        self._virtual_cpu_oversubscription_policy = virtual_cpu_oversubscription_policy
        self._virtual_cpu_pinning = virtual_cpu_pinning

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualCpuData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualCpuData of this VirtualCpuData.  # noqa: E501
        :rtype: VirtualCpuData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_architecture(self) -> str:
        """Gets the cpu_architecture of this VirtualCpuData.

        CPU architecture type. Examples are x86, ARM. The cardinality can be 0 during the allocation request, if no particular CPU architecture type is requested.  # noqa: E501

        :return: The cpu_architecture of this VirtualCpuData.
        :rtype: str
        """
        return self._cpu_architecture

    @cpu_architecture.setter
    def cpu_architecture(self, cpu_architecture: str):
        """Sets the cpu_architecture of this VirtualCpuData.

        CPU architecture type. Examples are x86, ARM. The cardinality can be 0 during the allocation request, if no particular CPU architecture type is requested.  # noqa: E501

        :param cpu_architecture: The cpu_architecture of this VirtualCpuData.
        :type cpu_architecture: str
        """

        self._cpu_architecture = cpu_architecture

    @property
    def num_virtual_cpu(self) -> float:
        """Gets the num_virtual_cpu of this VirtualCpuData.

        Number of virtual CPUs  # noqa: E501

        :return: The num_virtual_cpu of this VirtualCpuData.
        :rtype: float
        """
        return self._num_virtual_cpu

    @num_virtual_cpu.setter
    def num_virtual_cpu(self, num_virtual_cpu: float):
        """Sets the num_virtual_cpu of this VirtualCpuData.

        Number of virtual CPUs  # noqa: E501

        :param num_virtual_cpu: The num_virtual_cpu of this VirtualCpuData.
        :type num_virtual_cpu: float
        """
        if num_virtual_cpu is None:
            raise ValueError("Invalid value for `num_virtual_cpu`, must not be `None`")  # noqa: E501

        self._num_virtual_cpu = num_virtual_cpu

    @property
    def virtual_cpu_clock(self) -> float:
        """Gets the virtual_cpu_clock of this VirtualCpuData.

        Minimum virtual CPU clock rate (e.g. in MHz). The cardinality can be 0 during the allocation request, if no particular value is requested.  # noqa: E501

        :return: The virtual_cpu_clock of this VirtualCpuData.
        :rtype: float
        """
        return self._virtual_cpu_clock

    @virtual_cpu_clock.setter
    def virtual_cpu_clock(self, virtual_cpu_clock: float):
        """Sets the virtual_cpu_clock of this VirtualCpuData.

        Minimum virtual CPU clock rate (e.g. in MHz). The cardinality can be 0 during the allocation request, if no particular value is requested.  # noqa: E501

        :param virtual_cpu_clock: The virtual_cpu_clock of this VirtualCpuData.
        :type virtual_cpu_clock: float
        """

        self._virtual_cpu_clock = virtual_cpu_clock

    @property
    def virtual_cpu_oversubscription_policy(self) -> str:
        """Gets the virtual_cpu_oversubscription_policy of this VirtualCpuData.

        The CPU core oversubscription policy e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 during the allocation request, if no particular value is requested.  # noqa: E501

        :return: The virtual_cpu_oversubscription_policy of this VirtualCpuData.
        :rtype: str
        """
        return self._virtual_cpu_oversubscription_policy

    @virtual_cpu_oversubscription_policy.setter
    def virtual_cpu_oversubscription_policy(self, virtual_cpu_oversubscription_policy: str):
        """Sets the virtual_cpu_oversubscription_policy of this VirtualCpuData.

        The CPU core oversubscription policy e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 during the allocation request, if no particular value is requested.  # noqa: E501

        :param virtual_cpu_oversubscription_policy: The virtual_cpu_oversubscription_policy of this VirtualCpuData.
        :type virtual_cpu_oversubscription_policy: str
        """

        self._virtual_cpu_oversubscription_policy = virtual_cpu_oversubscription_policy

    @property
    def virtual_cpu_pinning(self) -> VirtualCpuPinningData:
        """Gets the virtual_cpu_pinning of this VirtualCpuData.


        :return: The virtual_cpu_pinning of this VirtualCpuData.
        :rtype: VirtualCpuPinningData
        """
        return self._virtual_cpu_pinning

    @virtual_cpu_pinning.setter
    def virtual_cpu_pinning(self, virtual_cpu_pinning: VirtualCpuPinningData):
        """Sets the virtual_cpu_pinning of this VirtualCpuData.


        :param virtual_cpu_pinning: The virtual_cpu_pinning of this VirtualCpuData.
        :type virtual_cpu_pinning: VirtualCpuPinningData
        """

        self._virtual_cpu_pinning = virtual_cpu_pinning
