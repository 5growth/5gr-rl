# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.meta_data_inner import MetaDataInner


class ResourceZone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, metadata: List[MetaDataInner]=None, nfvi_pop_id: str=None, zone_id: str=None, zone_name: str=None, zone_property: str=None, zone_state: str=None):  # noqa: E501
        """ResourceZone - a model defined in Swagger

        :param metadata: The metadata of this ResourceZone.  # noqa: E501
        :type metadata: List[MetaDataInner]
        :param nfvi_pop_id: The nfvi_pop_id of this ResourceZone.  # noqa: E501
        :type nfvi_pop_id: str
        :param zone_id: The zone_id of this ResourceZone.  # noqa: E501
        :type zone_id: str
        :param zone_name: The zone_name of this ResourceZone.  # noqa: E501
        :type zone_name: str
        :param zone_property: The zone_property of this ResourceZone.  # noqa: E501
        :type zone_property: str
        :param zone_state: The zone_state of this ResourceZone.  # noqa: E501
        :type zone_state: str
        """
        self.swagger_types = {
            'metadata': List[MetaDataInner],
            'nfvi_pop_id': str,
            'zone_id': str,
            'zone_name': str,
            'zone_property': str,
            'zone_state': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'nfvi_pop_id': 'nfviPopId',
            'zone_id': 'zoneId',
            'zone_name': 'zoneName',
            'zone_property': 'zoneProperty',
            'zone_state': 'zoneState'
        }

        self._metadata = metadata
        self._nfvi_pop_id = nfvi_pop_id
        self._zone_id = zone_id
        self._zone_name = zone_name
        self._zone_property = zone_property
        self._zone_state = zone_state

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceZone of this ResourceZone.  # noqa: E501
        :rtype: ResourceZone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> List[MetaDataInner]:
        """Gets the metadata of this ResourceZone.

        Other metadata associated to the Resource Zone.  # noqa: E501

        :return: The metadata of this ResourceZone.
        :rtype: List[MetaDataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[MetaDataInner]):
        """Sets the metadata of this ResourceZone.

        Other metadata associated to the Resource Zone.  # noqa: E501

        :param metadata: The metadata of this ResourceZone.
        :type metadata: List[MetaDataInner]
        """

        self._metadata = metadata

    @property
    def nfvi_pop_id(self) -> str:
        """Gets the nfvi_pop_id of this ResourceZone.

        The identifier of the NFVI-PoP the Resource Zone belongs to.  # noqa: E501

        :return: The nfvi_pop_id of this ResourceZone.
        :rtype: str
        """
        return self._nfvi_pop_id

    @nfvi_pop_id.setter
    def nfvi_pop_id(self, nfvi_pop_id: str):
        """Sets the nfvi_pop_id of this ResourceZone.

        The identifier of the NFVI-PoP the Resource Zone belongs to.  # noqa: E501

        :param nfvi_pop_id: The nfvi_pop_id of this ResourceZone.
        :type nfvi_pop_id: str
        """
        if nfvi_pop_id is None:
            raise ValueError("Invalid value for `nfvi_pop_id`, must not be `None`")  # noqa: E501

        self._nfvi_pop_id = nfvi_pop_id

    @property
    def zone_id(self) -> str:
        """Gets the zone_id of this ResourceZone.

        The identifier of the Resource Zone.  # noqa: E501

        :return: The zone_id of this ResourceZone.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: str):
        """Sets the zone_id of this ResourceZone.

        The identifier of the Resource Zone.  # noqa: E501

        :param zone_id: The zone_id of this ResourceZone.
        :type zone_id: str
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def zone_name(self) -> str:
        """Gets the zone_name of this ResourceZone.

        The name of the Resource Zone.  # noqa: E501

        :return: The zone_name of this ResourceZone.
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name: str):
        """Sets the zone_name of this ResourceZone.

        The name of the Resource Zone.  # noqa: E501

        :param zone_name: The zone_name of this ResourceZone.
        :type zone_name: str
        """
        if zone_name is None:
            raise ValueError("Invalid value for `zone_name`, must not be `None`")  # noqa: E501

        self._zone_name = zone_name

    @property
    def zone_property(self) -> str:
        """Gets the zone_property of this ResourceZone.

        Set of properties that define the capabilities associated to the Resource Zone. Examples of capabilities may include: support of certain compute resource types (e.g. low performance, acceleration capabilities, etc. association to certain NFVI-PoP physical segregation (e.g. different power or network sub-systems, availability of redundancy power sub-systems), etc.  # noqa: E501

        :return: The zone_property of this ResourceZone.
        :rtype: str
        """
        return self._zone_property

    @zone_property.setter
    def zone_property(self, zone_property: str):
        """Sets the zone_property of this ResourceZone.

        Set of properties that define the capabilities associated to the Resource Zone. Examples of capabilities may include: support of certain compute resource types (e.g. low performance, acceleration capabilities, etc. association to certain NFVI-PoP physical segregation (e.g. different power or network sub-systems, availability of redundancy power sub-systems), etc.  # noqa: E501

        :param zone_property: The zone_property of this ResourceZone.
        :type zone_property: str
        """
        if zone_property is None:
            raise ValueError("Invalid value for `zone_property`, must not be `None`")  # noqa: E501

        self._zone_property = zone_property

    @property
    def zone_state(self) -> str:
        """Gets the zone_state of this ResourceZone.

        Information about the current state of the Resource Zone, e.g. if the Resource Zone is available.  # noqa: E501

        :return: The zone_state of this ResourceZone.
        :rtype: str
        """
        return self._zone_state

    @zone_state.setter
    def zone_state(self, zone_state: str):
        """Sets the zone_state of this ResourceZone.

        Information about the current state of the Resource Zone, e.g. if the Resource Zone is available.  # noqa: E501

        :param zone_state: The zone_state of this ResourceZone.
        :type zone_state: str
        """
        if zone_state is None:
            raise ValueError("Invalid value for `zone_state`, must not be `None`")  # noqa: E501

        self._zone_state = zone_state
