# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes.models.meta_data_inner import MetaDataInner  # noqa: F401,E501
from mtp_plugin_kubernetes import util


class SoftwareImageAddQuery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, provider: str=None, resource_group_id: str=None, software_image: str=None, user_metadata: List[MetaDataInner]=None, version: str=None, visibility: str=None):  # noqa: E501
        """SoftwareImageAddQuery - a model defined in Swagger

        :param name: The name of this SoftwareImageAddQuery.  # noqa: E501
        :type name: str
        :param provider: The provider of this SoftwareImageAddQuery.  # noqa: E501
        :type provider: str
        :param resource_group_id: The resource_group_id of this SoftwareImageAddQuery.  # noqa: E501
        :type resource_group_id: str
        :param software_image: The software_image of this SoftwareImageAddQuery.  # noqa: E501
        :type software_image: str
        :param user_metadata: The user_metadata of this SoftwareImageAddQuery.  # noqa: E501
        :type user_metadata: List[MetaDataInner]
        :param version: The version of this SoftwareImageAddQuery.  # noqa: E501
        :type version: str
        :param visibility: The visibility of this SoftwareImageAddQuery.  # noqa: E501
        :type visibility: str
        """
        self.swagger_types = {
            'name': str,
            'provider': str,
            'resource_group_id': str,
            'software_image': str,
            'user_metadata': List[MetaDataInner],
            'version': str,
            'visibility': str
        }

        self.attribute_map = {
            'name': 'name',
            'provider': 'provider',
            'resource_group_id': 'resourceGroupId',
            'software_image': 'softwareImage',
            'user_metadata': 'userMetadata',
            'version': 'version',
            'visibility': 'visibility'
        }

        self._name = name
        self._provider = provider
        self._resource_group_id = resource_group_id
        self._software_image = software_image
        self._user_metadata = user_metadata
        self._version = version
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt) -> 'SoftwareImageAddQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SoftwareImageAddQuery of this SoftwareImageAddQuery.  # noqa: E501
        :rtype: SoftwareImageAddQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SoftwareImageAddQuery.

        The name of the software image.  # noqa: E501

        :return: The name of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SoftwareImageAddQuery.

        The name of the software image.  # noqa: E501

        :param name: The name of this SoftwareImageAddQuery.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self) -> str:
        """Gets the provider of this SoftwareImageAddQuery.

        The provider of the software image.  # noqa: E501

        :return: The provider of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: str):
        """Sets the provider of this SoftwareImageAddQuery.

        The provider of the software image.  # noqa: E501

        :param provider: The provider of this SoftwareImageAddQuery.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def resource_group_id(self) -> str:
        """Gets the resource_group_id of this SoftwareImageAddQuery.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :return: The resource_group_id of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._resource_group_id

    @resource_group_id.setter
    def resource_group_id(self, resource_group_id: str):
        """Sets the resource_group_id of this SoftwareImageAddQuery.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :param resource_group_id: The resource_group_id of this SoftwareImageAddQuery.
        :type resource_group_id: str
        """
        if resource_group_id is None:
            raise ValueError("Invalid value for `resource_group_id`, must not be `None`")  # noqa: E501

        self._resource_group_id = resource_group_id

    @property
    def software_image(self) -> str:
        """Gets the software_image of this SoftwareImageAddQuery.

        The binary software image file.  # noqa: E501

        :return: The software_image of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._software_image

    @software_image.setter
    def software_image(self, software_image: str):
        """Sets the software_image of this SoftwareImageAddQuery.

        The binary software image file.  # noqa: E501

        :param software_image: The software_image of this SoftwareImageAddQuery.
        :type software_image: str
        """
        if software_image is None:
            raise ValueError("Invalid value for `software_image`, must not be `None`")  # noqa: E501

        self._software_image = software_image

    @property
    def user_metadata(self) -> List[MetaDataInner]:
        """Gets the user_metadata of this SoftwareImageAddQuery.

        User-defined metadata.  # noqa: E501

        :return: The user_metadata of this SoftwareImageAddQuery.
        :rtype: List[MetaDataInner]
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata: List[MetaDataInner]):
        """Sets the user_metadata of this SoftwareImageAddQuery.

        User-defined metadata.  # noqa: E501

        :param user_metadata: The user_metadata of this SoftwareImageAddQuery.
        :type user_metadata: List[MetaDataInner]
        """
        if user_metadata is None:
            raise ValueError("Invalid value for `user_metadata`, must not be `None`")  # noqa: E501

        self._user_metadata = user_metadata

    @property
    def version(self) -> str:
        """Gets the version of this SoftwareImageAddQuery.

        The version of the software image.  # noqa: E501

        :return: The version of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SoftwareImageAddQuery.

        The version of the software image.  # noqa: E501

        :param version: The version of this SoftwareImageAddQuery.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def visibility(self) -> str:
        """Gets the visibility of this SoftwareImageAddQuery.

        Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.  # noqa: E501

        :return: The visibility of this SoftwareImageAddQuery.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this SoftwareImageAddQuery.

        Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.  # noqa: E501

        :param visibility: The visibility of this SoftwareImageAddQuery.
        :type visibility: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility
