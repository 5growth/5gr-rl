# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util


class AllocateComputeRequestInterfaceData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, mac_address: str=None):  # noqa: E501
        """AllocateComputeRequestInterfaceData - a model defined in Swagger

        :param ip_address: The ip_address of this AllocateComputeRequestInterfaceData.  # noqa: E501
        :type ip_address: str
        :param mac_address: The mac_address of this AllocateComputeRequestInterfaceData.  # noqa: E501
        :type mac_address: str
        """
        self.swagger_types = {
            'ip_address': str,
            'mac_address': str
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'mac_address': 'macAddress'
        }

        self._ip_address = ip_address
        self._mac_address = mac_address

    @classmethod
    def from_dict(cls, dikt) -> 'AllocateComputeRequestInterfaceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllocateComputeRequest_interfaceData of this AllocateComputeRequestInterfaceData.  # noqa: E501
        :rtype: AllocateComputeRequestInterfaceData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this AllocateComputeRequestInterfaceData.

        The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.  # noqa: E501

        :return: The ip_address of this AllocateComputeRequestInterfaceData.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this AllocateComputeRequestInterfaceData.

        The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.  # noqa: E501

        :param ip_address: The ip_address of this AllocateComputeRequestInterfaceData.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this AllocateComputeRequestInterfaceData.

        The MAC address desired for the virtual network interface. The cardinality can be 0 to allow for network interface without specific MAC address configuration.  # noqa: E501

        :return: The mac_address of this AllocateComputeRequestInterfaceData.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this AllocateComputeRequestInterfaceData.

        The MAC address desired for the virtual network interface. The cardinality can be 0 to allow for network interface without specific MAC address configuration.  # noqa: E501

        :param mac_address: The mac_address of this AllocateComputeRequestInterfaceData.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address
