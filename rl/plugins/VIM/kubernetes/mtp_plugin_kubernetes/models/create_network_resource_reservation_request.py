# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.allocate_compute_request_affinity_or_anti_affinity_constraints import \
    AllocateComputeRequestAffinityOrAntiAffinityConstraints
from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.create_network_resource_reservation_request_network_reservation import \
    CreateNetworkResourceReservationRequestNetworkReservation


class CreateNetworkResourceReservationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]=None, anti_affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]=None, end_time: datetime=None, expiry_time: datetime=None, location_constraints: str=None, network_reservation: CreateNetworkResourceReservationRequestNetworkReservation=None, resource_group_id: str=None, start_time: datetime=None):  # noqa: E501
        """CreateNetworkResourceReservationRequest - a model defined in Swagger

        :param affinity_constraint: The affinity_constraint of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        :param anti_affinity_constraint: The anti_affinity_constraint of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type anti_affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        :param end_time: The end_time of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type end_time: datetime
        :param expiry_time: The expiry_time of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type expiry_time: datetime
        :param location_constraints: The location_constraints of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type location_constraints: str
        :param network_reservation: The network_reservation of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type network_reservation: CreateNetworkResourceReservationRequestNetworkReservation
        :param resource_group_id: The resource_group_id of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type resource_group_id: str
        :param start_time: The start_time of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :type start_time: datetime
        """
        self.swagger_types = {
            'affinity_constraint': List[AllocateComputeRequestAffinityOrAntiAffinityConstraints],
            'anti_affinity_constraint': List[AllocateComputeRequestAffinityOrAntiAffinityConstraints],
            'end_time': datetime,
            'expiry_time': datetime,
            'location_constraints': str,
            'network_reservation': CreateNetworkResourceReservationRequestNetworkReservation,
            'resource_group_id': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'affinity_constraint': 'affinityConstraint',
            'anti_affinity_constraint': 'antiAffinityConstraint',
            'end_time': 'endTime',
            'expiry_time': 'expiryTime',
            'location_constraints': 'locationConstraints',
            'network_reservation': 'networkReservation',
            'resource_group_id': 'resourceGroupId',
            'start_time': 'startTime'
        }

        self._affinity_constraint = affinity_constraint
        self._anti_affinity_constraint = anti_affinity_constraint
        self._end_time = end_time
        self._expiry_time = expiry_time
        self._location_constraints = location_constraints
        self._network_reservation = network_reservation
        self._resource_group_id = resource_group_id
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt) -> 'CreateNetworkResourceReservationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateNetworkResourceReservationRequest of this CreateNetworkResourceReservationRequest.  # noqa: E501
        :rtype: CreateNetworkResourceReservationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_constraint(self) -> List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]:
        """Gets the affinity_constraint of this CreateNetworkResourceReservationRequest.

        Element with anti-affinity information of the virtual network resources to reserve.  # noqa: E501

        :return: The affinity_constraint of this CreateNetworkResourceReservationRequest.
        :rtype: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        """
        return self._affinity_constraint

    @affinity_constraint.setter
    def affinity_constraint(self, affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]):
        """Sets the affinity_constraint of this CreateNetworkResourceReservationRequest.

        Element with anti-affinity information of the virtual network resources to reserve.  # noqa: E501

        :param affinity_constraint: The affinity_constraint of this CreateNetworkResourceReservationRequest.
        :type affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        """
        if affinity_constraint is None:
            raise ValueError("Invalid value for `affinity_constraint`, must not be `None`")  # noqa: E501

        self._affinity_constraint = affinity_constraint

    @property
    def anti_affinity_constraint(self) -> List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]:
        """Gets the anti_affinity_constraint of this CreateNetworkResourceReservationRequest.

        If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.  # noqa: E501

        :return: The anti_affinity_constraint of this CreateNetworkResourceReservationRequest.
        :rtype: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        """
        return self._anti_affinity_constraint

    @anti_affinity_constraint.setter
    def anti_affinity_constraint(self, anti_affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]):
        """Sets the anti_affinity_constraint of this CreateNetworkResourceReservationRequest.

        If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.  # noqa: E501

        :param anti_affinity_constraint: The anti_affinity_constraint of this CreateNetworkResourceReservationRequest.
        :type anti_affinity_constraint: List[AllocateComputeRequestAffinityOrAntiAffinityConstraints]
        """
        if anti_affinity_constraint is None:
            raise ValueError("Invalid value for `anti_affinity_constraint`, must not be `None`")  # noqa: E501

        self._anti_affinity_constraint = anti_affinity_constraint

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this CreateNetworkResourceReservationRequest.

        Indication when the reservation ends (when the issuer of the request expects that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.  # noqa: E501

        :return: The end_time of this CreateNetworkResourceReservationRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this CreateNetworkResourceReservationRequest.

        Indication when the reservation ends (when the issuer of the request expects that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.  # noqa: E501

        :param end_time: The end_time of this CreateNetworkResourceReservationRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def expiry_time(self) -> datetime:
        """Gets the expiry_time of this CreateNetworkResourceReservationRequest.

        Indication when the VIM can release the reservation in case no allocation request against this reservation was made.  # noqa: E501

        :return: The expiry_time of this CreateNetworkResourceReservationRequest.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time: datetime):
        """Sets the expiry_time of this CreateNetworkResourceReservationRequest.

        Indication when the VIM can release the reservation in case no allocation request against this reservation was made.  # noqa: E501

        :param expiry_time: The expiry_time of this CreateNetworkResourceReservationRequest.
        :type expiry_time: datetime
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")  # noqa: E501

        self._expiry_time = expiry_time

    @property
    def location_constraints(self) -> str:
        """Gets the location_constraints of this CreateNetworkResourceReservationRequest.

        If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.  # noqa: E501

        :return: The location_constraints of this CreateNetworkResourceReservationRequest.
        :rtype: str
        """
        return self._location_constraints

    @location_constraints.setter
    def location_constraints(self, location_constraints: str):
        """Sets the location_constraints of this CreateNetworkResourceReservationRequest.

        If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.  # noqa: E501

        :param location_constraints: The location_constraints of this CreateNetworkResourceReservationRequest.
        :type location_constraints: str
        """
        if location_constraints is None:
            raise ValueError("Invalid value for `location_constraints`, must not be `None`")  # noqa: E501

        self._location_constraints = location_constraints

    @property
    def network_reservation(self) -> CreateNetworkResourceReservationRequestNetworkReservation:
        """Gets the network_reservation of this CreateNetworkResourceReservationRequest.


        :return: The network_reservation of this CreateNetworkResourceReservationRequest.
        :rtype: CreateNetworkResourceReservationRequestNetworkReservation
        """
        return self._network_reservation

    @network_reservation.setter
    def network_reservation(self, network_reservation: CreateNetworkResourceReservationRequestNetworkReservation):
        """Sets the network_reservation of this CreateNetworkResourceReservationRequest.


        :param network_reservation: The network_reservation of this CreateNetworkResourceReservationRequest.
        :type network_reservation: CreateNetworkResourceReservationRequestNetworkReservation
        """
        if network_reservation is None:
            raise ValueError("Invalid value for `network_reservation`, must not be `None`")  # noqa: E501

        self._network_reservation = network_reservation

    @property
    def resource_group_id(self) -> str:
        """Gets the resource_group_id of this CreateNetworkResourceReservationRequest.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :return: The resource_group_id of this CreateNetworkResourceReservationRequest.
        :rtype: str
        """
        return self._resource_group_id

    @resource_group_id.setter
    def resource_group_id(self, resource_group_id: str):
        """Sets the resource_group_id of this CreateNetworkResourceReservationRequest.

        Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.  # noqa: E501

        :param resource_group_id: The resource_group_id of this CreateNetworkResourceReservationRequest.
        :type resource_group_id: str
        """
        if resource_group_id is None:
            raise ValueError("Invalid value for `resource_group_id`, must not be `None`")  # noqa: E501

        self._resource_group_id = resource_group_id

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this CreateNetworkResourceReservationRequest.

        Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.  # noqa: E501

        :return: The start_time of this CreateNetworkResourceReservationRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this CreateNetworkResourceReservationRequest.

        Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.  # noqa: E501

        :param start_time: The start_time of this CreateNetworkResourceReservationRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time
