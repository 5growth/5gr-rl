# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.interface_descriptor import InterfaceDescriptor
from mtp_plugin_kubernetes.models.traffic_filter import TrafficFilter


class TrafficRuleDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, traffic_rule_id: str=None, filter_type: str=None, priority: float=None, traffic_filter: List[TrafficFilter]=None, action: str=None, dst_interface: List[InterfaceDescriptor]=None):  # noqa: E501
        """TrafficRuleDescriptor - a model defined in Swagger

        :param traffic_rule_id: The traffic_rule_id of this TrafficRuleDescriptor.  # noqa: E501
        :type traffic_rule_id: str
        :param filter_type: The filter_type of this TrafficRuleDescriptor.  # noqa: E501
        :type filter_type: str
        :param priority: The priority of this TrafficRuleDescriptor.  # noqa: E501
        :type priority: float
        :param traffic_filter: The traffic_filter of this TrafficRuleDescriptor.  # noqa: E501
        :type traffic_filter: List[TrafficFilter]
        :param action: The action of this TrafficRuleDescriptor.  # noqa: E501
        :type action: str
        :param dst_interface: The dst_interface of this TrafficRuleDescriptor.  # noqa: E501
        :type dst_interface: List[InterfaceDescriptor]
        """
        self.swagger_types = {
            'traffic_rule_id': str,
            'filter_type': str,
            'priority': float,
            'traffic_filter': List[TrafficFilter],
            'action': str,
            'dst_interface': List[InterfaceDescriptor]
        }

        self.attribute_map = {
            'traffic_rule_id': 'trafficRuleId',
            'filter_type': 'filterType',
            'priority': 'priority',
            'traffic_filter': 'trafficFilter',
            'action': 'action',
            'dst_interface': 'dstInterface'
        }

        self._traffic_rule_id = traffic_rule_id
        self._filter_type = filter_type
        self._priority = priority
        self._traffic_filter = traffic_filter
        self._action = action
        self._dst_interface = dst_interface

    @classmethod
    def from_dict(cls, dikt) -> 'TrafficRuleDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrafficRuleDescriptor of this TrafficRuleDescriptor.  # noqa: E501
        :rtype: TrafficRuleDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def traffic_rule_id(self) -> str:
        """Gets the traffic_rule_id of this TrafficRuleDescriptor.

        Identifies the traffic rule.  # noqa: E501

        :return: The traffic_rule_id of this TrafficRuleDescriptor.
        :rtype: str
        """
        return self._traffic_rule_id

    @traffic_rule_id.setter
    def traffic_rule_id(self, traffic_rule_id: str):
        """Sets the traffic_rule_id of this TrafficRuleDescriptor.

        Identifies the traffic rule.  # noqa: E501

        :param traffic_rule_id: The traffic_rule_id of this TrafficRuleDescriptor.
        :type traffic_rule_id: str
        """
        if traffic_rule_id is None:
            raise ValueError("Invalid value for `traffic_rule_id`, must not be `None`")  # noqa: E501

        self._traffic_rule_id = traffic_rule_id

    @property
    def filter_type(self) -> str:
        """Gets the filter_type of this TrafficRuleDescriptor.

        Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE->EPC packets and the reverse packets are handled by the same context.  # noqa: E501

        :return: The filter_type of this TrafficRuleDescriptor.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type: str):
        """Sets the filter_type of this TrafficRuleDescriptor.

        Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE->EPC packets and the reverse packets are handled by the same context.  # noqa: E501

        :param filter_type: The filter_type of this TrafficRuleDescriptor.
        :type filter_type: str
        """
        allowed_values = ["FLOW", "PACKET"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    @property
    def priority(self) -> float:
        """Gets the priority of this TrafficRuleDescriptor.

        Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.  # noqa: E501

        :return: The priority of this TrafficRuleDescriptor.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority: float):
        """Sets the priority of this TrafficRuleDescriptor.

        Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.  # noqa: E501

        :param priority: The priority of this TrafficRuleDescriptor.
        :type priority: float
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def traffic_filter(self) -> List[TrafficFilter]:
        """Gets the traffic_filter of this TrafficRuleDescriptor.

        The filter used to identify specific flow/packets that need to be handled by the MEC host.  # noqa: E501

        :return: The traffic_filter of this TrafficRuleDescriptor.
        :rtype: List[TrafficFilter]
        """
        return self._traffic_filter

    @traffic_filter.setter
    def traffic_filter(self, traffic_filter: List[TrafficFilter]):
        """Sets the traffic_filter of this TrafficRuleDescriptor.

        The filter used to identify specific flow/packets that need to be handled by the MEC host.  # noqa: E501

        :param traffic_filter: The traffic_filter of this TrafficRuleDescriptor.
        :type traffic_filter: List[TrafficFilter]
        """
        if traffic_filter is None:
            raise ValueError("Invalid value for `traffic_filter`, must not be `None`")  # noqa: E501

        self._traffic_filter = traffic_filter

    @property
    def action(self) -> str:
        """Gets the action of this TrafficRuleDescriptor.

        Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.  # noqa: E501

        :return: The action of this TrafficRuleDescriptor.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this TrafficRuleDescriptor.

        Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.  # noqa: E501

        :param action: The action of this TrafficRuleDescriptor.
        :type action: str
        """
        allowed_values = ["DROP", "FORWARD", "DECAPSULATED", "FORWARD_AS_IS", "PASSTHROUGH", "DUPLICATED_DECAPSULATED", "DUPLICATE_AS_IS"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def dst_interface(self) -> List[InterfaceDescriptor]:
        """Gets the dst_interface of this TrafficRuleDescriptor.

        Describes the destination interface information, if the action is FORWARD. Some applications (e.g. inline/tap) require two interfaces, where the first is on the UE side and the second is on the EPC side.  # noqa: E501

        :return: The dst_interface of this TrafficRuleDescriptor.
        :rtype: List[InterfaceDescriptor]
        """
        return self._dst_interface

    @dst_interface.setter
    def dst_interface(self, dst_interface: List[InterfaceDescriptor]):
        """Sets the dst_interface of this TrafficRuleDescriptor.

        Describes the destination interface information, if the action is FORWARD. Some applications (e.g. inline/tap) require two interfaces, where the first is on the UE side and the second is on the EPC side.  # noqa: E501

        :param dst_interface: The dst_interface of this TrafficRuleDescriptor.
        :type dst_interface: List[InterfaceDescriptor]
        """

        self._dst_interface = dst_interface
