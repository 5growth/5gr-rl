# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mtp_plugin_kubernetes.models.base_model_ import Model
from mtp_plugin_kubernetes import util
from mtp_plugin_kubernetes.models.category_ref import CategoryRef
from mtp_plugin_kubernetes.models.transport_dependency import TransportDependency


class ServiceDependency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ser_name: str=None, ser_category: CategoryRef=None, version: str=None, ser_transport_dependencies: List[TransportDependency]=None, requested_permissions: object=None):  # noqa: E501
        """ServiceDependency - a model defined in Swagger

        :param ser_name: The ser_name of this ServiceDependency.  # noqa: E501
        :type ser_name: str
        :param ser_category: The ser_category of this ServiceDependency.  # noqa: E501
        :type ser_category: CategoryRef
        :param version: The version of this ServiceDependency.  # noqa: E501
        :type version: str
        :param ser_transport_dependencies: The ser_transport_dependencies of this ServiceDependency.  # noqa: E501
        :type ser_transport_dependencies: List[TransportDependency]
        :param requested_permissions: The requested_permissions of this ServiceDependency.  # noqa: E501
        :type requested_permissions: object
        """
        self.swagger_types = {
            'ser_name': str,
            'ser_category': CategoryRef,
            'version': str,
            'ser_transport_dependencies': List[TransportDependency],
            'requested_permissions': object
        }

        self.attribute_map = {
            'ser_name': 'serName',
            'ser_category': 'serCategory',
            'version': 'version',
            'ser_transport_dependencies': 'serTransportDependencies',
            'requested_permissions': 'requestedPermissions'
        }

        self._ser_name = ser_name
        self._ser_category = ser_category
        self._version = version
        self._ser_transport_dependencies = ser_transport_dependencies
        self._requested_permissions = requested_permissions

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDependency of this ServiceDependency.  # noqa: E501
        :rtype: ServiceDependency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ser_name(self) -> str:
        """Gets the ser_name of this ServiceDependency.

        The name of the service, for example, RNIS, LocationService, etc.  # noqa: E501

        :return: The ser_name of this ServiceDependency.
        :rtype: str
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name: str):
        """Sets the ser_name of this ServiceDependency.

        The name of the service, for example, RNIS, LocationService, etc.  # noqa: E501

        :param ser_name: The ser_name of this ServiceDependency.
        :type ser_name: str
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

        self._ser_name = ser_name

    @property
    def ser_category(self) -> CategoryRef:
        """Gets the ser_category of this ServiceDependency.


        :return: The ser_category of this ServiceDependency.
        :rtype: CategoryRef
        """
        return self._ser_category

    @ser_category.setter
    def ser_category(self, ser_category: CategoryRef):
        """Sets the ser_category of this ServiceDependency.


        :param ser_category: The ser_category of this ServiceDependency.
        :type ser_category: CategoryRef
        """

        self._ser_category = ser_category

    @property
    def version(self) -> str:
        """Gets the version of this ServiceDependency.

        The version of the service.  # noqa: E501

        :return: The version of this ServiceDependency.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ServiceDependency.

        The version of the service.  # noqa: E501

        :param version: The version of this ServiceDependency.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def ser_transport_dependencies(self) -> List[TransportDependency]:
        """Gets the ser_transport_dependencies of this ServiceDependency.

        Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. This attribute indicates groups of transport bindings that a service-consuming ME application supports for the consumption of the ME service defined by this ServiceDependency structure. If at leastone of the indicated groups is supported by the service it may be consumed by the application.  # noqa: E501

        :return: The ser_transport_dependencies of this ServiceDependency.
        :rtype: List[TransportDependency]
        """
        return self._ser_transport_dependencies

    @ser_transport_dependencies.setter
    def ser_transport_dependencies(self, ser_transport_dependencies: List[TransportDependency]):
        """Sets the ser_transport_dependencies of this ServiceDependency.

        Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. This attribute indicates groups of transport bindings that a service-consuming ME application supports for the consumption of the ME service defined by this ServiceDependency structure. If at leastone of the indicated groups is supported by the service it may be consumed by the application.  # noqa: E501

        :param ser_transport_dependencies: The ser_transport_dependencies of this ServiceDependency.
        :type ser_transport_dependencies: List[TransportDependency]
        """

        self._ser_transport_dependencies = ser_transport_dependencies

    @property
    def requested_permissions(self) -> object:
        """Gets the requested_permissions of this ServiceDependency.

        Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009. The format of this attribute is left for the data model design stage.  # noqa: E501

        :return: The requested_permissions of this ServiceDependency.
        :rtype: object
        """
        return self._requested_permissions

    @requested_permissions.setter
    def requested_permissions(self, requested_permissions: object):
        """Sets the requested_permissions of this ServiceDependency.

        Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009. The format of this attribute is left for the data model design stage.  # noqa: E501

        :param requested_permissions: The requested_permissions of this ServiceDependency.
        :type requested_permissions: object
        """

        self._requested_permissions = requested_permissions
