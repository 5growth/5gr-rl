# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.transport_descriptor import TransportDescriptor  # noqa: F401,E501
from swagger_server import util


class ServiceDescriptorTransportsSupported(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, transport: TransportDescriptor=None, serializers: str=None):  # noqa: E501
        """ServiceDescriptorTransportsSupported - a model defined in Swagger

        :param transport: The transport of this ServiceDescriptorTransportsSupported.  # noqa: E501
        :type transport: TransportDescriptor
        :param serializers: The serializers of this ServiceDescriptorTransportsSupported.  # noqa: E501
        :type serializers: str
        """
        self.swagger_types = {
            'transport': TransportDescriptor,
            'serializers': str
        }

        self.attribute_map = {
            'transport': 'transport',
            'serializers': 'serializers'
        }

        self._transport = transport
        self._serializers = serializers

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDescriptorTransportsSupported':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDescriptor_transportsSupported of this ServiceDescriptorTransportsSupported.  # noqa: E501
        :rtype: ServiceDescriptorTransportsSupported
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transport(self) -> TransportDescriptor:
        """Gets the transport of this ServiceDescriptorTransportsSupported.


        :return: The transport of this ServiceDescriptorTransportsSupported.
        :rtype: TransportDescriptor
        """
        return self._transport

    @transport.setter
    def transport(self, transport: TransportDescriptor):
        """Sets the transport of this ServiceDescriptorTransportsSupported.


        :param transport: The transport of this ServiceDescriptorTransportsSupported.
        :type transport: TransportDescriptor
        """

        self._transport = transport

    @property
    def serializers(self) -> str:
        """Gets the serializers of this ServiceDescriptorTransportsSupported.

        Information about the serializers in this binding, as defined in the SerializerTypes type in ETSI GS MEC 011.  # noqa: E501

        :return: The serializers of this ServiceDescriptorTransportsSupported.
        :rtype: str
        """
        return self._serializers

    @serializers.setter
    def serializers(self, serializers: str):
        """Sets the serializers of this ServiceDescriptorTransportsSupported.

        Information about the serializers in this binding, as defined in the SerializerTypes type in ETSI GS MEC 011.  # noqa: E501

        :param serializers: The serializers of this ServiceDescriptorTransportsSupported.
        :type serializers: str
        """
        allowed_values = ["JSON", "XML", "PROTOBUF3"]  # noqa: E501
        if serializers not in allowed_values:
            raise ValueError(
                "Invalid value for `serializers` ({0}), must be one of {1}"
                .format(serializers, allowed_values)
            )

        self._serializers = serializers
