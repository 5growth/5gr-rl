# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TransportDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, protocol: str=None, version: str=None, security: object=None):  # noqa: E501
        """TransportDescriptor - a model defined in Swagger

        :param type: The type of this TransportDescriptor.  # noqa: E501
        :type type: str
        :param protocol: The protocol of this TransportDescriptor.  # noqa: E501
        :type protocol: str
        :param version: The version of this TransportDescriptor.  # noqa: E501
        :type version: str
        :param security: The security of this TransportDescriptor.  # noqa: E501
        :type security: object
        """
        self.swagger_types = {
            'type': str,
            'protocol': str,
            'version': str,
            'security': object
        }

        self.attribute_map = {
            'type': 'type',
            'protocol': 'protocol',
            'version': 'version',
            'security': 'security'
        }

        self._type = type
        self._protocol = protocol
        self._version = version
        self._security = security

    @classmethod
    def from_dict(cls, dikt) -> 'TransportDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TransportDescriptor of this TransportDescriptor.  # noqa: E501
        :rtype: TransportDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this TransportDescriptor.

        Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.  # noqa: E501

        :return: The type of this TransportDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TransportDescriptor.

        Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.  # noqa: E501

        :param type: The type of this TransportDescriptor.
        :type type: str
        """
        allowed_values = ["REST_HTTP", "MB_TOPIC_BASED", "MB_ROUTING", "MB_PUBSUB", "RPC", "RPC_STREAMING", "WEBSOCKET"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def protocol(self) -> str:
        """Gets the protocol of this TransportDescriptor.

        The name of the protocol used. Shall be set to \"HTTP\" for a REST API.  # noqa: E501

        :return: The protocol of this TransportDescriptor.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this TransportDescriptor.

        The name of the protocol used. Shall be set to \"HTTP\" for a REST API.  # noqa: E501

        :param protocol: The protocol of this TransportDescriptor.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def version(self) -> str:
        """Gets the version of this TransportDescriptor.

        The version of the protocol used.  # noqa: E501

        :return: The version of this TransportDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this TransportDescriptor.

        The version of the protocol used.  # noqa: E501

        :param version: The version of this TransportDescriptor.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def security(self) -> object:
        """Gets the security of this TransportDescriptor.

        Information about the security used by the transport in ETSI GS MEC 011. (not implemented)  # noqa: E501

        :return: The security of this TransportDescriptor.
        :rtype: object
        """
        return self._security

    @security.setter
    def security(self, security: object):
        """Sets the security of this TransportDescriptor.

        Information about the security used by the transport in ETSI GS MEC 011. (not implemented)  # noqa: E501

        :param security: The security of this TransportDescriptor.
        :type security: object
        """
        if security is None:
            raise ValueError("Invalid value for `security`, must not be `None`")  # noqa: E501

        self._security = security
