# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LatencyDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, time_unit: str=None, latency: float=None):  # noqa: E501
        """LatencyDescriptor - a model defined in Swagger

        :param time_unit: The time_unit of this LatencyDescriptor.  # noqa: E501
        :type time_unit: str
        :param latency: The latency of this LatencyDescriptor.  # noqa: E501
        :type latency: float
        """
        self.swagger_types = {
            'time_unit': str,
            'latency': float
        }

        self.attribute_map = {
            'time_unit': 'timeUnit',
            'latency': 'latency'
        }

        self._time_unit = time_unit
        self._latency = latency

    @classmethod
    def from_dict(cls, dikt) -> 'LatencyDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LatencyDescriptor of this LatencyDescriptor.  # noqa: E501
        :rtype: LatencyDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_unit(self) -> str:
        """Gets the time_unit of this LatencyDescriptor.

        Time unit, e.g., ms  # noqa: E501

        :return: The time_unit of this LatencyDescriptor.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit: str):
        """Sets the time_unit of this LatencyDescriptor.

        Time unit, e.g., ms  # noqa: E501

        :param time_unit: The time_unit of this LatencyDescriptor.
        :type time_unit: str
        """
        if time_unit is None:
            raise ValueError("Invalid value for `time_unit`, must not be `None`")  # noqa: E501

        self._time_unit = time_unit

    @property
    def latency(self) -> float:
        """Gets the latency of this LatencyDescriptor.

        The value of the latency  # noqa: E501

        :return: The latency of this LatencyDescriptor.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency: float):
        """Sets the latency of this LatencyDescriptor.

        The value of the latency  # noqa: E501

        :param latency: The latency of this LatencyDescriptor.
        :type latency: float
        """
        if latency is None:
            raise ValueError("Invalid value for `latency`, must not be `None`")  # noqa: E501

        self._latency = latency
