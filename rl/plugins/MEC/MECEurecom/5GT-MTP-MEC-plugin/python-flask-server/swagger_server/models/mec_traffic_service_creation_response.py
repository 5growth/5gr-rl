# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MECTrafficServiceCreationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None):  # noqa: E501
        """MECTrafficServiceCreationResponse - a model defined in Swagger

        :param request_id: The request_id of this MECTrafficServiceCreationResponse.  # noqa: E501
        :type request_id: str
        """
        self.swagger_types = {
            'request_id': str
        }

        self.attribute_map = {
            'request_id': 'RequestId'
        }

        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt) -> 'MECTrafficServiceCreationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MECTrafficServiceCreationResponse of this MECTrafficServiceCreationResponse.  # noqa: E501
        :rtype: MECTrafficServiceCreationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self) -> str:
        """Gets the request_id of this MECTrafficServiceCreationResponse.

        Request identifier assigned by the MEC plugin. This will be used for future queries or service deletion requests.  # noqa: E501

        :return: The request_id of this MECTrafficServiceCreationResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this MECTrafficServiceCreationResponse.

        Request identifier assigned by the MEC plugin. This will be used for future queries or service deletion requests.  # noqa: E501

        :param request_id: The request_id of this MECTrafficServiceCreationResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id
