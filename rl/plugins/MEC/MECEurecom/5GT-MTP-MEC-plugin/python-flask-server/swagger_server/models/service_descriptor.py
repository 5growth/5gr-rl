# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.category_ref import CategoryRef  # noqa: F401,E501
from swagger_server.models.service_descriptor_transports_supported import ServiceDescriptorTransportsSupported  # noqa: F401,E501
from swagger_server import util


class ServiceDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ser_name: str=None, ser_category: CategoryRef=None, version: str=None, transports_supported: ServiceDescriptorTransportsSupported=None):  # noqa: E501
        """ServiceDescriptor - a model defined in Swagger

        :param ser_name: The ser_name of this ServiceDescriptor.  # noqa: E501
        :type ser_name: str
        :param ser_category: The ser_category of this ServiceDescriptor.  # noqa: E501
        :type ser_category: CategoryRef
        :param version: The version of this ServiceDescriptor.  # noqa: E501
        :type version: str
        :param transports_supported: The transports_supported of this ServiceDescriptor.  # noqa: E501
        :type transports_supported: ServiceDescriptorTransportsSupported
        """
        self.swagger_types = {
            'ser_name': str,
            'ser_category': CategoryRef,
            'version': str,
            'transports_supported': ServiceDescriptorTransportsSupported
        }

        self.attribute_map = {
            'ser_name': 'serName',
            'ser_category': 'serCategory',
            'version': 'version',
            'transports_supported': 'transportsSupported'
        }

        self._ser_name = ser_name
        self._ser_category = ser_category
        self._version = version
        self._transports_supported = transports_supported

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDescriptor of this ServiceDescriptor.  # noqa: E501
        :rtype: ServiceDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ser_name(self) -> str:
        """Gets the ser_name of this ServiceDescriptor.

        The name of the service, for example, RNIS, LocationService, etc.  # noqa: E501

        :return: The ser_name of this ServiceDescriptor.
        :rtype: str
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name: str):
        """Sets the ser_name of this ServiceDescriptor.

        The name of the service, for example, RNIS, LocationService, etc.  # noqa: E501

        :param ser_name: The ser_name of this ServiceDescriptor.
        :type ser_name: str
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

        self._ser_name = ser_name

    @property
    def ser_category(self) -> CategoryRef:
        """Gets the ser_category of this ServiceDescriptor.


        :return: The ser_category of this ServiceDescriptor.
        :rtype: CategoryRef
        """
        return self._ser_category

    @ser_category.setter
    def ser_category(self, ser_category: CategoryRef):
        """Sets the ser_category of this ServiceDescriptor.


        :param ser_category: The ser_category of this ServiceDescriptor.
        :type ser_category: CategoryRef
        """

        self._ser_category = ser_category

    @property
    def version(self) -> str:
        """Gets the version of this ServiceDescriptor.

        The version of the service.  # noqa: E501

        :return: The version of this ServiceDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ServiceDescriptor.

        The version of the service.  # noqa: E501

        :param version: The version of this ServiceDescriptor.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def transports_supported(self) -> ServiceDescriptorTransportsSupported:
        """Gets the transports_supported of this ServiceDescriptor.


        :return: The transports_supported of this ServiceDescriptor.
        :rtype: ServiceDescriptorTransportsSupported
        """
        return self._transports_supported

    @transports_supported.setter
    def transports_supported(self, transports_supported: ServiceDescriptorTransportsSupported):
        """Sets the transports_supported of this ServiceDescriptor.


        :param transports_supported: The transports_supported of this ServiceDescriptor.
        :type transports_supported: ServiceDescriptorTransportsSupported
        """

        self._transports_supported = transports_supported
