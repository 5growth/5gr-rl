---
swagger: "2.0"
info:
  description: "Northbound REST API of the MEC plugin."
  version: "1"
  title: "MEC Plugin API"
host: "127.0.0.1:8082"
basePath: "/MEC/v1"
schemes:
- "http"
paths:
  /service/requests:
    get:
      summary: "Retrieve a list of MEC service requests."
      description: "Retrieve a list of MEC service requests."
      operationId: "service_requests_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "List of MEC service requests."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MECTrafficServiceCreationRequest"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Create MEC service rules."
      description: "Create MEC service rules."
      operationId: "service_requests_post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "mecTrafficServiceCreationRequest"
        description: "Information about the MEC app, including required services,\
          \ traffic rules, etc."
        required: true
        schema:
          $ref: "#/definitions/MECTrafficServiceCreationRequest"
      responses:
        201:
          description: "MEC service created successfully."
          schema:
            $ref: "#/definitions/MECTrafficServiceCreationResponse"
        401:
          description: "MEC service creation failed."
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /service/requests/{RequestId}:
    get:
      summary: "Retrieve information about a MEC service request."
      description: "Retrieve information about a MEC service request."
      operationId: "service_requests_request_id_get"
      produces:
      - "application/json"
      parameters:
      - name: "RequestId"
        in: "path"
        description: "Request identifier."
        required: true
        type: "string"
      responses:
        200:
          description: "MEC service request information."
          schema:
            $ref: "#/definitions/MECTrafficServiceCreationRequest"
        404:
          description: "Service not found."
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Delete service."
      description: "Delete service identified by the given request ID."
      operationId: "service_requests_request_id_delete"
      produces:
      - "application/json"
      parameters:
      - name: "RequestId"
        in: "path"
        description: "Request identifier."
        required: true
        type: "string"
      responses:
        201:
          description: "MEC service deleted successfully."
        404:
          description: "Service not found."
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /service/regions:
    get:
      summary: "Retrieve a list of all covered regions."
      description: "Retrieve a list of MEC regions, reporting their identifiers and\
        \ location information."
      operationId: "service_regions_get"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "List of regions."
          schema:
            type: "object"
            properties:
              Regions:
                type: "array"
                items:
                  $ref: "#/definitions/MECRegionInfo"
        400:
          description: "Bad request"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /service/regions/{RegionId}:
    get:
      summary: "Retrieve a list of MEC service requests for the given region."
      description: "Retrieve a list of MEC service requests for the given region."
      operationId: "service_regions_region_id_get"
      produces:
      - "application/json"
      parameters:
      - name: "RegionId"
        in: "path"
        description: "Region identifier."
        required: true
        type: "string"
      responses:
        200:
          description: "List of MEC service requests."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MECTrafficServiceCreationRequest"
        404:
          description: "Region not found."
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
definitions:
  AddressData:
    required:
    - "addressType"
    properties:
      addressType:
        type: "string"
        description: "Describes the type of the address to be assigned to the CP instantiated\
          \ from the parent CPD. The content type shall be aligned with the address\
          \ type supported by the layerProtocol attribute of the parent CPD."
        enum:
        - "MAC"
        - "IPV4"
        - "IPV6"
      l2AddressData:
        type: "object"
        description: "Provides the information on the MAC addresses to be assigned\
          \ to the CP(s) instantiated from the parent CPD. Shall be present when the\
          \ addressType is MAC address."
        properties: {}
      l3AddressData:
        type: "object"
        description: "Provides the information on the IP addresses to be assigned\
          \ to the CP instantiated from the parent CPD. Shall be present when the\
          \ addressType is IP address."
        properties: {}
  CategoryRef:
    required:
    - "href"
    - "id"
    - "name"
    - "version"
    properties:
      href:
        type: "string"
        description: "Reference of the catalogue."
      id:
        type: "string"
        description: "Unique identifier of the category."
      name:
        type: "string"
        description: "Name of the category."
      version:
        type: "string"
        description: "Category version."
    description: "A category reference of the service."
    example:
      name: "name"
      href: "href"
      id: "id"
      version: "version"
  ServiceDescriptor:
    required:
    - "serName"
    - "version"
    properties:
      serName:
        type: "string"
        description: "The name of the service, for example, RNIS, LocationService,\
          \ etc."
      serCategory:
        $ref: "#/definitions/CategoryRef"
      version:
        type: "string"
        description: "The version of the service."
      transportsSupported:
        $ref: "#/definitions/ServiceDescriptor_transportsSupported"
    example:
      serCategory:
        name: "name"
        href: "href"
        id: "id"
        version: "version"
      transportsSupported:
        serializers: "JSON"
        transport:
          protocol: "protocol"
          security: "{}"
          type: "REST_HTTP"
          version: "version"
      serName: "serName"
      version: "version"
  ServiceDependency:
    required:
    - "serName"
    - "version"
    properties:
      serName:
        type: "string"
        description: "The name of the service, for example, RNIS, LocationService,\
          \ etc."
      serCategory:
        $ref: "#/definitions/CategoryRef"
      version:
        type: "string"
        description: "The version of the service."
      serTransportDependencies:
        type: "array"
        description: "Indicates transport and serialization format dependencies of\
          \ consuming the service. Defaults to REST + JSON if absent. This attribute\
          \ indicates groups of transport bindings that a service-consuming ME application\
          \ supports for the consumption of the ME service defined by this ServiceDependency\
          \ structure. If at leastone of the indicated groups is supported by the\
          \ service it may be consumed by the application."
        items:
          $ref: "#/definitions/TransportDependency"
      requestedPermissions:
        type: "object"
        description: "Requested permissions regarding the access of the application\
          \ to the service. See clause 8.2 of ETSI GS MEC 009. The format of this\
          \ attribute is left for the data model design stage."
        properties: {}
    example:
      serCategory:
        name: "name"
        href: "href"
        id: "id"
        version: "version"
      requestedPermissions: "{}"
      serName: "serName"
      serTransportDependencies:
      - serializers: "JSON"
        transport:
          protocol: "protocol"
          security: "{}"
          type: "REST_HTTP"
          version: "version"
        labels:
        - "labels"
        - "labels"
      - serializers: "JSON"
        transport:
          protocol: "protocol"
          security: "{}"
          type: "REST_HTTP"
          version: "version"
        labels:
        - "labels"
        - "labels"
      version: "version"
  TransportDescriptor:
    required:
    - "protocol"
    - "security"
    - "type"
    - "version"
    properties:
      type:
        type: "string"
        description: "Type of the transport, as defined in the TransportTypes type\
          \ in ETSI GS MEC 011."
        enum:
        - "REST_HTTP"
        - "MB_TOPIC_BASED"
        - "MB_ROUTING"
        - "MB_PUBSUB"
        - "RPC"
        - "RPC_STREAMING"
        - "WEBSOCKET"
      protocol:
        type: "string"
        description: "The name of the protocol used. Shall be set to \"HTTP\" for\
          \ a REST API."
      version:
        type: "string"
        description: "The version of the protocol used."
      security:
        type: "object"
        description: "Information about the security used by the transport in ETSI\
          \ GS MEC 011. (not implemented)"
        properties: {}
    description: "Information about the transport in a transport binding."
    example:
      protocol: "protocol"
      security: "{}"
      type: "REST_HTTP"
      version: "version"
  TransportDependency:
    required:
    - "labels"
    - "serializers"
    - "transport"
    properties:
      transport:
        $ref: "#/definitions/TransportDescriptor"
      serializers:
        type: "string"
        description: "Information about the serializers in this transport binding,\
          \ as defined in the SerializerTypes type in ETSI GS MEC 011. Support for\
          \ at least one of the entries is required in conjunction with the transport."
        enum:
        - "JSON"
        - "XML"
        - "PROTOBUF3"
      labels:
        type: "array"
        description: "Set of labels that allow to define groups of transport bindings."
        items:
          type: "string"
    example:
      serializers: "JSON"
      transport:
        protocol: "protocol"
        security: "{}"
        type: "REST_HTTP"
        version: "version"
      labels:
      - "labels"
      - "labels"
  TunnelInfo:
    required:
    - "tunnelDstAddress"
    - "tunnelSrcAddress"
    - "tunnelType"
    properties:
      tunnelType:
        type: "string"
        description: "TType of tunnel (GTP-U, GRE, etc.)"
        enum:
        - "GTP-U"
        - "GRE"
      tunnelDstAddress:
        type: "string"
        description: "Destination address of the tunnel."
      tunnelSrcAddress:
        type: "string"
        description: "Source address of the tunnel."
      tunnelSpecificData:
        type: "object"
        description: "Parameters specific to the tunnel."
        properties: {}
    example:
      tunnelSrcAddress: "tunnelSrcAddress"
      tunnelType: "GTP-U"
      tunnelSpecificData: "{}"
      tunnelDstAddress: "tunnelDstAddress"
  InterfaceDescriptor:
    required:
    - "interfaceType"
    properties:
      interfaceType:
        type: "string"
        description: "Type of interface (TUNNEL, MAC, IP, etc.)"
        enum:
        - "TUNNEL"
        - "MAC"
        - "IP"
      tunnelInfo:
        $ref: "#/definitions/TunnelInfo"
      srcMACAddress:
        type: "string"
        description: "If the interface type is MAC, the source address identifies\
          \ the MAC address of the interface."
      dstMACAddress:
        type: "string"
        description: "If the interface type is MAC, the destination address identifies\
          \ the MAC address of the interface. Only used for dstInterface."
      dstIPAddress:
        type: "string"
        description: "f the interface type is IP, the destination address identifies\
          \ the IP address of the destination. Only used for dstInterface."
    example:
      interfaceType: "TUNNEL"
      dstIPAddress: "dstIPAddress"
      srcMACAddress: "srcMACAddress"
      dstMACAddress: "dstMACAddress"
      tunnelInfo:
        tunnelSrcAddress: "tunnelSrcAddress"
        tunnelType: "GTP-U"
        tunnelSpecificData: "{}"
        tunnelDstAddress: "tunnelDstAddress"
  TrafficFilter:
    properties:
      srcAddress:
        type: "array"
        description: "An IP address or a range of IP addresses. For IPv4, the IP address\
          \ could be an IP address plus mask, or an individual IP address, or a range\
          \ of IP addresses. For IPv6, the IP address could be an IP prefix, or a\
          \ range of IP prefixes."
        items:
          type: "string"
      dstAddress:
        type: "array"
        description: "An IP address or a range of IP addresses. For IPv4, the IP address\
          \ could be an IP address plus mask, or an individual IP address, or a range\
          \ of IP addresses. For IPv6, the IP address could be an IP prefix, or a\
          \ range of IP prefixes."
        items:
          type: "string"
      srcPort:
        type: "array"
        description: "A port or a range of ports."
        items:
          type: "string"
      dstPort:
        type: "array"
        description: "A port or a range of ports."
        items:
          type: "string"
      Protocol:
        type: "array"
        description: "Specifies the protocol of the traffic rule."
        items:
          type: "string"
      Token:
        type: "array"
        description: "Used for token based traffic rule."
        items:
          type: "string"
      srcTunnelAddress:
        type: "array"
        description: "Used for GTP tunnel based traffic rule."
        items:
          type: "string"
      dstTunnelAddress:
        type: "array"
        description: "Used for GTP tunnel based traffic rule."
        items:
          type: "string"
      srcTunnelPort:
        type: "array"
        description: "Used for GTP tunnel based traffic rule."
        items:
          type: "string"
      dstTunnelPort:
        type: "array"
        description: "Used for GTP tunnel based traffic rule."
        items:
          type: "string"
      qci:
        type: "number"
        description: "Used to match all packets that have the same QCI."
      dscp:
        type: "number"
        description: "Used to match all IPv4 packets that have the same DSCP."
      tc:
        type: "number"
        description: "Used to match all IPv6 packets that have the same TC."
    example:
      srcTunnelPort:
      - "srcTunnelPort"
      - "srcTunnelPort"
      dstAddress:
      - "dstAddress"
      - "dstAddress"
      Token:
      - "Token"
      - "Token"
      srcAddress:
      - "srcAddress"
      - "srcAddress"
      srcPort:
      - "srcPort"
      - "srcPort"
      tc: 5.962133916683182377482808078639209270477294921875
      dstTunnelPort:
      - "dstTunnelPort"
      - "dstTunnelPort"
      dstPort:
      - "dstPort"
      - "dstPort"
      dscp: 1.46581298050294517310021547018550336360931396484375
      qci: 6.02745618307040320615897144307382404804229736328125
      srcTunnelAddress:
      - "srcTunnelAddress"
      - "srcTunnelAddress"
      Protocol:
      - "Protocol"
      - "Protocol"
      dstTunnelAddress:
      - "dstTunnelAddress"
      - "dstTunnelAddress"
  TrafficRuleDescriptor:
    required:
    - "action"
    - "filterType"
    - "priority"
    - "trafficFilter"
    - "trafficRuleId"
    properties:
      trafficRuleId:
        type: "string"
        description: "Identifies the traffic rule."
      filterType:
        type: "string"
        description: "Definition of filter type, i.e., per FLOW or PACKET. If it is\
          \ per FLOW, the filter matches UE->EPC packets and the reverse packets are\
          \ handled by the same context."
        enum:
        - "FLOW"
        - "PACKET"
      priority:
        type: "number"
        description: "Priority of this traffic rule. If traffic rule conflicts, the\
          \ one with higher priority take precedence."
      trafficFilter:
        type: "array"
        description: "The filter used to identify specific flow/packets that need\
          \ to be handled by the MEC host."
        items:
          $ref: "#/definitions/TrafficFilter"
      action:
        type: "string"
        description: "Identifies the action of the ME host data plane, when a packet\
          \ matches the trafficFilter. The example actions include DROP, FORWARD,\
          \ DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS."
        enum:
        - "DROP"
        - "FORWARD"
        - "DECAPSULATED"
        - "FORWARD_AS_IS"
        - "PASSTHROUGH"
        - "DUPLICATED_DECAPSULATED"
        - "DUPLICATE_AS_IS"
      dstInterface:
        type: "array"
        description: "Describes the destination interface information, if the action\
          \ is FORWARD. Some applications (e.g. inline/tap) require two interfaces,\
          \ where the first is on the UE side and the second is on the EPC side."
        items:
          $ref: "#/definitions/InterfaceDescriptor"
    example:
      action: "DROP"
      trafficRuleId: "trafficRuleId"
      dstInterface:
      - interfaceType: "TUNNEL"
        dstIPAddress: "dstIPAddress"
        srcMACAddress: "srcMACAddress"
        dstMACAddress: "dstMACAddress"
        tunnelInfo:
          tunnelSrcAddress: "tunnelSrcAddress"
          tunnelType: "GTP-U"
          tunnelSpecificData: "{}"
          tunnelDstAddress: "tunnelDstAddress"
      - interfaceType: "TUNNEL"
        dstIPAddress: "dstIPAddress"
        srcMACAddress: "srcMACAddress"
        dstMACAddress: "dstMACAddress"
        tunnelInfo:
          tunnelSrcAddress: "tunnelSrcAddress"
          tunnelType: "GTP-U"
          tunnelSpecificData: "{}"
          tunnelDstAddress: "tunnelDstAddress"
      filterType: "FLOW"
      priority: 0.80082819046101150206595775671303272247314453125
      trafficFilter:
      - srcTunnelPort:
        - "srcTunnelPort"
        - "srcTunnelPort"
        dstAddress:
        - "dstAddress"
        - "dstAddress"
        Token:
        - "Token"
        - "Token"
        srcAddress:
        - "srcAddress"
        - "srcAddress"
        srcPort:
        - "srcPort"
        - "srcPort"
        tc: 5.962133916683182377482808078639209270477294921875
        dstTunnelPort:
        - "dstTunnelPort"
        - "dstTunnelPort"
        dstPort:
        - "dstPort"
        - "dstPort"
        dscp: 1.46581298050294517310021547018550336360931396484375
        qci: 6.02745618307040320615897144307382404804229736328125
        srcTunnelAddress:
        - "srcTunnelAddress"
        - "srcTunnelAddress"
        Protocol:
        - "Protocol"
        - "Protocol"
        dstTunnelAddress:
        - "dstTunnelAddress"
        - "dstTunnelAddress"
      - srcTunnelPort:
        - "srcTunnelPort"
        - "srcTunnelPort"
        dstAddress:
        - "dstAddress"
        - "dstAddress"
        Token:
        - "Token"
        - "Token"
        srcAddress:
        - "srcAddress"
        - "srcAddress"
        srcPort:
        - "srcPort"
        - "srcPort"
        tc: 5.962133916683182377482808078639209270477294921875
        dstTunnelPort:
        - "dstTunnelPort"
        - "dstTunnelPort"
        dstPort:
        - "dstPort"
        - "dstPort"
        dscp: 1.46581298050294517310021547018550336360931396484375
        qci: 6.02745618307040320615897144307382404804229736328125
        srcTunnelAddress:
        - "srcTunnelAddress"
        - "srcTunnelAddress"
        Protocol:
        - "Protocol"
        - "Protocol"
        dstTunnelAddress:
        - "dstTunnelAddress"
        - "dstTunnelAddress"
  DNSRuleDescriptor:
    required:
    - "dnsRuleId"
    - "domainName"
    - "ipAddress"
    - "ipAddressType"
    properties:
      dnsRuleId:
        type: "string"
        description: "Identifies the DNS rule."
      domainName:
        type: "string"
        description: "FQDN of the DNS rule."
      ipAddressType:
        type: "string"
        description: "Specifies the IP address type (IP_V6, IP_V4)"
        enum:
        - "IP_V6"
        - "IP_V4"
      ipAddress:
        type: "string"
        description: "IP address given by the DNS rule."
      ttl:
        type: "number"
        description: "Time-to-live value."
    example:
      domainName: "domainName"
      ipAddress: "ipAddress"
      dnsRuleId: "dnsRuleId"
      ttl: 5.63737665663332876420099637471139430999755859375
      ipAddressType: "IP_V6"
  LatencyDescriptor:
    required:
    - "latency"
    - "timeUnit"
    properties:
      timeUnit:
        type: "string"
        description: "Time unit, e.g., ms"
      latency:
        type: "number"
        description: "The value of the latency"
    description: "This is used to describe the maximum latency tolerated by the mobile\
      \ edge application."
    example:
      latency: 2.3021358869347654518833223846741020679473876953125
      timeUnit: "timeUnit"
  MECTrafficServiceCreationRequest:
    required:
    - "RegionId"
    properties:
      RequestId:
        type: "string"
        description: "Identifier of the request, assigned by the MEC plugin at creation\
          \ time."
      RegionId:
        type: "string"
        description: "Identifier of the region where the MEC app will be instantiated."
      appServiceRequired:
        type: "array"
        description: "Describes services a mobile edge application requires to run."
        items:
          $ref: "#/definitions/ServiceDependency"
      appServiceOptional:
        type: "array"
        description: "Describes services a mobile edge application may use if available."
        items:
          $ref: "#/definitions/ServiceDependency"
      appServiceProduced:
        type: "array"
        description: "Describes services a mobile edge application is able to produce\
          \ to the platform or other mobile edge applications. Only relevant for service-producing\
          \ apps."
        items:
          $ref: "#/definitions/ServiceDescriptor"
      transportDependencies:
        type: "array"
        description: "Transports, if any, that this application requires to be provided\
          \ by the platform. These transports will be used by the application to deliver\
          \ services provided by this application. Only relevant for service-producing\
          \ apps."
        items:
          $ref: "#/definitions/TransportDependency"
      appTrafficRule:
        type: "array"
        description: "Describes traffic rules the mobile edge application requires."
        items:
          $ref: "#/definitions/TrafficRuleDescriptor"
      appDNSRule:
        type: "array"
        description: "Describes DNS rules the mobile edge application requires."
        items:
          $ref: "#/definitions/DNSRuleDescriptor"
      appLatency:
        $ref: "#/definitions/LatencyDescriptor"
      status:
        type: "string"
        description: "Status of the request."
        enum:
        - "CREATED"
        - "FAILED"
        - "PENDING"
        - "DELETED"
      createdAt:
        type: "string"
        description: "Timestamp of when service request was created."
      lastModified:
        type: "string"
        description: "Timestamp of when service was last modified (e.g., deleted)."
    example:
      createdAt: "createdAt"
      RequestId: "RequestId"
      appServiceRequired:
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        requestedPermissions: "{}"
        serName: "serName"
        serTransportDependencies:
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        version: "version"
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        requestedPermissions: "{}"
        serName: "serName"
        serTransportDependencies:
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        version: "version"
      appServiceOptional:
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        requestedPermissions: "{}"
        serName: "serName"
        serTransportDependencies:
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        version: "version"
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        requestedPermissions: "{}"
        serName: "serName"
        serTransportDependencies:
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        - serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
          labels:
          - "labels"
          - "labels"
        version: "version"
      transportDependencies:
      - serializers: "JSON"
        transport:
          protocol: "protocol"
          security: "{}"
          type: "REST_HTTP"
          version: "version"
        labels:
        - "labels"
        - "labels"
      - serializers: "JSON"
        transport:
          protocol: "protocol"
          security: "{}"
          type: "REST_HTTP"
          version: "version"
        labels:
        - "labels"
        - "labels"
      appTrafficRule:
      - action: "DROP"
        trafficRuleId: "trafficRuleId"
        dstInterface:
        - interfaceType: "TUNNEL"
          dstIPAddress: "dstIPAddress"
          srcMACAddress: "srcMACAddress"
          dstMACAddress: "dstMACAddress"
          tunnelInfo:
            tunnelSrcAddress: "tunnelSrcAddress"
            tunnelType: "GTP-U"
            tunnelSpecificData: "{}"
            tunnelDstAddress: "tunnelDstAddress"
        - interfaceType: "TUNNEL"
          dstIPAddress: "dstIPAddress"
          srcMACAddress: "srcMACAddress"
          dstMACAddress: "dstMACAddress"
          tunnelInfo:
            tunnelSrcAddress: "tunnelSrcAddress"
            tunnelType: "GTP-U"
            tunnelSpecificData: "{}"
            tunnelDstAddress: "tunnelDstAddress"
        filterType: "FLOW"
        priority: 0.80082819046101150206595775671303272247314453125
        trafficFilter:
        - srcTunnelPort:
          - "srcTunnelPort"
          - "srcTunnelPort"
          dstAddress:
          - "dstAddress"
          - "dstAddress"
          Token:
          - "Token"
          - "Token"
          srcAddress:
          - "srcAddress"
          - "srcAddress"
          srcPort:
          - "srcPort"
          - "srcPort"
          tc: 5.962133916683182377482808078639209270477294921875
          dstTunnelPort:
          - "dstTunnelPort"
          - "dstTunnelPort"
          dstPort:
          - "dstPort"
          - "dstPort"
          dscp: 1.46581298050294517310021547018550336360931396484375
          qci: 6.02745618307040320615897144307382404804229736328125
          srcTunnelAddress:
          - "srcTunnelAddress"
          - "srcTunnelAddress"
          Protocol:
          - "Protocol"
          - "Protocol"
          dstTunnelAddress:
          - "dstTunnelAddress"
          - "dstTunnelAddress"
        - srcTunnelPort:
          - "srcTunnelPort"
          - "srcTunnelPort"
          dstAddress:
          - "dstAddress"
          - "dstAddress"
          Token:
          - "Token"
          - "Token"
          srcAddress:
          - "srcAddress"
          - "srcAddress"
          srcPort:
          - "srcPort"
          - "srcPort"
          tc: 5.962133916683182377482808078639209270477294921875
          dstTunnelPort:
          - "dstTunnelPort"
          - "dstTunnelPort"
          dstPort:
          - "dstPort"
          - "dstPort"
          dscp: 1.46581298050294517310021547018550336360931396484375
          qci: 6.02745618307040320615897144307382404804229736328125
          srcTunnelAddress:
          - "srcTunnelAddress"
          - "srcTunnelAddress"
          Protocol:
          - "Protocol"
          - "Protocol"
          dstTunnelAddress:
          - "dstTunnelAddress"
          - "dstTunnelAddress"
      - action: "DROP"
        trafficRuleId: "trafficRuleId"
        dstInterface:
        - interfaceType: "TUNNEL"
          dstIPAddress: "dstIPAddress"
          srcMACAddress: "srcMACAddress"
          dstMACAddress: "dstMACAddress"
          tunnelInfo:
            tunnelSrcAddress: "tunnelSrcAddress"
            tunnelType: "GTP-U"
            tunnelSpecificData: "{}"
            tunnelDstAddress: "tunnelDstAddress"
        - interfaceType: "TUNNEL"
          dstIPAddress: "dstIPAddress"
          srcMACAddress: "srcMACAddress"
          dstMACAddress: "dstMACAddress"
          tunnelInfo:
            tunnelSrcAddress: "tunnelSrcAddress"
            tunnelType: "GTP-U"
            tunnelSpecificData: "{}"
            tunnelDstAddress: "tunnelDstAddress"
        filterType: "FLOW"
        priority: 0.80082819046101150206595775671303272247314453125
        trafficFilter:
        - srcTunnelPort:
          - "srcTunnelPort"
          - "srcTunnelPort"
          dstAddress:
          - "dstAddress"
          - "dstAddress"
          Token:
          - "Token"
          - "Token"
          srcAddress:
          - "srcAddress"
          - "srcAddress"
          srcPort:
          - "srcPort"
          - "srcPort"
          tc: 5.962133916683182377482808078639209270477294921875
          dstTunnelPort:
          - "dstTunnelPort"
          - "dstTunnelPort"
          dstPort:
          - "dstPort"
          - "dstPort"
          dscp: 1.46581298050294517310021547018550336360931396484375
          qci: 6.02745618307040320615897144307382404804229736328125
          srcTunnelAddress:
          - "srcTunnelAddress"
          - "srcTunnelAddress"
          Protocol:
          - "Protocol"
          - "Protocol"
          dstTunnelAddress:
          - "dstTunnelAddress"
          - "dstTunnelAddress"
        - srcTunnelPort:
          - "srcTunnelPort"
          - "srcTunnelPort"
          dstAddress:
          - "dstAddress"
          - "dstAddress"
          Token:
          - "Token"
          - "Token"
          srcAddress:
          - "srcAddress"
          - "srcAddress"
          srcPort:
          - "srcPort"
          - "srcPort"
          tc: 5.962133916683182377482808078639209270477294921875
          dstTunnelPort:
          - "dstTunnelPort"
          - "dstTunnelPort"
          dstPort:
          - "dstPort"
          - "dstPort"
          dscp: 1.46581298050294517310021547018550336360931396484375
          qci: 6.02745618307040320615897144307382404804229736328125
          srcTunnelAddress:
          - "srcTunnelAddress"
          - "srcTunnelAddress"
          Protocol:
          - "Protocol"
          - "Protocol"
          dstTunnelAddress:
          - "dstTunnelAddress"
          - "dstTunnelAddress"
      appLatency:
        latency: 2.3021358869347654518833223846741020679473876953125
        timeUnit: "timeUnit"
      appDNSRule:
      - domainName: "domainName"
        ipAddress: "ipAddress"
        dnsRuleId: "dnsRuleId"
        ttl: 5.63737665663332876420099637471139430999755859375
        ipAddressType: "IP_V6"
      - domainName: "domainName"
        ipAddress: "ipAddress"
        dnsRuleId: "dnsRuleId"
        ttl: 5.63737665663332876420099637471139430999755859375
        ipAddressType: "IP_V6"
      appServiceProduced:
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        transportsSupported:
          serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
        serName: "serName"
        version: "version"
      - serCategory:
          name: "name"
          href: "href"
          id: "id"
          version: "version"
        transportsSupported:
          serializers: "JSON"
          transport:
            protocol: "protocol"
            security: "{}"
            type: "REST_HTTP"
            version: "version"
        serName: "serName"
        version: "version"
      RegionId: "RegionId"
      lastModified: "lastModified"
      status: "CREATED"
  MECTrafficServiceCreationResponse:
    required:
    - "RequestId"
    properties:
      RequestId:
        type: "string"
        description: "Request identifier assigned by the MEC plugin. This will be\
          \ used for future queries or service deletion requests."
    example:
      RequestId: "RequestId"
  LocationInfo:
    required:
    - "altitude"
    - "latitude"
    - "longitude"
    - "range"
    properties:
      latitude:
        type: "number"
        description: "Latitude coordinate"
      longitude:
        type: "number"
        description: "Longitude coordinate"
      altitude:
        type: "number"
        description: "Altitude coordinate"
      range:
        type: "number"
        description: "Coverage radius (in km)"
    description: "Geographical location info of a region, expressed as a circle centered\
      \ at specific coordinates and with a specified range."
    example:
      altitude: 1.46581298050294517310021547018550336360931396484375
      latitude: 0.80082819046101150206595775671303272247314453125
      range: 5.962133916683182377482808078639209270477294921875
      longitude: 6.02745618307040320615897144307382404804229736328125
  MECRegionInfo:
    properties:
      MECRegionInfo:
        $ref: "#/definitions/MECRegionInfo_MECRegionInfo"
    description: "Information about a region."
    example:
      MECRegionInfo:
        RegionId: "RegionId"
        LocationInfo:
          altitude: 1.46581298050294517310021547018550336360931396484375
          latitude: 0.80082819046101150206595775671303272247314453125
          range: 5.962133916683182377482808078639209270477294921875
          longitude: 6.02745618307040320615897144307382404804229736328125
  inline_response_200:
    properties:
      Regions:
        type: "array"
        items:
          $ref: "#/definitions/MECRegionInfo"
    example:
      Regions:
      - MECRegionInfo:
          RegionId: "RegionId"
          LocationInfo:
            altitude: 1.46581298050294517310021547018550336360931396484375
            latitude: 0.80082819046101150206595775671303272247314453125
            range: 5.962133916683182377482808078639209270477294921875
            longitude: 6.02745618307040320615897144307382404804229736328125
      - MECRegionInfo:
          RegionId: "RegionId"
          LocationInfo:
            altitude: 1.46581298050294517310021547018550336360931396484375
            latitude: 0.80082819046101150206595775671303272247314453125
            range: 5.962133916683182377482808078639209270477294921875
            longitude: 6.02745618307040320615897144307382404804229736328125
  ServiceDescriptor_transportsSupported:
    properties:
      transport:
        $ref: "#/definitions/TransportDescriptor"
      serializers:
        type: "string"
        description: "Information about the serializers in this binding, as defined\
          \ in the SerializerTypes type in ETSI GS MEC 011."
        enum:
        - "JSON"
        - "XML"
        - "PROTOBUF3"
    description: "Indicates transport and serialization formats supported made available\
      \ to the service-consuming application. Defaults to REST+JSON if absent."
    example:
      serializers: "JSON"
      transport:
        protocol: "protocol"
        security: "{}"
        type: "REST_HTTP"
        version: "version"
  MECRegionInfo_MECRegionInfo:
    properties:
      RegionId:
        type: "string"
        description: "Identifier of the region."
      LocationInfo:
        $ref: "#/definitions/LocationInfo"
    example:
      RegionId: "RegionId"
      LocationInfo:
        altitude: 1.46581298050294517310021547018550336360931396484375
        latitude: 0.80082819046101150206595775671303272247314453125
        range: 5.962133916683182377482808078639209270477294921875
        longitude: 6.02745618307040320615897144307382404804229736328125
