/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rl.extinterface.nbi.swagger.model.MetaData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * If subnet types are created satisfactorily, it contains the data relative to the allocated subnet. Cardinality can be \&quot;0\&quot; if the request did not include creation of such type of resource.
 */
@ApiModel(description = "If subnet types are created satisfactorily, it contains the data relative to the allocated subnet. Cardinality can be \"0\" if the request did not include creation of such type of resource.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class AllocateNetworkResultSubnetData {
  @SerializedName("addressPool")
  private List<Integer> addressPool = new ArrayList<Integer>();

  @SerializedName("cidr")
  private String cidr = null;

  @SerializedName("gatewayIp")
  private String gatewayIp = null;

  @SerializedName("ipVersion")
  private String ipVersion = null;

  @SerializedName("isDhcpEnabled")
  private Boolean isDhcpEnabled = null;

  @SerializedName("metadata")
  private MetaData metadata = null;

  @SerializedName("networkId")
  private String networkId = null;

  @SerializedName("operationalState")
  private String operationalState = null;

  @SerializedName("resourceId")
  private String resourceId = null;

  public AllocateNetworkResultSubnetData addressPool(List<Integer> addressPool) {
    this.addressPool = addressPool;
    return this;
  }

  public AllocateNetworkResultSubnetData addAddressPoolItem(Integer addressPoolItem) {
    this.addressPool.add(addressPoolItem);
    return this;
  }

   /**
   * Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.
   * @return addressPool
  **/
  @ApiModelProperty(required = true, value = "Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.")
  public List<Integer> getAddressPool() {
    return addressPool;
  }

  public void setAddressPool(List<Integer> addressPool) {
    this.addressPool = addressPool;
  }

  public AllocateNetworkResultSubnetData cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

   /**
   * The CIDR of the network/subnetwork, i.e. network address and subnet mask.
   * @return cidr
  **/
  @ApiModelProperty(required = true, value = "The CIDR of the network/subnetwork, i.e. network address and subnet mask.")
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }

  public AllocateNetworkResultSubnetData gatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
    return this;
  }

   /**
   * The IP address of the network/subnetwork gateway.
   * @return gatewayIp
  **/
  @ApiModelProperty(required = true, value = "The IP address of the network/subnetwork gateway.")
  public String getGatewayIp() {
    return gatewayIp;
  }

  public void setGatewayIp(String gatewayIp) {
    this.gatewayIp = gatewayIp;
  }

  public AllocateNetworkResultSubnetData ipVersion(String ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

   /**
   * The IP version of the network/subnetwork.
   * @return ipVersion
  **/
  @ApiModelProperty(required = true, value = "The IP version of the network/subnetwork.")
  public String getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(String ipVersion) {
    this.ipVersion = ipVersion;
  }

  public AllocateNetworkResultSubnetData isDhcpEnabled(Boolean isDhcpEnabled) {
    this.isDhcpEnabled = isDhcpEnabled;
    return this;
  }

   /**
   * True when DHCP is enabled for this network/subnetwork, or false otherwise.
   * @return isDhcpEnabled
  **/
  @ApiModelProperty(required = true, value = "True when DHCP is enabled for this network/subnetwork, or false otherwise.")
  public Boolean isIsDhcpEnabled() {
    return isDhcpEnabled;
  }

  public void setIsDhcpEnabled(Boolean isDhcpEnabled) {
    this.isDhcpEnabled = isDhcpEnabled;
  }

  public AllocateNetworkResultSubnetData metadata(MetaData metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public MetaData getMetadata() {
    return metadata;
  }

  public void setMetadata(MetaData metadata) {
    this.metadata = metadata;
  }

  public AllocateNetworkResultSubnetData networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

   /**
   * The identifier of the virtualised network that the virtualised sub-network is attached to. The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather than a subnetwork.
   * @return networkId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the virtualised network that the virtualised sub-network is attached to. The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather than a subnetwork.")
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }

  public AllocateNetworkResultSubnetData operationalState(String operationalState) {
    this.operationalState = operationalState;
    return this;
  }

   /**
   * The operational state of the virtualised sub-network.
   * @return operationalState
  **/
  @ApiModelProperty(required = true, value = "The operational state of the virtualised sub-network.")
  public String getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(String operationalState) {
    this.operationalState = operationalState;
  }

  public AllocateNetworkResultSubnetData resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Identifier of the virtualised sub-network.
   * @return resourceId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the virtualised sub-network.")
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocateNetworkResultSubnetData allocateNetworkResultSubnetData = (AllocateNetworkResultSubnetData) o;
    return Objects.equals(this.addressPool, allocateNetworkResultSubnetData.addressPool) &&
        Objects.equals(this.cidr, allocateNetworkResultSubnetData.cidr) &&
        Objects.equals(this.gatewayIp, allocateNetworkResultSubnetData.gatewayIp) &&
        Objects.equals(this.ipVersion, allocateNetworkResultSubnetData.ipVersion) &&
        Objects.equals(this.isDhcpEnabled, allocateNetworkResultSubnetData.isDhcpEnabled) &&
        Objects.equals(this.metadata, allocateNetworkResultSubnetData.metadata) &&
        Objects.equals(this.networkId, allocateNetworkResultSubnetData.networkId) &&
        Objects.equals(this.operationalState, allocateNetworkResultSubnetData.operationalState) &&
        Objects.equals(this.resourceId, allocateNetworkResultSubnetData.resourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPool, cidr, gatewayIp, ipVersion, isDhcpEnabled, metadata, networkId, operationalState, resourceId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocateNetworkResultSubnetData {\n");
    
    sb.append("    addressPool: ").append(toIndentedString(addressPool)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    gatewayIp: ").append(toIndentedString(gatewayIp)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    isDhcpEnabled: ").append(toIndentedString(isDhcpEnabled)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

