/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes the software image which is directly loaded on the virtualisation machine instantiating this Application.
 */
@ApiModel(description = "Describes the software image which is directly loaded on the virtualisation machine instantiating this Application.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class SwImageDescriptor {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("checksum")
  private String checksum = null;

  @SerializedName("containerFormat")
  private String containerFormat = null;

  @SerializedName("diskFormat")
  private String diskFormat = null;

  @SerializedName("minDisk")
  private BigDecimal minDisk = null;

  @SerializedName("minRam")
  private BigDecimal minRam = null;

  @SerializedName("size")
  private BigDecimal size = null;

  @SerializedName("swImage")
  private String swImage = null;

  @SerializedName("operatingSystem")
  private String operatingSystem = null;

  @SerializedName("supportedVirtualizationEnvironment")
  private List<String> supportedVirtualizationEnvironment = null;

  public SwImageDescriptor id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier of this software image.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The identifier of this software image.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SwImageDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this software image.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of this software image.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SwImageDescriptor version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of this software image.
   * @return version
  **/
  @ApiModelProperty(value = "The version of this software image.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public SwImageDescriptor checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

   /**
   * The checksum of this software image
   * @return checksum
  **/
  @ApiModelProperty(value = "The checksum of this software image")
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }

  public SwImageDescriptor containerFormat(String containerFormat) {
    this.containerFormat = containerFormat;
    return this;
  }

   /**
   * The container format describes the container file format in which software image is provided.
   * @return containerFormat
  **/
  @ApiModelProperty(required = true, value = "The container format describes the container file format in which software image is provided.")
  public String getContainerFormat() {
    return containerFormat;
  }

  public void setContainerFormat(String containerFormat) {
    this.containerFormat = containerFormat;
  }

  public SwImageDescriptor diskFormat(String diskFormat) {
    this.diskFormat = diskFormat;
    return this;
  }

   /**
   * The disk format of a software image is the format of the underlying disk image.
   * @return diskFormat
  **/
  @ApiModelProperty(value = "The disk format of a software image is the format of the underlying disk image.")
  public String getDiskFormat() {
    return diskFormat;
  }

  public void setDiskFormat(String diskFormat) {
    this.diskFormat = diskFormat;
  }

  public SwImageDescriptor minDisk(BigDecimal minDisk) {
    this.minDisk = minDisk;
    return this;
  }

   /**
   * The minimal disk size requirement for this software image. The value of the \&quot;size of storage\&quot; attribute of the VirtualStorageDesc referencing this SwImageDesc shall not be smaller than the value of minDisk.
   * @return minDisk
  **/
  @ApiModelProperty(value = "The minimal disk size requirement for this software image. The value of the \"size of storage\" attribute of the VirtualStorageDesc referencing this SwImageDesc shall not be smaller than the value of minDisk.")
  public BigDecimal getMinDisk() {
    return minDisk;
  }

  public void setMinDisk(BigDecimal minDisk) {
    this.minDisk = minDisk;
  }

  public SwImageDescriptor minRam(BigDecimal minRam) {
    this.minRam = minRam;
    return this;
  }

   /**
   * The minimal RAM requirement for this software image. The value of the \&quot;size\&quot; attribute of VirtualMemoryData of the Vdu referencing this SwImageDesc shall not be smaller than the value of minRam.
   * @return minRam
  **/
  @ApiModelProperty(value = "The minimal RAM requirement for this software image. The value of the \"size\" attribute of VirtualMemoryData of the Vdu referencing this SwImageDesc shall not be smaller than the value of minRam.")
  public BigDecimal getMinRam() {
    return minRam;
  }

  public void setMinRam(BigDecimal minRam) {
    this.minRam = minRam;
  }

  public SwImageDescriptor size(BigDecimal size) {
    this.size = size;
    return this;
  }

   /**
   * The size of this software image.
   * @return size
  **/
  @ApiModelProperty(value = "The size of this software image.")
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }

  public SwImageDescriptor swImage(String swImage) {
    this.swImage = swImage;
    return this;
  }

   /**
   * This is a reference to the actual software image. The reference can be relative to the root of the VNF Package or can be a URL.
   * @return swImage
  **/
  @ApiModelProperty(required = true, value = "This is a reference to the actual software image. The reference can be relative to the root of the VNF Package or can be a URL.")
  public String getSwImage() {
    return swImage;
  }

  public void setSwImage(String swImage) {
    this.swImage = swImage;
  }

  public SwImageDescriptor operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * Identifies the operating system used in the software image. This attribute may also identify if a 32 bit or 64 bit software image is used.
   * @return operatingSystem
  **/
  @ApiModelProperty(value = "Identifies the operating system used in the software image. This attribute may also identify if a 32 bit or 64 bit software image is used.")
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }

  public SwImageDescriptor supportedVirtualizationEnvironment(List<String> supportedVirtualizationEnvironment) {
    this.supportedVirtualizationEnvironment = supportedVirtualizationEnvironment;
    return this;
  }

  public SwImageDescriptor addSupportedVirtualizationEnvironmentItem(String supportedVirtualizationEnvironmentItem) {
    if (this.supportedVirtualizationEnvironment == null) {
      this.supportedVirtualizationEnvironment = new ArrayList<String>();
    }
    this.supportedVirtualizationEnvironment.add(supportedVirtualizationEnvironmentItem);
    return this;
  }

   /**
   * Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image.
   * @return supportedVirtualizationEnvironment
  **/
  @ApiModelProperty(value = "Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image.")
  public List<String> getSupportedVirtualizationEnvironment() {
    return supportedVirtualizationEnvironment;
  }

  public void setSupportedVirtualizationEnvironment(List<String> supportedVirtualizationEnvironment) {
    this.supportedVirtualizationEnvironment = supportedVirtualizationEnvironment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwImageDescriptor swImageDescriptor = (SwImageDescriptor) o;
    return Objects.equals(this.id, swImageDescriptor.id) &&
        Objects.equals(this.name, swImageDescriptor.name) &&
        Objects.equals(this.version, swImageDescriptor.version) &&
        Objects.equals(this.checksum, swImageDescriptor.checksum) &&
        Objects.equals(this.containerFormat, swImageDescriptor.containerFormat) &&
        Objects.equals(this.diskFormat, swImageDescriptor.diskFormat) &&
        Objects.equals(this.minDisk, swImageDescriptor.minDisk) &&
        Objects.equals(this.minRam, swImageDescriptor.minRam) &&
        Objects.equals(this.size, swImageDescriptor.size) &&
        Objects.equals(this.swImage, swImageDescriptor.swImage) &&
        Objects.equals(this.operatingSystem, swImageDescriptor.operatingSystem) &&
        Objects.equals(this.supportedVirtualizationEnvironment, swImageDescriptor.supportedVirtualizationEnvironment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, version, checksum, containerFormat, diskFormat, minDisk, minRam, size, swImage, operatingSystem, supportedVirtualizationEnvironment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwImageDescriptor {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    containerFormat: ").append(toIndentedString(containerFormat)).append("\n");
    sb.append("    diskFormat: ").append(toIndentedString(diskFormat)).append("\n");
    sb.append("    minDisk: ").append(toIndentedString(minDisk)).append("\n");
    sb.append("    minRam: ").append(toIndentedString(minRam)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    swImage: ").append(toIndentedString(swImage)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    supportedVirtualizationEnvironment: ").append(toIndentedString(supportedVirtualizationEnvironment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

