/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * AppD
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class AppD {
  @SerializedName("appDId")
  private String appDId = null;

  @SerializedName("appName")
  private String appName = null;

  @SerializedName("appProvider")
  private String appProvider = null;

  @SerializedName("appSoftVersion")
  private String appSoftVersion = null;

  @SerializedName("appDVersion")
  private String appDVersion = null;

  @SerializedName("mecVersion")
  private List<String> mecVersion = null;

  @SerializedName("appInfoName")
  private String appInfoName = null;

  @SerializedName("appDescription")
  private String appDescription = null;

  @SerializedName("virtualComputeDescriptor")
  private VirtualComputeDescription virtualComputeDescriptor = null;

  @SerializedName("swImageDescriptor")
  private List<SwImageDescriptor> swImageDescriptor = null;

  @SerializedName("virtualStorageDescriptor")
  private List<VirtualStorageDescriptor> virtualStorageDescriptor = null;

  @SerializedName("appExtCpd")
  private List<AppExternalCpd> appExtCpd = null;

  @SerializedName("appServiceRequired")
  private List<ServiceDependency> appServiceRequired = null;

  @SerializedName("appServiceOptional")
  private List<ServiceDependency> appServiceOptional = null;

  @SerializedName("transportDependencies")
  private List<TransportDependency> transportDependencies = null;

  @SerializedName("appTrafficRule")
  private List<TrafficRuleDescriptor> appTrafficRule = null;

  @SerializedName("appDNSRule")
  private List<DNSRuleDescriptor> appDNSRule = null;

  @SerializedName("appLatency")
  private LatencyDescriptor appLatency = null;

  @SerializedName("terminateAppInstanceOpConfig")
  private TerminateAppInstanceOpConfig terminateAppInstanceOpConfig = null;

  @SerializedName("changeAppInstanceStateOpConfig")
  private ChangeAppInstanceStateOpConfig changeAppInstanceStateOpConfig = null;

  public AppD appDId(String appDId) {
    this.appDId = appDId;
    return this;
  }

   /**
   * Identifier of this mobile edge application descriptor. This attribute shall be globally unique.
   * @return appDId
  **/
  @ApiModelProperty(required = true, value = "Identifier of this mobile edge application descriptor. This attribute shall be globally unique.")
  public String getAppDId() {
    return appDId;
  }

  public void setAppDId(String appDId) {
    this.appDId = appDId;
  }

  public AppD appName(String appName) {
    this.appName = appName;
    return this;
  }

   /**
   * Name to identify the mobile edge application.
   * @return appName
  **/
  @ApiModelProperty(value = "Name to identify the mobile edge application.")
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }

  public AppD appProvider(String appProvider) {
    this.appProvider = appProvider;
    return this;
  }

   /**
   * Provider of the application and of the AppD.
   * @return appProvider
  **/
  @ApiModelProperty(value = "Provider of the application and of the AppD.")
  public String getAppProvider() {
    return appProvider;
  }

  public void setAppProvider(String appProvider) {
    this.appProvider = appProvider;
  }

  public AppD appSoftVersion(String appSoftVersion) {
    this.appSoftVersion = appSoftVersion;
    return this;
  }

   /**
   * AvailableIdentifies the version of software of the mobile edge application.
   * @return appSoftVersion
  **/
  @ApiModelProperty(value = "AvailableIdentifies the version of software of the mobile edge application.")
  public String getAppSoftVersion() {
    return appSoftVersion;
  }

  public void setAppSoftVersion(String appSoftVersion) {
    this.appSoftVersion = appSoftVersion;
  }

  public AppD appDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
    return this;
  }

   /**
   * Identifies the version of the application descriptor.
   * @return appDVersion
  **/
  @ApiModelProperty(value = "Identifies the version of the application descriptor.")
  public String getAppDVersion() {
    return appDVersion;
  }

  public void setAppDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
  }

  public AppD mecVersion(List<String> mecVersion) {
    this.mecVersion = mecVersion;
    return this;
  }

  public AppD addMecVersionItem(String mecVersionItem) {
    if (this.mecVersion == null) {
      this.mecVersion = new ArrayList<String>();
    }
    this.mecVersion.add(mecVersionItem);
    return this;
  }

   /**
   * Identifies version(s) of ME system compatible with the mobile edge application described in this version of the AppD.
   * @return mecVersion
  **/
  @ApiModelProperty(value = "Identifies version(s) of ME system compatible with the mobile edge application described in this version of the AppD.")
  public List<String> getMecVersion() {
    return mecVersion;
  }

  public void setMecVersion(List<String> mecVersion) {
    this.mecVersion = mecVersion;
  }

  public AppD appInfoName(String appInfoName) {
    this.appInfoName = appInfoName;
    return this;
  }

   /**
   * Human readable name for the ME application product. May change during the ME application product lifetime.
   * @return appInfoName
  **/
  @ApiModelProperty(value = "Human readable name for the ME application product. May change during the ME application product lifetime.")
  public String getAppInfoName() {
    return appInfoName;
  }

  public void setAppInfoName(String appInfoName) {
    this.appInfoName = appInfoName;
  }

  public AppD appDescription(String appDescription) {
    this.appDescription = appDescription;
    return this;
  }

   /**
   * Human readable description of the mobile edge application.
   * @return appDescription
  **/
  @ApiModelProperty(value = "Human readable description of the mobile edge application.")
  public String getAppDescription() {
    return appDescription;
  }

  public void setAppDescription(String appDescription) {
    this.appDescription = appDescription;
  }

  public AppD virtualComputeDescriptor(VirtualComputeDescription virtualComputeDescriptor) {
    this.virtualComputeDescriptor = virtualComputeDescriptor;
    return this;
  }

   /**
   * Get virtualComputeDescriptor
   * @return virtualComputeDescriptor
  **/
  @ApiModelProperty(value = "")
  public VirtualComputeDescription getVirtualComputeDescriptor() {
    return virtualComputeDescriptor;
  }

  public void setVirtualComputeDescriptor(VirtualComputeDescription virtualComputeDescriptor) {
    this.virtualComputeDescriptor = virtualComputeDescriptor;
  }

  public AppD swImageDescriptor(List<SwImageDescriptor> swImageDescriptor) {
    this.swImageDescriptor = swImageDescriptor;
    return this;
  }

  public AppD addSwImageDescriptorItem(SwImageDescriptor swImageDescriptorItem) {
    if (this.swImageDescriptor == null) {
      this.swImageDescriptor = new ArrayList<SwImageDescriptor>();
    }
    this.swImageDescriptor.add(swImageDescriptorItem);
    return this;
  }

   /**
   * Get swImageDescriptor
   * @return swImageDescriptor
  **/
  @ApiModelProperty(value = "")
  public List<SwImageDescriptor> getSwImageDescriptor() {
    return swImageDescriptor;
  }

  public void setSwImageDescriptor(List<SwImageDescriptor> swImageDescriptor) {
    this.swImageDescriptor = swImageDescriptor;
  }

  public AppD virtualStorageDescriptor(List<VirtualStorageDescriptor> virtualStorageDescriptor) {
    this.virtualStorageDescriptor = virtualStorageDescriptor;
    return this;
  }

  public AppD addVirtualStorageDescriptorItem(VirtualStorageDescriptor virtualStorageDescriptorItem) {
    if (this.virtualStorageDescriptor == null) {
      this.virtualStorageDescriptor = new ArrayList<VirtualStorageDescriptor>();
    }
    this.virtualStorageDescriptor.add(virtualStorageDescriptorItem);
    return this;
  }

   /**
   * Get virtualStorageDescriptor
   * @return virtualStorageDescriptor
  **/
  @ApiModelProperty(value = "")
  public List<VirtualStorageDescriptor> getVirtualStorageDescriptor() {
    return virtualStorageDescriptor;
  }

  public void setVirtualStorageDescriptor(List<VirtualStorageDescriptor> virtualStorageDescriptor) {
    this.virtualStorageDescriptor = virtualStorageDescriptor;
  }

  public AppD appExtCpd(List<AppExternalCpd> appExtCpd) {
    this.appExtCpd = appExtCpd;
    return this;
  }

  public AppD addAppExtCpdItem(AppExternalCpd appExtCpdItem) {
    if (this.appExtCpd == null) {
      this.appExtCpd = new ArrayList<AppExternalCpd>();
    }
    this.appExtCpd.add(appExtCpdItem);
    return this;
  }

   /**
   * Get appExtCpd
   * @return appExtCpd
  **/
  @ApiModelProperty(value = "")
  public List<AppExternalCpd> getAppExtCpd() {
    return appExtCpd;
  }

  public void setAppExtCpd(List<AppExternalCpd> appExtCpd) {
    this.appExtCpd = appExtCpd;
  }

  public AppD appServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
    return this;
  }

  public AppD addAppServiceRequiredItem(ServiceDependency appServiceRequiredItem) {
    if (this.appServiceRequired == null) {
      this.appServiceRequired = new ArrayList<ServiceDependency>();
    }
    this.appServiceRequired.add(appServiceRequiredItem);
    return this;
  }

   /**
   * Describes services a mobile edge application requires to run.
   * @return appServiceRequired
  **/
  @ApiModelProperty(value = "Describes services a mobile edge application requires to run.")
  public List<ServiceDependency> getAppServiceRequired() {
    return appServiceRequired;
  }

  public void setAppServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
  }

  public AppD appServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
    return this;
  }

  public AppD addAppServiceOptionalItem(ServiceDependency appServiceOptionalItem) {
    if (this.appServiceOptional == null) {
      this.appServiceOptional = new ArrayList<ServiceDependency>();
    }
    this.appServiceOptional.add(appServiceOptionalItem);
    return this;
  }

   /**
   * Describes services a mobile edge application may use if available.
   * @return appServiceOptional
  **/
  @ApiModelProperty(value = "Describes services a mobile edge application may use if available.")
  public List<ServiceDependency> getAppServiceOptional() {
    return appServiceOptional;
  }

  public void setAppServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
  }

  public AppD transportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
    return this;
  }

  public AppD addTransportDependenciesItem(TransportDependency transportDependenciesItem) {
    if (this.transportDependencies == null) {
      this.transportDependencies = new ArrayList<TransportDependency>();
    }
    this.transportDependencies.add(transportDependenciesItem);
    return this;
  }

   /**
   * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.
   * @return transportDependencies
  **/
  @ApiModelProperty(value = "Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.")
  public List<TransportDependency> getTransportDependencies() {
    return transportDependencies;
  }

  public void setTransportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
  }

  public AppD appTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
    return this;
  }

  public AppD addAppTrafficRuleItem(TrafficRuleDescriptor appTrafficRuleItem) {
    if (this.appTrafficRule == null) {
      this.appTrafficRule = new ArrayList<TrafficRuleDescriptor>();
    }
    this.appTrafficRule.add(appTrafficRuleItem);
    return this;
  }

   /**
   * Describes traffic rules the mobile edge application requires.
   * @return appTrafficRule
  **/
  @ApiModelProperty(value = "Describes traffic rules the mobile edge application requires.")
  public List<TrafficRuleDescriptor> getAppTrafficRule() {
    return appTrafficRule;
  }

  public void setAppTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
  }

  public AppD appDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
    return this;
  }

  public AppD addAppDNSRuleItem(DNSRuleDescriptor appDNSRuleItem) {
    if (this.appDNSRule == null) {
      this.appDNSRule = new ArrayList<DNSRuleDescriptor>();
    }
    this.appDNSRule.add(appDNSRuleItem);
    return this;
  }

   /**
   * Describes DNS rules the mobile edge application requires.
   * @return appDNSRule
  **/
  @ApiModelProperty(value = "Describes DNS rules the mobile edge application requires.")
  public List<DNSRuleDescriptor> getAppDNSRule() {
    return appDNSRule;
  }

  public void setAppDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
  }

  public AppD appLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
    return this;
  }

   /**
   * Get appLatency
   * @return appLatency
  **/
  @ApiModelProperty(value = "")
  public LatencyDescriptor getAppLatency() {
    return appLatency;
  }

  public void setAppLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
  }

  public AppD terminateAppInstanceOpConfig(TerminateAppInstanceOpConfig terminateAppInstanceOpConfig) {
    this.terminateAppInstanceOpConfig = terminateAppInstanceOpConfig;
    return this;
  }

   /**
   * Get terminateAppInstanceOpConfig
   * @return terminateAppInstanceOpConfig
  **/
  @ApiModelProperty(value = "")
  public TerminateAppInstanceOpConfig getTerminateAppInstanceOpConfig() {
    return terminateAppInstanceOpConfig;
  }

  public void setTerminateAppInstanceOpConfig(TerminateAppInstanceOpConfig terminateAppInstanceOpConfig) {
    this.terminateAppInstanceOpConfig = terminateAppInstanceOpConfig;
  }

  public AppD changeAppInstanceStateOpConfig(ChangeAppInstanceStateOpConfig changeAppInstanceStateOpConfig) {
    this.changeAppInstanceStateOpConfig = changeAppInstanceStateOpConfig;
    return this;
  }

   /**
   * Get changeAppInstanceStateOpConfig
   * @return changeAppInstanceStateOpConfig
  **/
  @ApiModelProperty(value = "")
  public ChangeAppInstanceStateOpConfig getChangeAppInstanceStateOpConfig() {
    return changeAppInstanceStateOpConfig;
  }

  public void setChangeAppInstanceStateOpConfig(ChangeAppInstanceStateOpConfig changeAppInstanceStateOpConfig) {
    this.changeAppInstanceStateOpConfig = changeAppInstanceStateOpConfig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppD appD = (AppD) o;
    return Objects.equals(this.appDId, appD.appDId) &&
        Objects.equals(this.appName, appD.appName) &&
        Objects.equals(this.appProvider, appD.appProvider) &&
        Objects.equals(this.appSoftVersion, appD.appSoftVersion) &&
        Objects.equals(this.appDVersion, appD.appDVersion) &&
        Objects.equals(this.mecVersion, appD.mecVersion) &&
        Objects.equals(this.appInfoName, appD.appInfoName) &&
        Objects.equals(this.appDescription, appD.appDescription) &&
        Objects.equals(this.virtualComputeDescriptor, appD.virtualComputeDescriptor) &&
        Objects.equals(this.swImageDescriptor, appD.swImageDescriptor) &&
        Objects.equals(this.virtualStorageDescriptor, appD.virtualStorageDescriptor) &&
        Objects.equals(this.appExtCpd, appD.appExtCpd) &&
        Objects.equals(this.appServiceRequired, appD.appServiceRequired) &&
        Objects.equals(this.appServiceOptional, appD.appServiceOptional) &&
        Objects.equals(this.transportDependencies, appD.transportDependencies) &&
        Objects.equals(this.appTrafficRule, appD.appTrafficRule) &&
        Objects.equals(this.appDNSRule, appD.appDNSRule) &&
        Objects.equals(this.appLatency, appD.appLatency) &&
        Objects.equals(this.terminateAppInstanceOpConfig, appD.terminateAppInstanceOpConfig) &&
        Objects.equals(this.changeAppInstanceStateOpConfig, appD.changeAppInstanceStateOpConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appDId, appName, appProvider, appSoftVersion, appDVersion, mecVersion, appInfoName, appDescription, virtualComputeDescriptor, swImageDescriptor, virtualStorageDescriptor, appExtCpd, appServiceRequired, appServiceOptional, transportDependencies, appTrafficRule, appDNSRule, appLatency, terminateAppInstanceOpConfig, changeAppInstanceStateOpConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppD {\n");
    
    sb.append("    appDId: ").append(toIndentedString(appDId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appProvider: ").append(toIndentedString(appProvider)).append("\n");
    sb.append("    appSoftVersion: ").append(toIndentedString(appSoftVersion)).append("\n");
    sb.append("    appDVersion: ").append(toIndentedString(appDVersion)).append("\n");
    sb.append("    mecVersion: ").append(toIndentedString(mecVersion)).append("\n");
    sb.append("    appInfoName: ").append(toIndentedString(appInfoName)).append("\n");
    sb.append("    appDescription: ").append(toIndentedString(appDescription)).append("\n");
    sb.append("    virtualComputeDescriptor: ").append(toIndentedString(virtualComputeDescriptor)).append("\n");
    sb.append("    swImageDescriptor: ").append(toIndentedString(swImageDescriptor)).append("\n");
    sb.append("    virtualStorageDescriptor: ").append(toIndentedString(virtualStorageDescriptor)).append("\n");
    sb.append("    appExtCpd: ").append(toIndentedString(appExtCpd)).append("\n");
    sb.append("    appServiceRequired: ").append(toIndentedString(appServiceRequired)).append("\n");
    sb.append("    appServiceOptional: ").append(toIndentedString(appServiceOptional)).append("\n");
    sb.append("    transportDependencies: ").append(toIndentedString(transportDependencies)).append("\n");
    sb.append("    appTrafficRule: ").append(toIndentedString(appTrafficRule)).append("\n");
    sb.append("    appDNSRule: ").append(toIndentedString(appDNSRule)).append("\n");
    sb.append("    appLatency: ").append(toIndentedString(appLatency)).append("\n");
    sb.append("    terminateAppInstanceOpConfig: ").append(toIndentedString(terminateAppInstanceOpConfig)).append("\n");
    sb.append("    changeAppInstanceStateOpConfig: ").append(toIndentedString(changeAppInstanceStateOpConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

