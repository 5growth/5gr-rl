/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * TrafficFilter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class TrafficFilter {
  @SerializedName("srcAddress")
  private List<String> srcAddress = null;

  @SerializedName("dstAddress")
  private List<String> dstAddress = null;

  @SerializedName("srcPort")
  private List<String> srcPort = null;

  @SerializedName("dstPort")
  private List<String> dstPort = null;

  @SerializedName("protocol")
  private List<String> protocol = null;

  @SerializedName("token")
  private List<String> token = null;

  @SerializedName("srcTunnelAddress")
  private List<String> srcTunnelAddress = null;

  @SerializedName("dstTunnelAddress")
  private List<String> dstTunnelAddress = null;

  @SerializedName("srcTunnelPort")
  private List<String> srcTunnelPort = null;

  @SerializedName("dstTunnelPort")
  private List<String> dstTunnelPort = null;

  @SerializedName("qci")
  private BigDecimal qci = null;

  @SerializedName("dscp")
  private BigDecimal dscp = null;

  @SerializedName("tc")
  private BigDecimal tc = null;

  public TrafficFilter srcAddress(List<String> srcAddress) {
    this.srcAddress = srcAddress;
    return this;
  }

  public TrafficFilter addSrcAddressItem(String srcAddressItem) {
    if (this.srcAddress == null) {
      this.srcAddress = new ArrayList<String>();
    }
    this.srcAddress.add(srcAddressItem);
    return this;
  }

   /**
   * An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @return srcAddress
  **/
  @ApiModelProperty(value = "An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.")
  public List<String> getSrcAddress() {
    return srcAddress;
  }

  public void setSrcAddress(List<String> srcAddress) {
    this.srcAddress = srcAddress;
  }

  public TrafficFilter dstAddress(List<String> dstAddress) {
    this.dstAddress = dstAddress;
    return this;
  }

  public TrafficFilter addDstAddressItem(String dstAddressItem) {
    if (this.dstAddress == null) {
      this.dstAddress = new ArrayList<String>();
    }
    this.dstAddress.add(dstAddressItem);
    return this;
  }

   /**
   * An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @return dstAddress
  **/
  @ApiModelProperty(value = "An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.")
  public List<String> getDstAddress() {
    return dstAddress;
  }

  public void setDstAddress(List<String> dstAddress) {
    this.dstAddress = dstAddress;
  }

  public TrafficFilter srcPort(List<String> srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  public TrafficFilter addSrcPortItem(String srcPortItem) {
    if (this.srcPort == null) {
      this.srcPort = new ArrayList<String>();
    }
    this.srcPort.add(srcPortItem);
    return this;
  }

   /**
   * A port or a range of ports.
   * @return srcPort
  **/
  @ApiModelProperty(value = "A port or a range of ports.")
  public List<String> getSrcPort() {
    return srcPort;
  }

  public void setSrcPort(List<String> srcPort) {
    this.srcPort = srcPort;
  }

  public TrafficFilter dstPort(List<String> dstPort) {
    this.dstPort = dstPort;
    return this;
  }

  public TrafficFilter addDstPortItem(String dstPortItem) {
    if (this.dstPort == null) {
      this.dstPort = new ArrayList<String>();
    }
    this.dstPort.add(dstPortItem);
    return this;
  }

   /**
   * A port or a range of ports.
   * @return dstPort
  **/
  @ApiModelProperty(value = "A port or a range of ports.")
  public List<String> getDstPort() {
    return dstPort;
  }

  public void setDstPort(List<String> dstPort) {
    this.dstPort = dstPort;
  }

  public TrafficFilter protocol(List<String> protocol) {
    this.protocol = protocol;
    return this;
  }

  public TrafficFilter addProtocolItem(String protocolItem) {
    if (this.protocol == null) {
      this.protocol = new ArrayList<String>();
    }
    this.protocol.add(protocolItem);
    return this;
  }

   /**
   * Specifies the protocol of the traffic rule.
   * @return protocol
  **/
  @ApiModelProperty(value = "Specifies the protocol of the traffic rule.")
  public List<String> getProtocol() {
    return protocol;
  }

  public void setProtocol(List<String> protocol) {
    this.protocol = protocol;
  }

  public TrafficFilter token(List<String> token) {
    this.token = token;
    return this;
  }

  public TrafficFilter addTokenItem(String tokenItem) {
    if (this.token == null) {
      this.token = new ArrayList<String>();
    }
    this.token.add(tokenItem);
    return this;
  }

   /**
   * Used for token based traffic rule.
   * @return token
  **/
  @ApiModelProperty(value = "Used for token based traffic rule.")
  public List<String> getToken() {
    return token;
  }

  public void setToken(List<String> token) {
    this.token = token;
  }

  public TrafficFilter srcTunnelAddress(List<String> srcTunnelAddress) {
    this.srcTunnelAddress = srcTunnelAddress;
    return this;
  }

  public TrafficFilter addSrcTunnelAddressItem(String srcTunnelAddressItem) {
    if (this.srcTunnelAddress == null) {
      this.srcTunnelAddress = new ArrayList<String>();
    }
    this.srcTunnelAddress.add(srcTunnelAddressItem);
    return this;
  }

   /**
   * Used for GTP tunnel based traffic rule.
   * @return srcTunnelAddress
  **/
  @ApiModelProperty(value = "Used for GTP tunnel based traffic rule.")
  public List<String> getSrcTunnelAddress() {
    return srcTunnelAddress;
  }

  public void setSrcTunnelAddress(List<String> srcTunnelAddress) {
    this.srcTunnelAddress = srcTunnelAddress;
  }

  public TrafficFilter dstTunnelAddress(List<String> dstTunnelAddress) {
    this.dstTunnelAddress = dstTunnelAddress;
    return this;
  }

  public TrafficFilter addDstTunnelAddressItem(String dstTunnelAddressItem) {
    if (this.dstTunnelAddress == null) {
      this.dstTunnelAddress = new ArrayList<String>();
    }
    this.dstTunnelAddress.add(dstTunnelAddressItem);
    return this;
  }

   /**
   * Used for GTP tunnel based traffic rule.
   * @return dstTunnelAddress
  **/
  @ApiModelProperty(value = "Used for GTP tunnel based traffic rule.")
  public List<String> getDstTunnelAddress() {
    return dstTunnelAddress;
  }

  public void setDstTunnelAddress(List<String> dstTunnelAddress) {
    this.dstTunnelAddress = dstTunnelAddress;
  }

  public TrafficFilter srcTunnelPort(List<String> srcTunnelPort) {
    this.srcTunnelPort = srcTunnelPort;
    return this;
  }

  public TrafficFilter addSrcTunnelPortItem(String srcTunnelPortItem) {
    if (this.srcTunnelPort == null) {
      this.srcTunnelPort = new ArrayList<String>();
    }
    this.srcTunnelPort.add(srcTunnelPortItem);
    return this;
  }

   /**
   * Used for GTP tunnel based traffic rule.
   * @return srcTunnelPort
  **/
  @ApiModelProperty(value = "Used for GTP tunnel based traffic rule.")
  public List<String> getSrcTunnelPort() {
    return srcTunnelPort;
  }

  public void setSrcTunnelPort(List<String> srcTunnelPort) {
    this.srcTunnelPort = srcTunnelPort;
  }

  public TrafficFilter dstTunnelPort(List<String> dstTunnelPort) {
    this.dstTunnelPort = dstTunnelPort;
    return this;
  }

  public TrafficFilter addDstTunnelPortItem(String dstTunnelPortItem) {
    if (this.dstTunnelPort == null) {
      this.dstTunnelPort = new ArrayList<String>();
    }
    this.dstTunnelPort.add(dstTunnelPortItem);
    return this;
  }

   /**
   * Used for GTP tunnel based traffic rule.
   * @return dstTunnelPort
  **/
  @ApiModelProperty(value = "Used for GTP tunnel based traffic rule.")
  public List<String> getDstTunnelPort() {
    return dstTunnelPort;
  }

  public void setDstTunnelPort(List<String> dstTunnelPort) {
    this.dstTunnelPort = dstTunnelPort;
  }

  public TrafficFilter qci(BigDecimal qci) {
    this.qci = qci;
    return this;
  }

   /**
   * Used to match all packets that have the same QCI.
   * @return qci
  **/
  @ApiModelProperty(value = "Used to match all packets that have the same QCI.")
  public BigDecimal getQci() {
    return qci;
  }

  public void setQci(BigDecimal qci) {
    this.qci = qci;
  }

  public TrafficFilter dscp(BigDecimal dscp) {
    this.dscp = dscp;
    return this;
  }

   /**
   * Used to match all IPv4 packets that have the same DSCP.
   * @return dscp
  **/
  @ApiModelProperty(value = "Used to match all IPv4 packets that have the same DSCP.")
  public BigDecimal getDscp() {
    return dscp;
  }

  public void setDscp(BigDecimal dscp) {
    this.dscp = dscp;
  }

  public TrafficFilter tc(BigDecimal tc) {
    this.tc = tc;
    return this;
  }

   /**
   * Used to match all IPv6 packets that have the same TC.
   * @return tc
  **/
  @ApiModelProperty(value = "Used to match all IPv6 packets that have the same TC.")
  public BigDecimal getTc() {
    return tc;
  }

  public void setTc(BigDecimal tc) {
    this.tc = tc;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficFilter trafficFilter = (TrafficFilter) o;
    return Objects.equals(this.srcAddress, trafficFilter.srcAddress) &&
        Objects.equals(this.dstAddress, trafficFilter.dstAddress) &&
        Objects.equals(this.srcPort, trafficFilter.srcPort) &&
        Objects.equals(this.dstPort, trafficFilter.dstPort) &&
        Objects.equals(this.protocol, trafficFilter.protocol) &&
        Objects.equals(this.token, trafficFilter.token) &&
        Objects.equals(this.srcTunnelAddress, trafficFilter.srcTunnelAddress) &&
        Objects.equals(this.dstTunnelAddress, trafficFilter.dstTunnelAddress) &&
        Objects.equals(this.srcTunnelPort, trafficFilter.srcTunnelPort) &&
        Objects.equals(this.dstTunnelPort, trafficFilter.dstTunnelPort) &&
        Objects.equals(this.qci, trafficFilter.qci) &&
        Objects.equals(this.dscp, trafficFilter.dscp) &&
        Objects.equals(this.tc, trafficFilter.tc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcAddress, dstAddress, srcPort, dstPort, protocol, token, srcTunnelAddress, dstTunnelAddress, srcTunnelPort, dstTunnelPort, qci, dscp, tc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficFilter {\n");
    
    sb.append("    srcAddress: ").append(toIndentedString(srcAddress)).append("\n");
    sb.append("    dstAddress: ").append(toIndentedString(dstAddress)).append("\n");
    sb.append("    srcPort: ").append(toIndentedString(srcPort)).append("\n");
    sb.append("    dstPort: ").append(toIndentedString(dstPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    srcTunnelAddress: ").append(toIndentedString(srcTunnelAddress)).append("\n");
    sb.append("    dstTunnelAddress: ").append(toIndentedString(dstTunnelAddress)).append("\n");
    sb.append("    srcTunnelPort: ").append(toIndentedString(srcTunnelPort)).append("\n");
    sb.append("    dstTunnelPort: ").append(toIndentedString(dstTunnelPort)).append("\n");
    sb.append("    qci: ").append(toIndentedString(qci)).append("\n");
    sb.append("    dscp: ").append(toIndentedString(dscp)).append("\n");
    sb.append("    tc: ").append(toIndentedString(tc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

