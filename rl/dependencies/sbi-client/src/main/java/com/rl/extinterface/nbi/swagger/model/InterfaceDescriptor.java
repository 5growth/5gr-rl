/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * InterfaceDescriptor
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class InterfaceDescriptor {
  /**
   * Type of interface (TUNNEL, MAC, IP, etc.)
   */
  @JsonAdapter(InterfaceTypeEnum.Adapter.class)
  public enum InterfaceTypeEnum {
    TUNNEL("TUNNEL"),
    
    MAC("MAC"),
    
    IP("IP");

    private String value;

    InterfaceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceTypeEnum fromValue(String text) {
      for (InterfaceTypeEnum b : InterfaceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InterfaceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterfaceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("interfaceType")
  private InterfaceTypeEnum interfaceType = null;

  @SerializedName("tunnelInfo")
  private TunnelInfo tunnelInfo = null;

  @SerializedName("srcMACAddress")
  private String srcMACAddress = null;

  @SerializedName("dstMACAddress")
  private String dstMACAddress = null;

  @SerializedName("dstIPAddress")
  private String dstIPAddress = null;

  public InterfaceDescriptor interfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

   /**
   * Type of interface (TUNNEL, MAC, IP, etc.)
   * @return interfaceType
  **/
  @ApiModelProperty(required = true, value = "Type of interface (TUNNEL, MAC, IP, etc.)")
  public InterfaceTypeEnum getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
  }

  public InterfaceDescriptor tunnelInfo(TunnelInfo tunnelInfo) {
    this.tunnelInfo = tunnelInfo;
    return this;
  }

   /**
   * Get tunnelInfo
   * @return tunnelInfo
  **/
  @ApiModelProperty(value = "")
  public TunnelInfo getTunnelInfo() {
    return tunnelInfo;
  }

  public void setTunnelInfo(TunnelInfo tunnelInfo) {
    this.tunnelInfo = tunnelInfo;
  }

  public InterfaceDescriptor srcMACAddress(String srcMACAddress) {
    this.srcMACAddress = srcMACAddress;
    return this;
  }

   /**
   * If the interface type is MAC, the source address identifies the MAC address of the interface.
   * @return srcMACAddress
  **/
  @ApiModelProperty(value = "If the interface type is MAC, the source address identifies the MAC address of the interface.")
  public String getSrcMACAddress() {
    return srcMACAddress;
  }

  public void setSrcMACAddress(String srcMACAddress) {
    this.srcMACAddress = srcMACAddress;
  }

  public InterfaceDescriptor dstMACAddress(String dstMACAddress) {
    this.dstMACAddress = dstMACAddress;
    return this;
  }

   /**
   * If the interface type is MAC, the destination address identifies the MAC address of the interface. Only used for dstInterface.
   * @return dstMACAddress
  **/
  @ApiModelProperty(value = "If the interface type is MAC, the destination address identifies the MAC address of the interface. Only used for dstInterface.")
  public String getDstMACAddress() {
    return dstMACAddress;
  }

  public void setDstMACAddress(String dstMACAddress) {
    this.dstMACAddress = dstMACAddress;
  }

  public InterfaceDescriptor dstIPAddress(String dstIPAddress) {
    this.dstIPAddress = dstIPAddress;
    return this;
  }

   /**
   * f the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.
   * @return dstIPAddress
  **/
  @ApiModelProperty(value = "f the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.")
  public String getDstIPAddress() {
    return dstIPAddress;
  }

  public void setDstIPAddress(String dstIPAddress) {
    this.dstIPAddress = dstIPAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterfaceDescriptor interfaceDescriptor = (InterfaceDescriptor) o;
    return Objects.equals(this.interfaceType, interfaceDescriptor.interfaceType) &&
        Objects.equals(this.tunnelInfo, interfaceDescriptor.tunnelInfo) &&
        Objects.equals(this.srcMACAddress, interfaceDescriptor.srcMACAddress) &&
        Objects.equals(this.dstMACAddress, interfaceDescriptor.dstMACAddress) &&
        Objects.equals(this.dstIPAddress, interfaceDescriptor.dstIPAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceType, tunnelInfo, srcMACAddress, dstMACAddress, dstIPAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterfaceDescriptor {\n");
    
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    tunnelInfo: ").append(toIndentedString(tunnelInfo)).append("\n");
    sb.append("    srcMACAddress: ").append(toIndentedString(srcMACAddress)).append("\n");
    sb.append("    dstMACAddress: ").append(toIndentedString(dstMACAddress)).append("\n");
    sb.append("    dstIPAddress: ").append(toIndentedString(dstIPAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

