/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * DNSRuleDescriptor
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class DNSRuleDescriptor {
  @SerializedName("dnsRuleId")
  private String dnsRuleId = null;

  @SerializedName("domainName")
  private String domainName = null;

  /**
   * Specifies the IP address type (IP_V6, IP_V4)
   */
  @JsonAdapter(IpAddressTypeEnum.Adapter.class)
  public enum IpAddressTypeEnum {
    V6("IP_V6"),
    
    V4("IP_V4");

    private String value;

    IpAddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpAddressTypeEnum fromValue(String text) {
      for (IpAddressTypeEnum b : IpAddressTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IpAddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpAddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpAddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IpAddressTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ipAddressType")
  private IpAddressTypeEnum ipAddressType = null;

  @SerializedName("ipAddress")
  private String ipAddress = null;

  @SerializedName("ttl")
  private BigDecimal ttl = null;

  public DNSRuleDescriptor dnsRuleId(String dnsRuleId) {
    this.dnsRuleId = dnsRuleId;
    return this;
  }

   /**
   * Identifies the DNS rule.
   * @return dnsRuleId
  **/
  @ApiModelProperty(required = true, value = "Identifies the DNS rule.")
  public String getDnsRuleId() {
    return dnsRuleId;
  }

  public void setDnsRuleId(String dnsRuleId) {
    this.dnsRuleId = dnsRuleId;
  }

  public DNSRuleDescriptor domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * FQDN of the DNS rule.
   * @return domainName
  **/
  @ApiModelProperty(required = true, value = "FQDN of the DNS rule.")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }

  public DNSRuleDescriptor ipAddressType(IpAddressTypeEnum ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

   /**
   * Specifies the IP address type (IP_V6, IP_V4)
   * @return ipAddressType
  **/
  @ApiModelProperty(required = true, value = "Specifies the IP address type (IP_V6, IP_V4)")
  public IpAddressTypeEnum getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressTypeEnum ipAddressType) {
    this.ipAddressType = ipAddressType;
  }

  public DNSRuleDescriptor ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address given by the DNS rule.
   * @return ipAddress
  **/
  @ApiModelProperty(required = true, value = "IP address given by the DNS rule.")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public DNSRuleDescriptor ttl(BigDecimal ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Time-to-live value.
   * @return ttl
  **/
  @ApiModelProperty(value = "Time-to-live value.")
  public BigDecimal getTtl() {
    return ttl;
  }

  public void setTtl(BigDecimal ttl) {
    this.ttl = ttl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DNSRuleDescriptor dnSRuleDescriptor = (DNSRuleDescriptor) o;
    return Objects.equals(this.dnsRuleId, dnSRuleDescriptor.dnsRuleId) &&
        Objects.equals(this.domainName, dnSRuleDescriptor.domainName) &&
        Objects.equals(this.ipAddressType, dnSRuleDescriptor.ipAddressType) &&
        Objects.equals(this.ipAddress, dnSRuleDescriptor.ipAddress) &&
        Objects.equals(this.ttl, dnSRuleDescriptor.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsRuleId, domainName, ipAddressType, ipAddress, ttl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DNSRuleDescriptor {\n");
    
    sb.append("    dnsRuleId: ").append(toIndentedString(dnsRuleId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

