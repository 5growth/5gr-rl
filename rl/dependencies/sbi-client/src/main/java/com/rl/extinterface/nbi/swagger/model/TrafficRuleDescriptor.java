/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rl.extinterface.nbi.swagger.model.InterfaceDescriptor;
import com.rl.extinterface.nbi.swagger.model.TrafficFilter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * TrafficRuleDescriptor
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class TrafficRuleDescriptor {
  @SerializedName("trafficRuleId")
  private String trafficRuleId = null;

  /**
   * Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE-&gt;EPC packets and the reverse packets are handled by the same context.
   */
  @JsonAdapter(FilterTypeEnum.Adapter.class)
  public enum FilterTypeEnum {
    FLOW("FLOW"),
    
    PACKET("PACKET");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterTypeEnum fromValue(String text) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FilterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("filterType")
  private FilterTypeEnum filterType = null;

  @SerializedName("priority")
  private BigDecimal priority = null;

  @SerializedName("trafficFilter")
  private List<TrafficFilter> trafficFilter = new ArrayList<TrafficFilter>();

  /**
   * Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    DROP("DROP"),
    
    FORWARD("FORWARD"),
    
    DECAPSULATED("DECAPSULATED"),
    
    FORWARD_AS_IS("FORWARD_AS_IS"),
    
    PASSTHROUGH("PASSTHROUGH"),
    
    DUPLICATED_DECAPSULATED("DUPLICATED_DECAPSULATED"),
    
    DUPLICATE_AS_IS("DUPLICATE_AS_IS");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("dstInterface")
  private List<InterfaceDescriptor> dstInterface = null;

  public TrafficRuleDescriptor trafficRuleId(String trafficRuleId) {
    this.trafficRuleId = trafficRuleId;
    return this;
  }

   /**
   * Identifies the traffic rule.
   * @return trafficRuleId
  **/
  @ApiModelProperty(required = true, value = "Identifies the traffic rule.")
  public String getTrafficRuleId() {
    return trafficRuleId;
  }

  public void setTrafficRuleId(String trafficRuleId) {
    this.trafficRuleId = trafficRuleId;
  }

  public TrafficRuleDescriptor filterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE-&gt;EPC packets and the reverse packets are handled by the same context.
   * @return filterType
  **/
  @ApiModelProperty(required = true, value = "Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE->EPC packets and the reverse packets are handled by the same context.")
  public FilterTypeEnum getFilterType() {
    return filterType;
  }

  public void setFilterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
  }

  public TrafficRuleDescriptor priority(BigDecimal priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.
   * @return priority
  **/
  @ApiModelProperty(required = true, value = "Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.")
  public BigDecimal getPriority() {
    return priority;
  }

  public void setPriority(BigDecimal priority) {
    this.priority = priority;
  }

  public TrafficRuleDescriptor trafficFilter(List<TrafficFilter> trafficFilter) {
    this.trafficFilter = trafficFilter;
    return this;
  }

  public TrafficRuleDescriptor addTrafficFilterItem(TrafficFilter trafficFilterItem) {
    this.trafficFilter.add(trafficFilterItem);
    return this;
  }

   /**
   * The filter used to identify specific flow/packets that need to be handled by the MEC host.
   * @return trafficFilter
  **/
  @ApiModelProperty(required = true, value = "The filter used to identify specific flow/packets that need to be handled by the MEC host.")
  public List<TrafficFilter> getTrafficFilter() {
    return trafficFilter;
  }

  public void setTrafficFilter(List<TrafficFilter> trafficFilter) {
    this.trafficFilter = trafficFilter;
  }

  public TrafficRuleDescriptor action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.
   * @return action
  **/
  @ApiModelProperty(required = true, value = "Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public TrafficRuleDescriptor dstInterface(List<InterfaceDescriptor> dstInterface) {
    this.dstInterface = dstInterface;
    return this;
  }

  public TrafficRuleDescriptor addDstInterfaceItem(InterfaceDescriptor dstInterfaceItem) {
    if (this.dstInterface == null) {
      this.dstInterface = new ArrayList<InterfaceDescriptor>();
    }
    this.dstInterface.add(dstInterfaceItem);
    return this;
  }

   /**
   * Describes the destination interface information, if the action is FORWARD. Some applications (e.g. inline/tap) require two interfaces, where the first is on the UE side and the second is on the EPC side.
   * @return dstInterface
  **/
  @ApiModelProperty(value = "Describes the destination interface information, if the action is FORWARD. Some applications (e.g. inline/tap) require two interfaces, where the first is on the UE side and the second is on the EPC side.")
  public List<InterfaceDescriptor> getDstInterface() {
    return dstInterface;
  }

  public void setDstInterface(List<InterfaceDescriptor> dstInterface) {
    this.dstInterface = dstInterface;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficRuleDescriptor trafficRuleDescriptor = (TrafficRuleDescriptor) o;
    return Objects.equals(this.trafficRuleId, trafficRuleDescriptor.trafficRuleId) &&
        Objects.equals(this.filterType, trafficRuleDescriptor.filterType) &&
        Objects.equals(this.priority, trafficRuleDescriptor.priority) &&
        Objects.equals(this.trafficFilter, trafficRuleDescriptor.trafficFilter) &&
        Objects.equals(this.action, trafficRuleDescriptor.action) &&
        Objects.equals(this.dstInterface, trafficRuleDescriptor.dstInterface);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trafficRuleId, filterType, priority, trafficFilter, action, dstInterface);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficRuleDescriptor {\n");
    
    sb.append("    trafficRuleId: ").append(toIndentedString(trafficRuleId)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    trafficFilter: ").append(toIndentedString(trafficFilter)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    dstInterface: ").append(toIndentedString(dstInterface)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

