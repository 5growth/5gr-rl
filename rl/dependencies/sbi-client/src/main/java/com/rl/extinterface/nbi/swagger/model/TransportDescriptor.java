/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Information about the transport in a transport binding.
 */
@ApiModel(description = "Information about the transport in a transport binding.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-08T16:03:30.222Z")
public class TransportDescriptor {
  /**
   * Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REST_HTTP("REST_HTTP"),
    
    MB_TOPIC_BASED("MB_TOPIC_BASED"),
    
    MB_ROUTING("MB_ROUTING"),
    
    MB_PUBSUB("MB_PUBSUB"),
    
    RPC("RPC"),
    
    RPC_STREAMING("RPC_STREAMING"),
    
    WEBSOCKET("WEBSOCKET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("protocol")
  private String protocol = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("security")
  private Object security = null;

  public TransportDescriptor type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TransportDescriptor protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The name of the protocol used. Shall be set to \&quot;HTTP\&quot; for a REST API.
   * @return protocol
  **/
  @ApiModelProperty(required = true, value = "The name of the protocol used. Shall be set to \"HTTP\" for a REST API.")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public TransportDescriptor version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the protocol used.
   * @return version
  **/
  @ApiModelProperty(required = true, value = "The version of the protocol used.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public TransportDescriptor security(Object security) {
    this.security = security;
    return this;
  }

   /**
   * Information about the security used by the transport in ETSI GS MEC 011. (not implemented)
   * @return security
  **/
  @ApiModelProperty(required = true, value = "Information about the security used by the transport in ETSI GS MEC 011. (not implemented)")
  public Object getSecurity() {
    return security;
  }

  public void setSecurity(Object security) {
    this.security = security;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportDescriptor transportDescriptor = (TransportDescriptor) o;
    return Objects.equals(this.type, transportDescriptor.type) &&
        Objects.equals(this.protocol, transportDescriptor.protocol) &&
        Objects.equals(this.version, transportDescriptor.version) &&
        Objects.equals(this.security, transportDescriptor.security);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, protocol, version, security);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportDescriptor {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

