/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rl.extinterface.nbi.swagger.model.ReservedVirtualComputeComputePoolReserved;
import com.rl.extinterface.nbi.swagger.model.ReservedVirtualComputeVirtualisationContainerReserved;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * ReservedVirtualCompute
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class ReservedVirtualCompute {
  @SerializedName("computePoolReserved")
  private ReservedVirtualComputeComputePoolReserved computePoolReserved = null;

  @SerializedName("endTime")
  private OffsetDateTime endTime = null;

  @SerializedName("expiryTime")
  private OffsetDateTime expiryTime = null;

  @SerializedName("reservationId")
  private String reservationId = null;

  @SerializedName("reservationStatus")
  private String reservationStatus = null;

  @SerializedName("startTime")
  private OffsetDateTime startTime = null;

  @SerializedName("virtualisationContainerReserved")
  private ReservedVirtualComputeVirtualisationContainerReserved virtualisationContainerReserved = null;

  public ReservedVirtualCompute computePoolReserved(ReservedVirtualComputeComputePoolReserved computePoolReserved) {
    this.computePoolReserved = computePoolReserved;
    return this;
  }

   /**
   * Get computePoolReserved
   * @return computePoolReserved
  **/
  @ApiModelProperty(required = true, value = "")
  public ReservedVirtualComputeComputePoolReserved getComputePoolReserved() {
    return computePoolReserved;
  }

  public void setComputePoolReserved(ReservedVirtualComputeComputePoolReserved computePoolReserved) {
    this.computePoolReserved = computePoolReserved;
  }

  public ReservedVirtualCompute endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.
   * @return endTime
  **/
  @ApiModelProperty(required = true, value = "Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.")
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }

  public ReservedVirtualCompute expiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

   /**
   * Indication when the VIM can release the reservation in case no allocation request against this reservation was made.
   * @return expiryTime
  **/
  @ApiModelProperty(required = true, value = "Indication when the VIM can release the reservation in case no allocation request against this reservation was made.")
  public OffsetDateTime getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
  }

  public ReservedVirtualCompute reservationId(String reservationId) {
    this.reservationId = reservationId;
    return this;
  }

   /**
   * Identifier of the resource reservation.
   * @return reservationId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the resource reservation.")
  public String getReservationId() {
    return reservationId;
  }

  public void setReservationId(String reservationId) {
    this.reservationId = reservationId;
  }

  public ReservedVirtualCompute reservationStatus(String reservationStatus) {
    this.reservationStatus = reservationStatus;
    return this;
  }

   /**
   * Status of the compute resource reservation, e.g. to indicate if a reservation is being used.
   * @return reservationStatus
  **/
  @ApiModelProperty(required = true, value = "Status of the compute resource reservation, e.g. to indicate if a reservation is being used.")
  public String getReservationStatus() {
    return reservationStatus;
  }

  public void setReservationStatus(String reservationStatus) {
    this.reservationStatus = reservationStatus;
  }

  public ReservedVirtualCompute startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.
   * @return startTime
  **/
  @ApiModelProperty(required = true, value = "Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.")
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }

  public ReservedVirtualCompute virtualisationContainerReserved(ReservedVirtualComputeVirtualisationContainerReserved virtualisationContainerReserved) {
    this.virtualisationContainerReserved = virtualisationContainerReserved;
    return this;
  }

   /**
   * Get virtualisationContainerReserved
   * @return virtualisationContainerReserved
  **/
  @ApiModelProperty(required = true, value = "")
  public ReservedVirtualComputeVirtualisationContainerReserved getVirtualisationContainerReserved() {
    return virtualisationContainerReserved;
  }

  public void setVirtualisationContainerReserved(ReservedVirtualComputeVirtualisationContainerReserved virtualisationContainerReserved) {
    this.virtualisationContainerReserved = virtualisationContainerReserved;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservedVirtualCompute reservedVirtualCompute = (ReservedVirtualCompute) o;
    return Objects.equals(this.computePoolReserved, reservedVirtualCompute.computePoolReserved) &&
        Objects.equals(this.endTime, reservedVirtualCompute.endTime) &&
        Objects.equals(this.expiryTime, reservedVirtualCompute.expiryTime) &&
        Objects.equals(this.reservationId, reservedVirtualCompute.reservationId) &&
        Objects.equals(this.reservationStatus, reservedVirtualCompute.reservationStatus) &&
        Objects.equals(this.startTime, reservedVirtualCompute.startTime) &&
        Objects.equals(this.virtualisationContainerReserved, reservedVirtualCompute.virtualisationContainerReserved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computePoolReserved, endTime, expiryTime, reservationId, reservationStatus, startTime, virtualisationContainerReserved);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservedVirtualCompute {\n");
    
    sb.append("    computePoolReserved: ").append(toIndentedString(computePoolReserved)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    reservationStatus: ").append(toIndentedString(reservationStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    virtualisationContainerReserved: ").append(toIndentedString(virtualisationContainerReserved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

