/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.rl.extinterface.nbi.swagger.model.InlineResponse2001;
import com.rl.extinterface.nbi.swagger.model.InlineResponse2002;
import com.rl.extinterface.nbi.swagger.model.InlineResponse2003;
import com.rl.extinterface.nbi.swagger.model.MFRequest;
import com.rl.extinterface.nbi.swagger.model.PNFReply;
import com.rl.extinterface.nbi.swagger.model.PNFRequest;
import io.swagger.client.ApiException;

import org.junit.Test;
import org.junit.Ignore;


/**
 * API tests for RadioResourcesApi
 */
@Ignore
public class RadioResourcesApiTest {

    private final RadioResourcesApi api = new RadioResourcesApi();

    
    /**
     * Retrieve Radio Coverage Area info for Radio PoP capable
     *
     * Retrieve Radio Coverage Area info for Radio PoP capable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectRadioCoverageareaInformationTest() throws ApiException {
        InlineResponse2001 response = api.collectRadioCoverageareaInformation();

        // TODO: test validations
    }
    
    /**
     * Retrieve MF list supported by radio domain
     *
     * Retrieve MF(MO) of Radio PoP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectRadioMflistTest() throws ApiException {
        InlineResponse2003 response = api.collectRadioMflist();

        // TODO: test validations
    }
    
    /**
     * Retrieve pnf list supported by radio domain
     *
     * Retrieve PNF of Radio PoP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectRadioPnflistTest() throws ApiException {
        InlineResponse2002 response = api.collectRadioPnflist();

        // TODO: test validations
    }
    
    /**
     * Delete pnf in radio/compute domain
     *
     * Delete PNF of Radio/NFVI PoP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAbstractPnTest() throws ApiException {
        PNFReply body = null;
        PNFReply response = api.deleteAbstractPn(body);

        // TODO: test validations
    }
    
    /**
     * delete MF status supported by radio domain
     *
     * Delete MF of Radio PoP to start or stop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRadioMflistTest() throws ApiException {
        MFRequest body = null;
        MFRequest response = api.deleteRadioMflist(body);

        // TODO: test validations
    }
    
    /**
     * Set pnf status supported by radio/compute domain
     *
     * Set PNF of Radio/NFVI PoP to start or stop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNfviPnflistTest() throws ApiException {
        PNFRequest body = null;
        PNFReply response = api.setNfviPnflist(body);

        // TODO: test validations
    }
    
    /**
     * Set MF status supported by radio domain
     *
     * Set MF of Radio PoP to start or stop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRadioMflistTest() throws ApiException {
        MFRequest body = null;
        MFRequest response = api.setRadioMflist(body);

        // TODO: test validations
    }
    
}
