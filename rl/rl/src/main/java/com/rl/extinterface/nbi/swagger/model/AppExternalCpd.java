/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rl.extinterface.nbi.swagger.model.AddressData;
import com.rl.extinterface.nbi.swagger.model.VirtualNetworkInterfaceRequirements;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AppExternalCpd
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class AppExternalCpd {
  @SerializedName("cpdId")
  private String cpdId = null;

  /**
   * Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).
   */
  @JsonAdapter(LayerProtocolEnum.Adapter.class)
  public enum LayerProtocolEnum {
    ETHERNET("Ethernet"),
    
    MPLS("MPLS"),
    
    ODU2("ODU2"),
    
    IPV4("IPV4"),
    
    IPV6("IPV6"),
    
    PSEUDO_WIRE("Pseudo-Wire");

    private String value;

    LayerProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayerProtocolEnum fromValue(String text) {
      for (LayerProtocolEnum b : LayerProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LayerProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayerProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayerProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayerProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("layerProtocol")
  private LayerProtocolEnum layerProtocol = null;

  @SerializedName("cpRole")
  private String cpRole = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("addressData")
  private List<AddressData> addressData = null;

  @SerializedName("virtualNetworkInterfaceRequirements")
  private List<VirtualNetworkInterfaceRequirements> virtualNetworkInterfaceRequirements = null;

  public AppExternalCpd cpdId(String cpdId) {
    this.cpdId = cpdId;
    return this;
  }

   /**
   * Identifier of this cpd information element.
   * @return cpdId
  **/
  @ApiModelProperty(required = true, value = "Identifier of this cpd information element.")
  public String getCpdId() {
    return cpdId;
  }

  public void setCpdId(String cpdId) {
    this.cpdId = cpdId;
  }

  public AppExternalCpd layerProtocol(LayerProtocolEnum layerProtocol) {
    this.layerProtocol = layerProtocol;
    return this;
  }

   /**
   * Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).
   * @return layerProtocol
  **/
  @ApiModelProperty(required = true, value = "Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).")
  public LayerProtocolEnum getLayerProtocol() {
    return layerProtocol;
  }

  public void setLayerProtocol(LayerProtocolEnum layerProtocol) {
    this.layerProtocol = layerProtocol;
  }

  public AppExternalCpd cpRole(String cpRole) {
    this.cpRole = cpRole;
    return this;
  }

   /**
   * Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.
   * @return cpRole
  **/
  @ApiModelProperty(value = "Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.")
  public String getCpRole() {
    return cpRole;
  }

  public void setCpRole(String cpRole) {
    this.cpRole = cpRole;
  }

  public AppExternalCpd description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).
   * @return description
  **/
  @ApiModelProperty(value = "Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public AppExternalCpd addressData(List<AddressData> addressData) {
    this.addressData = addressData;
    return this;
  }

  public AppExternalCpd addAddressDataItem(AddressData addressDataItem) {
    if (this.addressData == null) {
      this.addressData = new ArrayList<AddressData>();
    }
    this.addressData.add(addressDataItem);
    return this;
  }

   /**
   * Provides information on the addresses to be assigned to the CP(s) instantiated from this CPD.
   * @return addressData
  **/
  @ApiModelProperty(value = "Provides information on the addresses to be assigned to the CP(s) instantiated from this CPD.")
  public List<AddressData> getAddressData() {
    return addressData;
  }

  public void setAddressData(List<AddressData> addressData) {
    this.addressData = addressData;
  }

  public AppExternalCpd virtualNetworkInterfaceRequirements(List<VirtualNetworkInterfaceRequirements> virtualNetworkInterfaceRequirements) {
    this.virtualNetworkInterfaceRequirements = virtualNetworkInterfaceRequirements;
    return this;
  }

  public AppExternalCpd addVirtualNetworkInterfaceRequirementsItem(VirtualNetworkInterfaceRequirements virtualNetworkInterfaceRequirementsItem) {
    if (this.virtualNetworkInterfaceRequirements == null) {
      this.virtualNetworkInterfaceRequirements = new ArrayList<VirtualNetworkInterfaceRequirements>();
    }
    this.virtualNetworkInterfaceRequirements.add(virtualNetworkInterfaceRequirementsItem);
    return this;
  }

   /**
   * Specifies requirements on a virtual network interface realizing the CPs instantiated from this CPD.
   * @return virtualNetworkInterfaceRequirements
  **/
  @ApiModelProperty(value = "Specifies requirements on a virtual network interface realizing the CPs instantiated from this CPD.")
  public List<VirtualNetworkInterfaceRequirements> getVirtualNetworkInterfaceRequirements() {
    return virtualNetworkInterfaceRequirements;
  }

  public void setVirtualNetworkInterfaceRequirements(List<VirtualNetworkInterfaceRequirements> virtualNetworkInterfaceRequirements) {
    this.virtualNetworkInterfaceRequirements = virtualNetworkInterfaceRequirements;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppExternalCpd appExternalCpd = (AppExternalCpd) o;
    return Objects.equals(this.cpdId, appExternalCpd.cpdId) &&
        Objects.equals(this.layerProtocol, appExternalCpd.layerProtocol) &&
        Objects.equals(this.cpRole, appExternalCpd.cpRole) &&
        Objects.equals(this.description, appExternalCpd.description) &&
        Objects.equals(this.addressData, appExternalCpd.addressData) &&
        Objects.equals(this.virtualNetworkInterfaceRequirements, appExternalCpd.virtualNetworkInterfaceRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpdId, layerProtocol, cpRole, description, addressData, virtualNetworkInterfaceRequirements);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppExternalCpd {\n");
    
    sb.append("    cpdId: ").append(toIndentedString(cpdId)).append("\n");
    sb.append("    layerProtocol: ").append(toIndentedString(layerProtocol)).append("\n");
    sb.append("    cpRole: ").append(toIndentedString(cpRole)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addressData: ").append(toIndentedString(addressData)).append("\n");
    sb.append("    virtualNetworkInterfaceRequirements: ").append(toIndentedString(virtualNetworkInterfaceRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

