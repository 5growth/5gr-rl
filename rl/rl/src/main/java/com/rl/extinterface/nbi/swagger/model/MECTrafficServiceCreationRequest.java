/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.rl.extinterface.nbi.swagger.model.DNSRuleDescriptor;
import com.rl.extinterface.nbi.swagger.model.LatencyDescriptor;
import com.rl.extinterface.nbi.swagger.model.ServiceDependency;
import com.rl.extinterface.nbi.swagger.model.ServiceDescriptor;
import com.rl.extinterface.nbi.swagger.model.TrafficRuleDescriptor;
import com.rl.extinterface.nbi.swagger.model.TransportDependency;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MECTrafficServiceCreationRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class MECTrafficServiceCreationRequest {
  @SerializedName("requestId")
  private String requestId = null;

  @SerializedName("regionId")
  private String regionId = null;

  @SerializedName("appServiceRequired")
  private List<ServiceDependency> appServiceRequired = null;

  @SerializedName("appServiceOptional")
  private List<ServiceDependency> appServiceOptional = null;

  @SerializedName("appServiceProduced")
  private List<ServiceDescriptor> appServiceProduced = null;

  @SerializedName("transportDependencies")
  private List<TransportDependency> transportDependencies = null;

  @SerializedName("appTrafficRule")
  private List<TrafficRuleDescriptor> appTrafficRule = null;

  @SerializedName("appDNSRule")
  private List<DNSRuleDescriptor> appDNSRule = null;

  @SerializedName("appLatency")
  private LatencyDescriptor appLatency = null;

  /**
   * Status of the request.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    FAILED("FAILED"),
    
    PENDING("PENDING"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("createdAt")
  private String createdAt = null;

  @SerializedName("lastModified")
  private String lastModified = null;

  public MECTrafficServiceCreationRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier of the request, assigned by the MEC plugin at creation time.
   * @return requestId
  **/
  @ApiModelProperty(value = "Identifier of the request, assigned by the MEC plugin at creation time.")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public MECTrafficServiceCreationRequest regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

   /**
   * Identifier of the region where the MEC app will be instantiated.
   * @return regionId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the region where the MEC app will be instantiated.")
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }

  public MECTrafficServiceCreationRequest appServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
    return this;
  }

  public MECTrafficServiceCreationRequest addAppServiceRequiredItem(ServiceDependency appServiceRequiredItem) {
    if (this.appServiceRequired == null) {
      this.appServiceRequired = new ArrayList<ServiceDependency>();
    }
    this.appServiceRequired.add(appServiceRequiredItem);
    return this;
  }

   /**
   * Describes services a mobile edge application requires to run.
   * @return appServiceRequired
  **/
  @ApiModelProperty(value = "Describes services a mobile edge application requires to run.")
  public List<ServiceDependency> getAppServiceRequired() {
    return appServiceRequired;
  }

  public void setAppServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
  }

  public MECTrafficServiceCreationRequest appServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
    return this;
  }

  public MECTrafficServiceCreationRequest addAppServiceOptionalItem(ServiceDependency appServiceOptionalItem) {
    if (this.appServiceOptional == null) {
      this.appServiceOptional = new ArrayList<ServiceDependency>();
    }
    this.appServiceOptional.add(appServiceOptionalItem);
    return this;
  }

   /**
   * Describes services a mobile edge application may use if available.
   * @return appServiceOptional
  **/
  @ApiModelProperty(value = "Describes services a mobile edge application may use if available.")
  public List<ServiceDependency> getAppServiceOptional() {
    return appServiceOptional;
  }

  public void setAppServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
  }

  public MECTrafficServiceCreationRequest appServiceProduced(List<ServiceDescriptor> appServiceProduced) {
    this.appServiceProduced = appServiceProduced;
    return this;
  }

  public MECTrafficServiceCreationRequest addAppServiceProducedItem(ServiceDescriptor appServiceProducedItem) {
    if (this.appServiceProduced == null) {
      this.appServiceProduced = new ArrayList<ServiceDescriptor>();
    }
    this.appServiceProduced.add(appServiceProducedItem);
    return this;
  }

   /**
   * Describes services a mobile edge application is able to produce to the platform or other mobile edge applications. Only relevant for service-producing apps.
   * @return appServiceProduced
  **/
  @ApiModelProperty(value = "Describes services a mobile edge application is able to produce to the platform or other mobile edge applications. Only relevant for service-producing apps.")
  public List<ServiceDescriptor> getAppServiceProduced() {
    return appServiceProduced;
  }

  public void setAppServiceProduced(List<ServiceDescriptor> appServiceProduced) {
    this.appServiceProduced = appServiceProduced;
  }

  public MECTrafficServiceCreationRequest transportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
    return this;
  }

  public MECTrafficServiceCreationRequest addTransportDependenciesItem(TransportDependency transportDependenciesItem) {
    if (this.transportDependencies == null) {
      this.transportDependencies = new ArrayList<TransportDependency>();
    }
    this.transportDependencies.add(transportDependenciesItem);
    return this;
  }

   /**
   * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.
   * @return transportDependencies
  **/
  @ApiModelProperty(value = "Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.")
  public List<TransportDependency> getTransportDependencies() {
    return transportDependencies;
  }

  public void setTransportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
  }

  public MECTrafficServiceCreationRequest appTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
    return this;
  }

  public MECTrafficServiceCreationRequest addAppTrafficRuleItem(TrafficRuleDescriptor appTrafficRuleItem) {
    if (this.appTrafficRule == null) {
      this.appTrafficRule = new ArrayList<TrafficRuleDescriptor>();
    }
    this.appTrafficRule.add(appTrafficRuleItem);
    return this;
  }

   /**
   * Describes traffic rules the mobile edge application requires.
   * @return appTrafficRule
  **/
  @ApiModelProperty(value = "Describes traffic rules the mobile edge application requires.")
  public List<TrafficRuleDescriptor> getAppTrafficRule() {
    return appTrafficRule;
  }

  public void setAppTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
  }

  public MECTrafficServiceCreationRequest appDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
    return this;
  }

  public MECTrafficServiceCreationRequest addAppDNSRuleItem(DNSRuleDescriptor appDNSRuleItem) {
    if (this.appDNSRule == null) {
      this.appDNSRule = new ArrayList<DNSRuleDescriptor>();
    }
    this.appDNSRule.add(appDNSRuleItem);
    return this;
  }

   /**
   * Describes DNS rules the mobile edge application requires.
   * @return appDNSRule
  **/
  @ApiModelProperty(value = "Describes DNS rules the mobile edge application requires.")
  public List<DNSRuleDescriptor> getAppDNSRule() {
    return appDNSRule;
  }

  public void setAppDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
  }

  public MECTrafficServiceCreationRequest appLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
    return this;
  }

   /**
   * Get appLatency
   * @return appLatency
  **/
  @ApiModelProperty(value = "")
  public LatencyDescriptor getAppLatency() {
    return appLatency;
  }

  public void setAppLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
  }

  public MECTrafficServiceCreationRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the request.
   * @return status
  **/
  @ApiModelProperty(value = "Status of the request.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MECTrafficServiceCreationRequest createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp of when service request was created.
   * @return createdAt
  **/
  @ApiModelProperty(value = "Timestamp of when service request was created.")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public MECTrafficServiceCreationRequest lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Timestamp of when service was last modified (e.g., deleted).
   * @return lastModified
  **/
  @ApiModelProperty(value = "Timestamp of when service was last modified (e.g., deleted).")
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MECTrafficServiceCreationRequest meCTrafficServiceCreationRequest = (MECTrafficServiceCreationRequest) o;
    return Objects.equals(this.requestId, meCTrafficServiceCreationRequest.requestId) &&
        Objects.equals(this.regionId, meCTrafficServiceCreationRequest.regionId) &&
        Objects.equals(this.appServiceRequired, meCTrafficServiceCreationRequest.appServiceRequired) &&
        Objects.equals(this.appServiceOptional, meCTrafficServiceCreationRequest.appServiceOptional) &&
        Objects.equals(this.appServiceProduced, meCTrafficServiceCreationRequest.appServiceProduced) &&
        Objects.equals(this.transportDependencies, meCTrafficServiceCreationRequest.transportDependencies) &&
        Objects.equals(this.appTrafficRule, meCTrafficServiceCreationRequest.appTrafficRule) &&
        Objects.equals(this.appDNSRule, meCTrafficServiceCreationRequest.appDNSRule) &&
        Objects.equals(this.appLatency, meCTrafficServiceCreationRequest.appLatency) &&
        Objects.equals(this.status, meCTrafficServiceCreationRequest.status) &&
        Objects.equals(this.createdAt, meCTrafficServiceCreationRequest.createdAt) &&
        Objects.equals(this.lastModified, meCTrafficServiceCreationRequest.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, regionId, appServiceRequired, appServiceOptional, appServiceProduced, transportDependencies, appTrafficRule, appDNSRule, appLatency, status, createdAt, lastModified);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MECTrafficServiceCreationRequest {\n");
    
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    appServiceRequired: ").append(toIndentedString(appServiceRequired)).append("\n");
    sb.append("    appServiceOptional: ").append(toIndentedString(appServiceOptional)).append("\n");
    sb.append("    appServiceProduced: ").append(toIndentedString(appServiceProduced)).append("\n");
    sb.append("    transportDependencies: ").append(toIndentedString(transportDependencies)).append("\n");
    sb.append("    appTrafficRule: ").append(toIndentedString(appTrafficRule)).append("\n");
    sb.append("    appDNSRule: ").append(toIndentedString(appDNSRule)).append("\n");
    sb.append("    appLatency: ").append(toIndentedString(appLatency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

