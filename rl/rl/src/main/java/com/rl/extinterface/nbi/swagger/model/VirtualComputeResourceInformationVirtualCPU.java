/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * It defines the virtual CPU(s) characteristics of the consumable virtualised compute resource.
 */
@ApiModel(description = "It defines the virtual CPU(s) characteristics of the consumable virtualised compute resource.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class VirtualComputeResourceInformationVirtualCPU {
  @SerializedName("cpuArchitecture")
  private String cpuArchitecture = null;

  @SerializedName("cpuClock")
  private BigDecimal cpuClock = null;

  @SerializedName("numVirtualCpu")
  private BigDecimal numVirtualCpu = null;

  @SerializedName("virtualCpuOversubscriptionPolicy")
  private String virtualCpuOversubscriptionPolicy = null;

  @SerializedName("virtualCpuPinningSupported")
  private Boolean virtualCpuPinningSupported = null;

  public VirtualComputeResourceInformationVirtualCPU cpuArchitecture(String cpuArchitecture) {
    this.cpuArchitecture = cpuArchitecture;
    return this;
  }

   /**
   * CPU architecture type. Examples are x86, ARM.
   * @return cpuArchitecture
  **/
  @ApiModelProperty(required = true, value = "CPU architecture type. Examples are x86, ARM.")
  public String getCpuArchitecture() {
    return cpuArchitecture;
  }

  public void setCpuArchitecture(String cpuArchitecture) {
    this.cpuArchitecture = cpuArchitecture;
  }

  public VirtualComputeResourceInformationVirtualCPU cpuClock(BigDecimal cpuClock) {
    this.cpuClock = cpuClock;
    return this;
  }

   /**
   * Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.
   * @return cpuClock
  **/
  @ApiModelProperty(required = true, value = "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.")
  public BigDecimal getCpuClock() {
    return cpuClock;
  }

  public void setCpuClock(BigDecimal cpuClock) {
    this.cpuClock = cpuClock;
  }

  public VirtualComputeResourceInformationVirtualCPU numVirtualCpu(BigDecimal numVirtualCpu) {
    this.numVirtualCpu = numVirtualCpu;
    return this;
  }

   /**
   * Number of virtual CPUs. Cardinality \&quot;1\&quot; covers the case where a specific configuration for the consumable resource is advertised.
   * @return numVirtualCpu
  **/
  @ApiModelProperty(required = true, value = "Number of virtual CPUs. Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.")
  public BigDecimal getNumVirtualCpu() {
    return numVirtualCpu;
  }

  public void setNumVirtualCpu(BigDecimal numVirtualCpu) {
    this.numVirtualCpu = numVirtualCpu;
  }

  public VirtualComputeResourceInformationVirtualCPU virtualCpuOversubscriptionPolicy(String virtualCpuOversubscriptionPolicy) {
    this.virtualCpuOversubscriptionPolicy = virtualCpuOversubscriptionPolicy;
    return this;
  }

   /**
   * The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no concrete policy is defined.
   * @return virtualCpuOversubscriptionPolicy
  **/
  @ApiModelProperty(required = true, value = "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no concrete policy is defined.")
  public String getVirtualCpuOversubscriptionPolicy() {
    return virtualCpuOversubscriptionPolicy;
  }

  public void setVirtualCpuOversubscriptionPolicy(String virtualCpuOversubscriptionPolicy) {
    this.virtualCpuOversubscriptionPolicy = virtualCpuOversubscriptionPolicy;
  }

  public VirtualComputeResourceInformationVirtualCPU virtualCpuPinningSupported(Boolean virtualCpuPinningSupported) {
    this.virtualCpuPinningSupported = virtualCpuPinningSupported;
    return this;
  }

   /**
   * It defines whether CPU pinning capability is available on the consumable virtualised compute resource.
   * @return virtualCpuPinningSupported
  **/
  @ApiModelProperty(required = true, value = "It defines whether CPU pinning capability is available on the consumable virtualised compute resource.")
  public Boolean isVirtualCpuPinningSupported() {
    return virtualCpuPinningSupported;
  }

  public void setVirtualCpuPinningSupported(Boolean virtualCpuPinningSupported) {
    this.virtualCpuPinningSupported = virtualCpuPinningSupported;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualComputeResourceInformationVirtualCPU virtualComputeResourceInformationVirtualCPU = (VirtualComputeResourceInformationVirtualCPU) o;
    return Objects.equals(this.cpuArchitecture, virtualComputeResourceInformationVirtualCPU.cpuArchitecture) &&
        Objects.equals(this.cpuClock, virtualComputeResourceInformationVirtualCPU.cpuClock) &&
        Objects.equals(this.numVirtualCpu, virtualComputeResourceInformationVirtualCPU.numVirtualCpu) &&
        Objects.equals(this.virtualCpuOversubscriptionPolicy, virtualComputeResourceInformationVirtualCPU.virtualCpuOversubscriptionPolicy) &&
        Objects.equals(this.virtualCpuPinningSupported, virtualComputeResourceInformationVirtualCPU.virtualCpuPinningSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuArchitecture, cpuClock, numVirtualCpu, virtualCpuOversubscriptionPolicy, virtualCpuPinningSupported);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualComputeResourceInformationVirtualCPU {\n");
    
    sb.append("    cpuArchitecture: ").append(toIndentedString(cpuArchitecture)).append("\n");
    sb.append("    cpuClock: ").append(toIndentedString(cpuClock)).append("\n");
    sb.append("    numVirtualCpu: ").append(toIndentedString(numVirtualCpu)).append("\n");
    sb.append("    virtualCpuOversubscriptionPolicy: ").append(toIndentedString(virtualCpuOversubscriptionPolicy)).append("\n");
    sb.append("    virtualCpuPinningSupported: ").append(toIndentedString(virtualCpuPinningSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

