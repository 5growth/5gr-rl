/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rl.extinterface.nbi.swagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * geographical location info covered by radio region
 */
@ApiModel(description = "geographical location info covered by radio region")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:38:09.537Z")



public class NfviPopsInnerNfviPopAttributesCovrageLocationInfo {
  @SerializedName("latitude")
  private Double latitude = null;

  @SerializedName("longitude")
  private Double longitude = null;

  @SerializedName("altitude")
  private Float altitude = null;

  @SerializedName("range")
  private Float range = null;

  public NfviPopsInnerNfviPopAttributesCovrageLocationInfo latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

   /**
   * latitude of location Info.
   * @return latitude
  **/
  @ApiModelProperty(required = true, value = "latitude of location Info.")
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }

  public NfviPopsInnerNfviPopAttributesCovrageLocationInfo longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

   /**
   * longitude of location Info.
   * @return longitude
  **/
  @ApiModelProperty(required = true, value = "longitude of location Info.")
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }

  public NfviPopsInnerNfviPopAttributesCovrageLocationInfo altitude(Float altitude) {
    this.altitude = altitude;
    return this;
  }

   /**
   * altitude of location Info.
   * @return altitude
  **/
  @ApiModelProperty(required = true, value = "altitude of location Info.")
  public Float getAltitude() {
    return altitude;
  }

  public void setAltitude(Float altitude) {
    this.altitude = altitude;
  }

  public NfviPopsInnerNfviPopAttributesCovrageLocationInfo range(Float range) {
    this.range = range;
    return this;
  }

   /**
   * radius of location Info.
   * @return range
  **/
  @ApiModelProperty(required = true, value = "radius of location Info.")
  public Float getRange() {
    return range;
  }

  public void setRange(Float range) {
    this.range = range;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfviPopsInnerNfviPopAttributesCovrageLocationInfo nfviPopsInnerNfviPopAttributesCovrageLocationInfo = (NfviPopsInnerNfviPopAttributesCovrageLocationInfo) o;
    return Objects.equals(this.latitude, nfviPopsInnerNfviPopAttributesCovrageLocationInfo.latitude) &&
        Objects.equals(this.longitude, nfviPopsInnerNfviPopAttributesCovrageLocationInfo.longitude) &&
        Objects.equals(this.altitude, nfviPopsInnerNfviPopAttributesCovrageLocationInfo.altitude) &&
        Objects.equals(this.range, nfviPopsInnerNfviPopAttributesCovrageLocationInfo.range);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latitude, longitude, altitude, range);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfviPopsInnerNfviPopAttributesCovrageLocationInfo {\n");
    
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

