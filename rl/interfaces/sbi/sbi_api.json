{
  "definitions": {
    "VLANInfo": {
      "description": "info for VLAN",
      "items": {
        "required": [
          "ConnectivityEndpoint",
          "Values"
        ],
        "properties": {
          "ConnectivityEndpoint": {
            "type": "string",
            "description": "VIM endpoint connecting with WIM"
          },
          "Values": {
            "type": "array",
            "description": "valn id list",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "PNFInfo": {
      "description": "Info of PNF",
      "items": {
        "required": [
          "PnfId",
          "MetaData"
        ],
        "properties": {
          "PnfId": {
            "type": "string",
            "description": "PNF identifier"
          },
          "MetaData": {
            "$ref": "#/definitions/metaData"
          }
        }
      }
    },
    "PNFlist": {
      "description": "List of supported PNF",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "pnfinfo"
        ],
        "properties": {
          "pnfinfo": {
            "$ref": "#/definitions/PNFInfo"
          }
        }
      }
    },
    "VirtualMemoryData": {
      "description": "The virtual memory of the virtualised compute.",
      "required": [
        "virtualMemSize"
      ],
      "properties": {
        "virtualMemSize": {
          "description": "Amount of virtual memory (e.g. in MB).",
          "type": "number"
        },
        "numaEnabled": {
          "description": "It specifies the memory allocation to be  cognisant of the relevant process/core allocation. The cardinality can be 0 during the allocation request, if no particular value is requested.",
          "type": "boolean"
        },
        "virtualMemOversubscriptionPolicy": {
          "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 during the allocation request, if no particular value is requested.",
          "type": "string"
        }
      }
    },
    "VirtualCpuData": {
      "description": "The virtual memory of the virtualised compute.",
      "required": [
        "numVirtualCpu"
      ],
      "properties": {
        "cpuArchitecture": {
          "description": "CPU architecture type. Examples are x86, ARM. The cardinality can be 0 during the allocation request, if no particular CPU architecture type is requested.",
          "type": "string"
        },
        "numVirtualCpu": {
          "description": "Number of virtual CPUs",
          "type": "number"
        },
        "virtualCpuClock": {
          "description": "Minimum virtual CPU clock rate (e.g. in MHz). The cardinality can be 0 during the allocation request, if no particular value is requested.",
          "type": "number"
        },
        "virtualCpuOversubscriptionPolicy": {
          "description": "The CPU core oversubscription policy e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 during the allocation request, if no particular value is requested.",
          "type": "string"
        },
        "virtualCpuPinning": {
          "$ref": "#/definitions/VirtualCpuPinningData"
        }
      }
    },
    "VirtualCpuPinningData": {
      "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
      "properties": {
        "cpuPinningPolicy": {
          "description": "ndicates the policy for CPU pinning. The policy can take values of \"static\" or \"dynamic\". The cardinality can be 0 during the allocation request, if no particular value is requested.",
          "type": "string",
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "cpuPinningMap": {
          "description": "If cpuPinningPolicy is defined as \"static\", the cpuPinningMap provides the map of pinning virtual CPU cores to physical CPU cores/threads. Cardinality is 0 if cpuPinningPolicy has a different value than \"static\".",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "RequestAdditionalCapabilityData": {
      "required": [
        "requestedAdditionalCapabilityName"
      ],
      "properties": {
        "requestedAdditionalCapabilityName": {
          "description": "Identifies a requested additional capability for the VDU. ETSI GS NFV-IFA 002 describes acceleration capabilities.",
          "type": "string"
        },
        "supportMandatory": {
          "description": "Indicates whether the requested additional capability is mandatory for successful operation.",
          "type": "boolean"
        },
        "minRequestedAdditionalCapabilityVersion": {
          "description": "Identifies the minimum version of the requested additional capability.",
          "type": "string"
        },
        "preferredRequestedAdditionalCapabilityVersion": {
          "description": "Identifies the preferred version of the requested additional capability.",
          "type": "string"
        },
        "targetPerformanceParameters": {
          "description": "Identifies specific attributes, dependent on the requested additional capability type.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "VirtualComputeDescription": {
      "description": "Describes CPU, Memory and acceleration requirements of the Virtualisation machine.",
      "required": [
        "virtualComputeDescId",
        "virtualMemory",
        "virtualCpu"
      ],
      "properties": {
        "virtualComputeDescId": {
          "description": "Unique identifier of this VirtualComputeDescription in the appD.",
          "type": "string"
        },
        "requestAdditionalCapabilities": {
          "description": "Specifies requirements for additional  capabilities. These may be for a range of purposes. One example is acceleration related capabilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestAdditionalCapabilityData"
          }
        },
        "virtualMemory": {
          "$ref": "#/definitions/VirtualMemoryData"
        },
        "virtualCpu": {
          "$ref": "#/definitions/VirtualCpuData"
        }
      }
    },
    "SwImageDescriptor": {
      "description": "Describes the software image which is directly loaded on the virtualisation machine instantiating this Application.",
      "required": [
        "id",
        "name",
        "containerFormat",
        "swImage"
      ],
      "properties": {
        "id": {
          "description": "The identifier of this software image.",
          "type": "string"
        },
        "name": {
          "description": "The name of this software image.",
          "type": "string"
        },
        "version": {
          "description": "The version of this software image.",
          "type": "string"
        },
        "checksum": {
          "description": "The checksum of this software image",
          "type": "string"
        },
        "containerFormat": {
          "description": "The container format describes the container file format in which software image is provided.",
          "type": "string"
        },
        "diskFormat": {
          "description": "The disk format of a software image is the format of the underlying disk image.",
          "type": "string"
        },
        "minDisk": {
          "description": "The minimal disk size requirement for this software image. The value of the \"size of storage\" attribute of the VirtualStorageDesc referencing this SwImageDesc shall not be smaller than the value of minDisk.",
          "type": "number"
        },
        "minRam": {
          "description": "The minimal RAM requirement for this software image. The value of the \"size\" attribute of VirtualMemoryData of the Vdu referencing this SwImageDesc shall not be smaller than the value of minRam.",
          "type": "number"
        },
        "size": {
          "description": "The size of this software image.",
          "type": "number"
        },
        "swImage": {
          "description": "This is a reference to the actual software image. The reference can be relative to the root of the VNF Package or can be a URL.",
          "type": "string"
        },
        "operatingSystem": {
          "description": "Identifies the operating system used in the software image. This attribute may also identify if a 32 bit or 64 bit software image is used.",
          "type": "string"
        },
        "supportedVirtualizationEnvironment": {
          "description": "Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VirtualStorageDescriptor": {
      "description": "Defines descriptors of virtual storage resources to be used by the mobile edge application.",
      "required": [
        "id",
        "typeOfStorage",
        "sizeOfStorage"
      ],
      "properties": {
        "id": {
          "description": "The identifier of this virtual storage descriptor in the appD.",
          "type": "string"
        },
        "typeOfStorage": {
          "description": "Type of virtualised storage resource (e.g. volume, object).",
          "type": "string"
        },
        "sizeOfStorage": {
          "description": "Size of virtualised storage resource (e.g. size of volume, in GB).",
          "type": "number"
        },
        "rdmaEnabled": {
          "description": "Indicate if the storage supports RDMA.",
          "type": "boolean"
        },
        "swImageDesc": {
          "description": "Software image to be loaded on the VirtualStorage Resource created based on this VirtualStorageDescriptor identifier.",
          "type": "string"
        }
      }
    },
    "VirtualNetworkInterfaceRequirements": {
      "required": [
        "supportMandatory",
        "requirement"
      ],
      "properties": {
        "name": {
          "description": "Provides a human readable name for this requirement.",
          "type": "string"
        },
        "description": {
          "description": "Provides a human readable description for this requirement.",
          "type": "string"
        },
        "supportMandatory": {
          "description": "Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation or desirable (FALSE).",
          "type": "boolean"
        },
        "requirement": {
          "description": "Specifies a requirement such as the support of SR-IOV, a particular data plane acceleration library, an API to be exposed by a NIC, etc.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "AddressData": {
      "required": [
        "addressType"
      ],
      "properties": {
        "addressType": {
          "description": "Describes the type of the address to be assigned to the CP instantiated from the parent CPD. The content type shall be aligned with the address type supported by the layerProtocol attribute of the parent CPD.",
          "type": "string",
          "enum": [
            "MAC",
            "IPV4",
            "IPV6"
          ]
        },
        "l2AddressData": {
          "description": "Provides the information on the MAC addresses to be assigned to the CP(s) instantiated from the parent CPD. Shall be present when the addressType is MAC address.",
          "type": "object",
          "additionalProperties": true
        },
        "l3AddressData": {
          "description": "Provides the information on the IP addresses to be assigned to the CP instantiated from the parent CPD. Shall be present when the addressType is IP address.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "CategoryRef": {
      "description": "A category reference of the service.",
      "required": [
        "href",
        "id",
        "name",
        "version"
      ],
      "properties": {
        "href": {
          "description": "Reference of the catalogue.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the category.",
          "type": "string"
        },
        "name": {
          "description": "Name of the category.",
          "type": "string"
        },
        "version": {
          "description": "Category version.",
          "type": "string"
        }
      }
    },
    "AppExternalCpd": {
      "required": [
        "cpdId",
        "layerProtocol"
      ],
      "properties": {
        "cpdId": {
          "description": "Identifier of this cpd information element.",
          "type": "string"
        },
        "layerProtocol": {
          "description": "Identifies which protocol the CP uses for connectivity purposes (Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire, etc.).",
          "type": "string",
          "enum": [
            "Ethernet",
            "MPLS",
            "ODU2",
            "IPV4",
            "IPV6",
            "Pseudo-Wire"
          ]
        },
        "cpRole": {
          "description": "Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.",
          "type": "string"
        },
        "description": {
          "description": "Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).",
          "type": "string"
        },
        "addressData": {
          "description": "Provides information on the addresses to be assigned to the CP(s) instantiated from this CPD.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressData"
          }
        },
        "virtualNetworkInterfaceRequirements": {
          "description": "Specifies requirements on a virtual network interface realizing the CPs instantiated from this CPD.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkInterfaceRequirements"
          }
        }
      }
    },
    "ServiceDescriptor": {
      "required": [
        "serName",
        "version"
      ],
      "properties": {
        "serName": {
          "description": "The name of the service, for example, RNIS, LocationService, etc.",
          "type": "string"
        },
        "serCategory": {
          "$ref": "#/definitions/CategoryRef"
        },
        "version": {
          "description": "The version of the service.",
          "type": "string"
        },
        "transportsSupported": {
          "description": "Indicates transport and serialization formats supported made available to the service-consuming application. Defaults to REST+JSON if absent.",
          "type": "object",
          "properties": {
            "transport": {
              "$ref": "#/definitions/TransportDescriptor"
            },
            "serializers": {
              "description": "Information about the serializers in this binding, as defined in the SerializerTypes type in ETSI GS MEC 011.",
              "type": "string",
              "enum": [
                "JSON",
                "XML",
                "PROTOBUF3"
              ]
            }
          }
        }
      }
    },
    "ServiceDependency": {
      "required": [
        "serName",
        "version"
      ],
      "properties": {
        "serName": {
          "description": "The name of the service, for example, RNIS, LocationService, etc.",
          "type": "string"
        },
        "serCategory": {
          "$ref": "#/definitions/CategoryRef"
        },
        "version": {
          "description": "The version of the service.",
          "type": "string"
        },
        "serTransportDependencies": {
          "description": "Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. This attribute indicates groups of transport bindings that a service-consuming ME application supports for the consumption of the ME service defined by this ServiceDependency structure. If at leastone of the indicated groups is supported by the service it may be consumed by the application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportDependency"
          }
        },
        "requestedPermissions": {
          "description": "Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009. The format of this attribute is left for the data model design stage.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "TransportDescriptor": {
      "description": "Information about the transport in a transport binding.",
      "required": [
        "type",
        "protocol",
        "version",
        "security"
      ],
      "properties": {
        "type": {
          "description": "Type of the transport, as defined in the TransportTypes type in ETSI GS MEC 011.",
          "type": "string",
          "enum": [
            "REST_HTTP",
            "MB_TOPIC_BASED",
            "MB_ROUTING",
            "MB_PUBSUB",
            "RPC",
            "RPC_STREAMING",
            "WEBSOCKET"
          ]
        },
        "protocol": {
          "description": "The name of the protocol used. Shall be set to \"HTTP\" for a REST API.",
          "type": "string"
        },
        "version": {
          "description": "The version of the protocol used.",
          "type": "string"
        },
        "security": {
          "description": "Information about the security used by the transport in ETSI GS MEC 011. (not implemented)",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "TransportDependency": {
      "required": [
        "transport",
        "serializers",
        "labels"
      ],
      "properties": {
        "transport": {
          "$ref": "#/definitions/TransportDescriptor"
        },
        "serializers": {
          "description": "Information about the serializers in this transport binding, as defined in the SerializerTypes type in ETSI GS MEC 011. Support for at least one of the entries is required in conjunction with the transport.",
          "type": "string",
          "enum": [
            "JSON",
            "XML",
            "PROTOBUF3"
          ]
        },
        "labels": {
          "description": "Set of labels that allow to define groups of transport bindings.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TunnelInfo": {
      "required": [
        "tunnelType",
        "tunnelDstAddress",
        "tunnelSrcAddress"
      ],
      "properties": {
        "tunnelType": {
          "description": "TType of tunnel (GTP-U, GRE, etc.)",
          "type": "string",
          "enum": [
            "GTP-U",
            "GRE"
          ]
        },
        "tunnelDstAddress": {
          "description": "Destination address of the tunnel.",
          "type": "string"
        },
        "tunnelSrcAddress": {
          "description": "Source address of the tunnel.",
          "type": "string"
        },
        "tunnelSpecificData": {
          "description": "Parameters specific to the tunnel.",
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "InterfaceDescriptor": {
      "required": [
        "interfaceType"
      ],
      "properties": {
        "interfaceType": {
          "description": "Type of interface (TUNNEL, MAC, IP, etc.)",
          "type": "string",
          "enum": [
            "TUNNEL",
            "MAC",
            "IP"
          ]
        },
        "tunnelInfo": {
          "$ref": "#/definitions/TunnelInfo"
        },
        "srcMACAddress": {
          "description": "If the interface type is MAC, the source address identifies the MAC address of the interface.",
          "type": "string"
        },
        "dstMACAddress": {
          "description": "If the interface type is MAC, the destination address identifies the MAC address of the interface. Only used for dstInterface.",
          "type": "string"
        },
        "dstIPAddress": {
          "description": "f the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.",
          "type": "string"
        }
      }
    },
    "TrafficFilter": {
      "properties": {
        "srcAddress": {
          "description": "An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dstAddress": {
          "description": "An IP address or a range of IP addresses. For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses. For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srcPort": {
          "description": "A port or a range of ports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dstPort": {
          "description": "A port or a range of ports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "protocol": {
          "description": "Specifies the protocol of the traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "Used for token based traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srcTunnelAddress": {
          "description": "Used for GTP tunnel based traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dstTunnelAddress": {
          "description": "Used for GTP tunnel based traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srcTunnelPort": {
          "description": "Used for GTP tunnel based traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dstTunnelPort": {
          "description": "Used for GTP tunnel based traffic rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "qci": {
          "description": "Used to match all packets that have the same QCI.",
          "type": "number"
        },
        "dscp": {
          "description": "Used to match all IPv4 packets that have the same DSCP.",
          "type": "number"
        },
        "tc": {
          "description": "Used to match all IPv6 packets that have the same TC.",
          "type": "number"
        }
      }
    },
    "TrafficRuleDescriptor": {
      "required": [
        "trafficRuleId",
        "filterType",
        "priority",
        "trafficFilter",
        "action"
      ],
      "properties": {
        "trafficRuleId": {
          "description": "Identifies the traffic rule.",
          "type": "string"
        },
        "filterType": {
          "description": "Definition of filter type, i.e., per FLOW or PACKET. If it is per FLOW, the filter matches UE->EPC packets and the reverse packets are handled by the same context.",
          "type": "string",
          "enum": [
            "FLOW",
            "PACKET"
          ]
        },
        "priority": {
          "description": "Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.",
          "type": "number"
        },
        "trafficFilter": {
          "description": "The filter used to identify specific flow/packets that need to be handled by the MEC host.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrafficFilter"
          }
        },
        "action": {
          "description": "Identifies the action of the ME host data plane, when a packet matches the trafficFilter. The example actions include DROP, FORWARD, DECAPSULATED, FORWARD_AS_IS, PASSTHROUGH, DUPLICATED_DECAPSULATED, DUPLICATE_AS_IS.",
          "type": "string",
          "enum": [
            "DROP",
            "FORWARD",
            "DECAPSULATED",
            "FORWARD_AS_IS",
            "PASSTHROUGH",
            "DUPLICATED_DECAPSULATED",
            "DUPLICATE_AS_IS"
          ]
        },
        "dstInterface": {
          "description": "Describes the destination interface information, if the action is FORWARD. Some applications (e.g. inline/tap) require two interfaces, where the first is on the UE side and the second is on the EPC side.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterfaceDescriptor"
          }
        }
      }
    },
    "DNSRuleDescriptor": {
      "required": [
        "dnsRuleId",
        "domainName",
        "ipAddressType",
        "ipAddress"
      ],
      "properties": {
        "dnsRuleId": {
          "description": "Identifies the DNS rule.",
          "type": "string"
        },
        "domainName": {
          "description": "FQDN of the DNS rule.",
          "type": "string"
        },
        "ipAddressType": {
          "description": "Specifies the IP address type (IP_V6, IP_V4)",
          "type": "string",
          "enum": [
            "IP_V6",
            "IP_V4"
          ]
        },
        "ipAddress": {
          "description": "IP address given by the DNS rule.",
          "type": "string"
        },
        "ttl": {
          "description": "Time-to-live value.",
          "type": "number"
        }
      }
    },
    "LatencyDescriptor": {
      "description": "This is used to describe the maximum latency tolerated by the mobile edge application.",
      "required": [
        "timeUnit",
        "latency"
      ],
      "properties": {
        "timeUnit": {
          "description": "Time unit, e.g., ms",
          "type": "string"
        },
        "latency": {
          "description": "The value of the latency",
          "type": "number"
        }
      }
    },
    "MECTrafficServiceCreationRequest": {
      "required": [
        "regionId"
      ],
      "properties": {
        "requestId": {
          "description": "Identifier of the request, assigned by the MEC plugin at creation time.",
          "type": "string"
        },
        "regionId": {
          "description": "Identifier of the region where the MEC app will be instantiated.",
          "type": "string"
        },
        "appServiceRequired": {
          "description": "Describes services a mobile edge application requires to run.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "appServiceOptional": {
          "description": "Describes services a mobile edge application may use if available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "appServiceProduced": {
          "description": "Describes services a mobile edge application is able to produce to the platform or other mobile edge applications. Only relevant for service-producing apps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDescriptor"
          }
        },
        "transportDependencies": {
          "description": "Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportDependency"
          }
        },
        "appTrafficRule": {
          "description": "Describes traffic rules the mobile edge application requires.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrafficRuleDescriptor"
          }
        },
        "appDNSRule": {
          "description": "Describes DNS rules the mobile edge application requires.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DNSRuleDescriptor"
          }
        },
        "appLatency": {
          "$ref": "#/definitions/LatencyDescriptor"
        },
        "status": {
          "description": "Status of the request.",
          "type": "string",
          "enum": [
            "CREATED",
            "FAILED",
            "PENDING",
            "DELETED"
          ]
        },
        "createdAt": {
          "description": "Timestamp of when service request was created.",
          "type": "string"
        },
        "lastModified": {
          "description": "Timestamp of when service was last modified (e.g., deleted).",
          "type": "string"
        }
      }
    },
    "MECTrafficServiceCreationResponse": {
      "required": [
        "requestId"
      ],
      "properties": {
        "requestId": {
          "description": "Request identifier assigned by the MEC plugin. This will be used for future queries or service deletion requests.",
          "type": "string"
        }
      }
    },
    "TerminateAppInstanceOpConfig": {
      "description": "Configuration parameters for the Terminate application instance operation. This follows the TerminateVnfInstanceOpConfig definition of IFA 011.",
      "required": [
        "minGracefulTerminationTimeout"
      ],
      "properties": {
        "minGracefulTerminationTimeout": {
          "description": "Minimum timeout value for graceful termination of application instance.",
          "type": "number"
        },
        "macRecommendedGracefulTerminationTimeout": {
          "description": "Maximum recommended timeout value that can be needed to gracefully terminate an application instance of a particular type under certain conditions, such as maximum load condition. This is provided by application provider as information for the operator facilitating the selection of optimal timeout value. This value is not used as constraint.",
          "type": "number"
        }
      }
    },
    "ChangeAppInstanceStateOpConfig": {
      "description": "Configuration parameters for the change application instance state operation. This follows the OperateVnfOpConfig definition of IFA 011.",
      "required": [
        "minGracefulStopTimeout"
      ],
      "properties": {
        "minGracefulStopTimeout": {
          "description": "Minimum timeout value for graceful stop of application instance.",
          "type": "number"
        },
        "macRecommendedGracefulStopTimeout": {
          "description": "Maximum recommended timeout value that can be needed to gracefully stop an application instance of a particular type under certain conditions, such as maximum load condition. This is provided by application provider as information for the operator facilitating the selection of optimal timeout value. This value is not used as constraint.",
          "type": "number"
        }
      }
    },
    "AppD": {
      "required": [
        "appDId"
      ],
      "properties": {
        "appDId": {
          "description": "Identifier of this mobile edge application descriptor. This attribute shall be globally unique.",
          "type": "string"
        },
        "appName": {
          "description": "Name to identify the mobile edge application.",
          "type": "string"
        },
        "appProvider": {
          "description": "Provider of the application and of the AppD.",
          "type": "string"
        },
        "appSoftVersion": {
          "description": "AvailableIdentifies the version of software of the mobile edge application.",
          "type": "string"
        },
        "appDVersion": {
          "description": "Identifies the version of the application descriptor.",
          "type": "string"
        },
        "mecVersion": {
          "description": "Identifies version(s) of ME system compatible with the mobile edge application described in this version of the AppD.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appInfoName": {
          "description": "Human readable name for the ME application product. May change during the ME application product lifetime.",
          "type": "string"
        },
        "appDescription": {
          "description": "Human readable description of the mobile edge application.",
          "type": "string"
        },
        "virtualComputeDescriptor": {
          "$ref": "#/definitions/VirtualComputeDescription"
        },
        "swImageDescriptor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwImageDescriptor"
          }
        },
        "virtualStorageDescriptor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualStorageDescriptor"
          }
        },
        "appExtCpd": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppExternalCpd"
          }
        },
        "appServiceRequired": {
          "description": "Describes services a mobile edge application requires to run.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "appServiceOptional": {
          "description": "Describes services a mobile edge application may use if available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "transportDependencies": {
          "description": "Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportDependency"
          }
        },
        "appTrafficRule": {
          "description": "Describes traffic rules the mobile edge application requires.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrafficRuleDescriptor"
          }
        },
        "appDNSRule": {
          "description": "Describes DNS rules the mobile edge application requires.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DNSRuleDescriptor"
          }
        },
        "appLatency": {
          "$ref": "#/definitions/LatencyDescriptor"
        },
        "terminateAppInstanceOpConfig": {
          "$ref": "#/definitions/TerminateAppInstanceOpConfig"
        },
        "changeAppInstanceStateOpConfig": {
          "$ref": "#/definitions/ChangeAppInstanceStateOpConfig"
        }
      }
    },
    "RadioCoverageAreaList": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "radioCoverageAreaInfo"
        ],
        "properties": {
          "radioCoverageAreaInfo": {
            "type": "object",
            "required": [
              "coverageAreaId",
              "locationInfo",
              "coverageAreaMinBandwidth",
              "coverageAreaMaxBandwidth",
              "coverageAreaDelay"
            ],
            "properties": {
              "coverageAreaId": {
                "type": "string",
                "description": "(numbered) Identifier of the Radio Coverage Area"
              },
              "coverageAreaGoegraphicalInfo": {
                "type": "string",
                "description": "Identifier of the Radio Coverage Area Geographical Information"
              },
              "coverageAreaMinBandwidth": {
                "type": "number",
                "description": "Minimum Bandwidth of the Radio Coverage Area"
              },
              "coverageAreaMaxBandwidth": {
                "type": "number",
                "description": "Maximum Bandwidth of the Radio Coverage Area"
              },
              "coverageAreaDelay": {
                "type": "number",
                "description": "Minimum delay supported by the Radio Coverage Area."
              },
              "locationInfo": {
                "$ref": "#/definitions/LocationInfo"
              }
            },
            "description": "5GT - Element providing information for Radio Coverage Area supported by PoP."
          }
        }
      }
    },
    "LocationInfo": {
      "description": "Geographical location info of a region, expressed as a circle centered at specific coordinates and with a specified range.",
      "required": [
        "latitude",
        "longitude",
        "altitude",
        "range"
      ],
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "number"
        },
        "altitude": {
          "description": "Altitude coordinate",
          "type": "number"
        },
        "range": {
          "description": "Coverage radius (in km)",
          "type": "number"
        }
      }
    },
    "MECRegionInfo": {
      "description": "Information about a region.",
      "required": [
        "regionId"
      ],
      "properties": {
        "mecRegionInfo": {
          "type": "object",
          "properties": {
            "regionId": {
              "description": "Identifier of the region.",
              "type": "string"
            },
            "locationInfo": {
              "$ref": "#/definitions/LocationInfo"
            }
          }
        }
      }
    },
    "gateways": {
      "type": "array",
      "items": {
        "required": [
          "gatewayAttributes"
        ],
        "properties": {
          "gatewayAttributes": {
            "type": "object",
            "required": [
              "geographicalLocationInfo",
              "networkConnectivityEndpoint",
              "wimId",
              "gatewayId"
            ],
            "properties": {
              "geographicalLocationInfo": {
                "type": "string",
                "description": "It provides information about the geographic location (e.g. geographic coordinates or address of the building, etc.) of the NFVI resources that the VIM manages."
              },
              "wimId": {
                "type": "string",
                "description": "Identification of the WIM."
              },
              "networkConnectivityEndpoint": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "netGwIpAddress",
                    "netGwInterfceId"
                  ],
                  "properties": {
                    "netGwIpAddress": {
                      "type": "string",
                      "description": "5GT - Reachable Gw IPv4 Address in terms of A.B.C.D (/32)."
                    },
                    "netGwInterfceId": {
                      "type": "number",
                      "description": "5GT - Reachable Gw interface ID."
                    }
                  },
                  "description": "Information about network connectivity endpoints to the NFVI-PoP that the WIM manage."
                }
              },
              "gatewayId": {
                "type": "string",
                "description": "Identification of the gateway in the format IPv4."
              }
            }
          }
        }
      }
    },
    "virtualLinks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "virtualLink"
        ],
        "properties": {
          "virtualLink": {
            "type": "object",
            "required": [
              "virtualLinkId",
              "totalBandwidth",
              "availableBandwidth",
              "networkQoS",
              "srcGwId",
              "dstGwId"
            ],
            "properties": {
              "virtualLinkId": {
                "type": "string",
                "description": "(numbered) Identifier of the virtual link"
              },
              "totalBandwidth": {
                "type": "number",
                "description": "Total bandwidth capacity supported by the logical link (in Mbps)."
              },
              "availableBandwidth": {
                "type": "number",
                "description": "Available bandwidth capacity supported by the logical link (in Mbps)."
              },
              "networkQoS": {
                "type": "object",
                "required": [
                  "linkCostValue",
                  "linkDelayValue",
                  "packetLossRate"
                ],
                "description": "5GT - Element providing information about Quality of Service attributes (cost and delay) that the network shall support.",
                "properties": {
                  "linkCostValue": {
                    "type": "number",
                    "description": "5GT - Value of Link Cost"
                  },
                  "linkDelayValue": {
                    "type": "number",
                    "description": "5GT - Value of Link Delay (expressed in ms)"
                  },
                  "packetLossRate": {
                    "type": "number",
                    "description": "5GT - Link packet loss rate."
                  }
                }
              },
              "srcGwId": {
                "type": "string",
                "description": "5GT - Source NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
              },
              "srcLinkId": {
                "format": "uint32",
                "type": "integer",
                "description": "Local Logical Link Id."
              },
              "dstGwId": {
                "type": "string",
                "description": "5GT - Destination NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
              },
              "dstLinkId": {
                "format": "uint32",
                "type": "integer",
                "description": "Remote Logical Link Id."
              },
              "networkLayer": {
                "$ref": "#/definitions/networkLayer"
              }
            },
            "description": "5GT - Element providing information the attributes related to particular logical links between pair of NFVI-PoPs."
          }
        }
      }
    },
    "NetworkIds": {
      "type": "object",
      "required": [
        "networkId"
      ],
      "properties": {
        "networkId": {
          "type": "string",
          "description": "Identifier of the virtualised network resource(s) to be terminated."
        }
      }
    },
    "SubnetData": {
      "type": "object",
      "required": [
        "resourceId",
        "networkId",
        "ipVersion",
        "gatewayIp",
        "cidr",
        "isDhcpEnabled",
        "addressPool",
        "metadata"
      ],
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "Identifiers of the network Resource"
        },
        "networkId": {
          "type": "string",
          "description": "Network identifier the subnetwork Resource"
        },
        "ipVersion": {
          "type": "string",
          "description": "IP version of the subnetwork Resource"
        },
        "gatewayIp": {
          "type": "string",
          "description": "gateway of the subnetwork Resource"
        },
        "cidr": {
          "type": "string",
          "description": "cidr of the subnetwork Resource"
        },
        "isDhcpEnabled": {
          "type": "boolean",
          "description": "enable if dhcp of the network Resource"
        },
        "addressPool": {
          "type": "array",
          "description": "optional AddressPool to be used",
		      "items":{
		        "type": "integer"
		      }
        },
        "metadata": {
          "$ref": "#/definitions/metaData"
        }
      }
    },
    "AllocateParameters": {
      "type": "object",
      "required": [
        "affinityOrAntiAffinityConstraints",
        "locationConstraints",
        "metadata",
        "networkResourceName",
        "networkResourceType",
        "reservationId",
        "resourceGroupId",
        "typeNetworkData",
        "typeNetworkPortData",
        "typeSubnetData",
        "bandwidth",
        "delay",
        "networkType",
        "segmentType",
        "networkQoS",
        "isShared",
        "sharingCriteria",
        "layer3Attributes",
        "portType",
        "networkId",
        "segmentId",
        "ingressPointIPAddress",
        "ingressPointPortAddress",
        "egressPointAddress",
        "egressPointPortAddress",
        "wanLinkId"
      ],
      "properties": {
        "locationConstraints": {
          "type": "string",
          "description": "Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image."
        },
        "reservationId": {
          "type": "string",
          "description": "Identifier of the resource reservation applicable to this virtualised resource management operation."
        },
        "typeNetworkData": {
          "type": "string",
          "description": "The network data provides information about the particular virtual network resource to create. Cardinality can be \"0\" depending on the value of networkResourceType."
        },
        "affinityOrAntiAffinityConstraints": {
          "type": "string",
          "description": "The binary software image file."
        },
        "typeNetworkPortData": {
          "type": "string",
          "description": "The binary software image file."
        },
        "resourceGroupId": {
          "type": "string",
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain."
        },
        "metadata": {
          "type": "string",
          "description": "The binary software image file."
        },
        "networkResourceType": {
          "type": "string",
          "description": "Type of virtualised network resource. Possible values are: \"network\", \"subnet\" or network-port."
        },
        "networkResourceName": {
          "type": "string",
          "description": "Name provided by the consumer for the virtualised network resource to allocate. It can be used for identifying resources from consumer side."
        },
        "typeSubnetData": {
          "type": "string",
          "description": "The subnet data provides information about the particular sub-network resource to create."
        },
        "bandwidth": {
          "type": "number",
          "description": "The bandwidth of the virtual network interface (in Mbps)."
        },
        "delay": {
          "type": "string",
          "description": "Transmission delay."
        },
        "networkType": {
          "type": "string",
          "description": "The type of network that maps to the virtualised network."
        },
        "segmentType": {
          "type": "string",
          "description": "The isolated segment for the virtualised network."
        },
        "networkQoS": {
          "type": "string",
          "description": "Element providing information about Quality of Service attributes that the network shall support."
        },
        "isShared": {
          "type": "boolean",
          "description": "It defines whether the virtualised network is shared among consumers."
        },
        "sharingCriteria": {
          "type": "string",
          "description": "Only present for shared networks. Indicate the sharing criteria for this network. These criteria might be a list of authorized consumers."
        },
        "layer3Attributes": {
          "type": "string",
          "description": "The attribute allows setting up a network providing defined layer 3 connectivity."
        },
        "portType": {
          "type": "string",
          "description": "Type of network port."
        },
        "networkId": {
          "type": "string",
          "description": "Identifier of the network that the port belongs to."
        },
        "segmentId": {
          "type": "string",
          "description": "The isolated segment the network port belongs to."
        },
        "ingressPointIPAddress": {
          "type": "string",
          "description": "The ingress point IP Address."
        },
        "ingressPointPortAddress": {
          "type": "string",
          "description": "The ingress point Port(interface) Address."
        },
        "egressPointIPAddress": {
          "type": "string",
          "description": "The engress point IP Address."
        },
        "egressPointPortAddress": {
          "type": "string",
          "description": "The engress point Port(interface) Address."
        },
        "wanLinkId": {
          "type": "string",
          "description": "The logical link ID between two nodes."
        }
      }
    },
    "AllocateReply": {
      "type": "object",
      "required": [
        "networkId",
        "networkType",
        "segmentType"
      ],
      "properties": {
        "networkId": {
          "type": "string",
          "description": "Identifier of the network."
        },
        "networkType": {
          "type": "string",
          "description": "The type of network that maps to the virtualised network (VLAN, VXLAN, L3VPN)."
        },
        "segmentType": {
          "type": "string",
          "description": "The isolated segment for the virtualised network (i.e., vlan tag)"
        }
      }
    },
    "MECAppDInfo": {
      "type": "array",
      "items": {
        "required": [
          "appDAttributes"
        ],
        "properties": {
          "appDAttributes": {
            "type": "object",
            "required": [
              "appDInfo",
              "mecAppDId"
            ],
            "properties": {
              "appDInfo": {
                "type": "string",
                "description": "It provides information about MEC APPD (TBD)"
              },
              "mecAppDId": {
                "type": "string",
                "description": "Identification of the MEC APPdId"
              }
            }
          }
        }
      }
    },
    "NfviPops": {
      "type": "array",
      "items": {
        "required": [
          "nfviPopAttributes"
        ],
        "properties": {
          "nfviPopAttributes": {
            "type": "object",
            "required": [
              "pnflist",
              "geographicalLocationInfo",
              "networkConnectivityEndpoint",
              "nfviPopId",
              "vimId",
              "federatedVimId",
              "resourceZoneAttributes",
              "MecCapable",
              "MecRegions",
              "RadioCapable",
              "RadioAttributes"
            ],
            "properties": {
              "pnflist": {
                "$ref": "#/definitions/PNFlist"
              },
              "geographicalLocationInfo": {
                "type": "string",
                "description": "It provides information about the geographic location (e.g. geographic coordinates or address of the building, etc.) of the NFVI resources that the VIM manages."
              },
              "vimId": {
                "type": "string",
                "description": "Identification of the VIM."
              },
              "federatedVimId": {
                "type": "string",
                "description": "Identification of the Federated VIM."
              },
              "networkConnectivityEndpoint": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "netGwIpAddress"
                  ],
                  "properties": {
                    "netGwIpAddress": {
                      "type": "string",
                      "description": "5GT - Reachable Gw IPv4 Address in terms of A.B.C.D (/32)."
                    }
                  },
                  "description": "Information about network connectivity endpoints to the NFVI-PoP that the VIM manages which helps build topology information relative to NFVI-PoP connectivity to other NFVI-PoP or N-PoP."
                }
              },
              "nfviPopId": {
                "type": "string",
                "description": "Identification of the NFVI-PoP."
              },
              "resourceZoneAttributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "zoneId",
                    "zoneName",
                    "zoneState",
                    "zoneProperty",
                    "metadata",
                    "memoryResourceAttributes",
                    "cpuResourceAttributes",
                    "storageResourceAttributes"
                  ],
                  "properties": {
                    "zoneId": {
                      "type": "string",
                      "description": "The identifier of the Resource Zone."
                    },
                    "zoneName": {
                      "type": "string",
                      "description": "The name of the Resource Zone."
                    },
                    "zoneState": {
                      "type": "string",
                      "description": "Information about the current state of the Resource Zone, e.g. if the Resource Zone is available."
                    },
                    "zoneProperty": {
                      "type": "string",
                      "description": "Set of properties that define the capabilities associated to the Resource Zone. Examples of capabilities may include: support of certain compute resource types (e.g. low performance, acceleration capabilities, etc. association to certain NFVI-PoP physical segregation (e.g. different power or network sub-systems, availability of redundancy power sub-systems), etc."
                    },
                    "metadata": {
                      "type": "string",
                      "description": "List of metadata key-value pairs used to associate meaningful metadata to the NFVI-PoP Zone."
                    },
                    "memoryResourceAttributes": {
                      "type": "object",
                      "required": [
                        "availableCapacity",
                        "reservedCapacity",
                        "totalCapacity",
                        "allocatedCapacity"
                      ],
                      "properties": {
                        "availableCapacity": {
                          "type": "string",
                          "description": "The free capacity available for allocation and reservation of memory resources."
                        },
                        "reservedCapacity": {
                          "type": "string",
                          "description": "The reserved capacity of   memory resources."
                        },
                        "totalCapacity": {
                          "type": "string",
                          "description": "The total capacity of memory resources."
                        },
                        "allocatedCapacity": {
                          "type": "string",
                          "description": "The allocated capacity of memory resources."
                        }
                      }
                    },
                    "cpuResourceAttributes": {
                      "type": "object",
                      "required": [
                        "availableCapacity",
                        "reservedCapacity",
                        "totalCapacity",
                        "allocatedCapacity"
                      ],
                      "properties": {
                        "availableCapacity": {
                          "type": "string",
                          "description": "The free capacity available for allocation and reservation of CPU resources."
                        },
                        "reservedCapacity": {
                          "type": "string",
                          "description": "The reserved capacity of   CPU resources."
                        },
                        "totalCapacity": {
                          "type": "string",
                          "description": "The total capacity of CPU resources."
                        },
                        "allocatedCapacity": {
                          "type": "string",
                          "description": "The allocated capacity of CPU resources."
                        }
                      }
                    },
                    "storageResourceAttributes": {
                      "type": "object",
                      "required": [
                        "availableCapacity",
                        "reservedCapacity",
                        "totalCapacity",
                        "allocatedCapacity"
                      ],
                      "properties": {
                        "availableCapacity": {
                          "type": "string",
                          "description": "The free capacity available for allocation and reservation of storage resources."
                        },
                        "reservedCapacity": {
                          "type": "string",
                          "description": "The reserved capacity of storage resources."
                        },
                        "totalCapacity": {
                          "type": "string",
                          "description": "The total capacity of storage resources."
                        },
                        "allocatedCapacity": {
                          "type": "string",
                          "description": "The allocated capacity of storage resources."
                        }
                      }
                    }
                  }
                }
              },
              "MecCapable": {
                "type": "string",
                "description": "Set if PoP contains MEC attributes"
              },
              "MecRegions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MECRegionInfo"
                }
              },
              "RadioCapable": {
                "type": "string",
                "description": "Set if PoP contains Radio attributes"
              },
              "RadioCoverageAreas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "CoverageAreaId",
                    "CovrageLocationInfo",
                    "MinBandwidth",
                    "MaxBandwidth",
                    "Delay"
                  ],
                  "properties": {
                    "coverageAreaId": {
                      "type": "string",
                      "description": "Coverage Area Identifier supported by Radio PoP"
                    },
                    "covrageLocationInfo": {
                      "type": "object",
                      "description": "geographical location info covered by radio region",
                      "required": [
                        "latitude",
                        "longitude",
                        "altitude",
                        "range"
                      ],
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "format": "double",
                          "description": "latitude of location Info."
                        },
                        "longitude": {
                          "type": "number",
                          "format": "double",
                          "description": "longitude of location Info."
                        },
                        "altitude": {
                          "type": "number",
                          "format": "float",
                          "description": "altitude of location Info."
                        },
                        "range": {
                          "type": "number",
                          "format": "float",
                          "description": "radius of location Info."
                        }
                      }
                    },
                    "minBandwidth": {
                      "type": "number",
                      "description": "Minimummum bandwidth provided by the coverage area"
                    },
                    "maxBandwidth": {
                      "type": "number",
                      "description": "Maximum bandwidth provided by the coverage area"
                    },
                    "delay": {
                      "type": "number",
                      "description": "minimum delay guaranteed by the coverage area"
                    }
                  },
                  "description": "Information about Mec Specific parameters."
                }
              }
            }
          }
        }
      }
    },
    "networkLayer": {
      "type": "string",
      "description": "5GT - Describes the network layer capabilities of the Gw Layer 2 (L2) or Layer 3 (L3), i.e. Ethernet, IP, IP/MPLS -- see ETSI NFV-IFA 022 6.4.5.3."
    },
    "interNfviPopNetworkType": {
      "type": "string",
      "description": "5GT - Describes the network connectivity types, e.g., L2-VPN, EoMPLS, VXLAN, MPLS over GRE, ... -- see ETSI NFV-IFA 022 6.4.5.3."
    },
    "interNfviPopNetworkTopology": {
      "type": "string",
      "description": "5GT - Describes the network connectivity topology, i.e., p2p, mesh, tree -- see ETSI NFV-IFA 022 6.4.5.2."
    },
    "logicalLinkInterNfviPops": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "logicalLinks"
        ],
        "properties": {
          "logicalLinks": {
            "type": "object",
            "required": [
              "srcGwIpAddress",
              "localLinkId",
              "dstGwIpAddress",
              "remoteLinkId",
              "logicalLinkId",
              "totalBandwidth",
              "availableBandwidth",
              "networkQoS",
              "networkLayer",
              "interNfviPopNetworkType",
              "interNfviPopNetworkTopology"
            ],
            "properties": {
              "logicalLinkId": {
                "type": "string",
                "description": "(numbered) Identifier of the logical link"
              },
              "totalBandwidth": {
                "type": "number",
                "description": "Total bandwidth capacity supported by the logical link (in Mbps)."
              },
              "availableBandwidth": {
                "type": "number",
                "description": "Available bandwidth capacity supported by the logical link (in Mbps)."
              },
              "networkQoS": {
                "type": "object",
                "required": [
                  "linkCost",
                  "linkCostValue",
                  "linkDelay",
                  "linkDelayValue"
                ],
                "description": "5GT - Element providing information about Quality of Service attributes (cost and delay) that the network shall support.",
                "properties": {
                  "linkCostValue": {
                    "type": "number",
                    "description": "5GT - Value of Link Cost"
                  },
                  "linkCost": {
                    "type": "string",
                    "description": "5GT - Link cost name ."
                  },
                  "linkDelayValue": {
                    "type": "number",
                    "description": "5GT - Value of Link Delay (expressed in ms)"
                  },
                  "linkDelay": {
                    "type": "string",
                    "description": "5GT - Link delay name."
                  }
                }
              },
              "srcGwIpAddress": {
                "type": "string",
                "description": "5GT - Source NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
              },
              "localLinkId": {
                "format": "uint32",
                "type": "integer",
                "description": "Local Logical Link Id."
              },
              "dstGwIpAddress": {
                "type": "string",
                "description": "5GT - Destination NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
              },
              "remoteLinkId": {
                "format": "uint32",
                "type": "integer",
                "description": "Remote Logical Link Id."
              },
              "networkLayer": {
                "$ref": "#/definitions/networkLayer"
              },
              "interNfviPopNetworkType": {
                "$ref": "#/definitions/interNfviPopNetworkType"
              },
              "interNfviPopNetworkTopology": {
                "$ref": "#/definitions/interNfviPopNetworkTopology"
              }
            },
            "description": "5GT - Element providing information the attributes related to particular logical links between pair of NFVI-PoPs."
          }
        }
      }
    },
    "interNfviPopConnectivityRequest": {
      "type": "object",
      "required": [
        "logicalLinkPathList",
        "networkLayer",
        "interNfviPopNetworkType",
        "metaData"
      ],
      "properties": {
        "logicalLinkPathList": {
          "$ref": "#/definitions/logicalLinkPathList"
        },
        "networkLayer": {
          "$ref": "#/definitions/networkLayer"
        },
        "interNfviPopNetworkType": {
          "$ref": "#/definitions/interNfviPopNetworkType"
        },
        "metaData": {
          "$ref": "#/definitions/metaData"
        }
      }
    },
    "interNfviPopConnnectivityId": {
      "type": "string",
      "description": "Identifier provided by the MTP to identify the inter-Nfvi-Pop connectivity."
    },
    "metaData": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "description": "metaData information used to carry ionformat metadata."
    },
    "interNfviPopNetworkSegmentType": {
      "type": "string",
      "description": "5GT - provides the selected segment id, e.g., VLAN Id, VXLAN Id, ... -- see ETSI NFV-IFA 022 6.4.5.2."
    },
    "deleteInterNfviPopConnectivityRequest": {
      "type": "object",
      "required": [
        "interNfviPopConnnectivityIdList",
        "metaData"
      ],
      "properties": {
        "interNfviPopConnnectivityIdList": {
          "$ref": "#/definitions/interNfviPopConnnectivityIdList"
        },
        "metaData": {
          "$ref": "#/definitions/metaData"
        }
      }
    },
    "logicalLinkAttributes": {
      "type": "object",
      "required": [
        "logicalLinkId",
        "srcGwIpAddress",
        "localLinkId",
        "dstGwIpAddress",
        "remoteLinkId"
      ],
      "properties": {
        "logicalLinkId": {
          "type": "string",
          "description": "(numbered) Identifier of the logical link"
        },
        "srcGwIpAddress": {
          "type": "string",
          "description": "5GT - Source NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
        },
        "localLinkId": {
          "format": "uint32",
          "type": "integer",
          "description": "Local Logical Link Id."
        },
        "dstGwIpAddress": {
          "type": "string",
          "description": "5GT - Destination NFVI-PoP Gw IPv4 Address in terms of A.B.C.D (/32)."
        },
        "remoteLinkId": {
          "format": "uint32",
          "type": "integer",
          "description": "Remote Logical Link Id."
        }
      },
      "description": "5GT - inter-Nfvi-Pop connectivity link."
    },
    "logicalLinkPathList": {
      "type": "array",
      "items": {
        "required": [
          "logicalLinkAttributes",
          "reqBandwidth",
          "reqLatency",
          "metadata"
        ],
        "properties": {
          "logicalLinkAttributes": {
            "$ref": "#/definitions/logicalLinkAttributes"
          },
          "reqBandwidth": {
            "type": "number",
            "description": "requested bandwidth (in Mbps)."
          },
          "reqLatency": {
            "type": "number",
            "description": "5GT - requested maximum end-to-end latency (expressed in ms)"
          },
          "metaData": {
            "$ref": "#/definitions/metaData"
          }
        }
      }
    },
    "interNfviPopConnnectivityIdList": {
      "type": "array",
      "items": {
        "required": [
          "interNfviPopConnnectivityId"
        ],
        "properties": {
          "interNfviPopConnnectivityId": {
            "$ref": "#/definitions/interNfviPopConnnectivityId"
          }
        }
      }
    },
    "OperateComputeRequest": {
      "type": "object",
      "required": [
        "computeId",
        "computeOperation"
      ],
      "properties": {
        "computeId": {
          "type": "string",
          "description": "Identifier of the compute resource"
        },
        "computeOperation": {
          "type": "string",
          "description": "Operation Type on the compute resource"
        }
      },
      "description": "Message for request the operating change of the compute resources"
    },
    "AllocateComputeRequest": {
      "properties": {
        "affinityOrAntiAffinityConstraints": {
          "description": "A list of elements with affinity or anti affinity information of the virtualised compute resource to allocate. There should be a relation between the constraints defined in the different elements of the list.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "computeFlavourId": {
          "description": "Identifier of the Compute Flavour that provides information about the particular memory, CPU and disk resources for virtualised compute resource to allocate. The Compute Flavour is created with Create Compute Flavour operation",
          "type": "string"
        },
        "computeName": {
          "description": "Name provided by the consumer for the virtualised compute resource to allocate. It can be used for identifying resources from consumer side.",
          "type": "string"
        },
        "interfaceData": {
          "description": "The data of network interfaces which are specific to a Virtual Compute Resource instance.",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                "type": "string"
              },
              "macAddress": {
                "description": "The MAC address desired for the virtual network interface. The cardinality can be 0 to allow for network interface without specific MAC address configuration.",
                "type": "string"
              }
            },
            "required": [
              "ipAddress",
              "macAddress"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "locationConstraints": {
          "description": "If present, it defines location constraints for the resource(s) is (are) requested to be allocated, e.g. in what particular Resource Zone.",
          "type": "string"
        },
        "metadata": {
          "description": "The binary software image file.",
          "items": {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "reservationId": {
          "description": "Identifier of the resource reservation applicable to this virtualised resource management operation. Cardinality can be 0 if no resource reservation was used.",
          "type": "string"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "userData": {
          "description": "Element containing user data to customize the virtualised compute resource at boot-time.",
          "properties": {
            "content": {
              "description": "String containing the user data to customize a virtualised compute resource at boot-time.",
              "type": "string"
            },
            "method": {
              "description": "Method used as transportation media to convey the content of the UserData to the virtualised compute resource. Possible values: CONFIG-DRIVE.",
              "type": "string"
            }
          },
          "required": [
            "content",
            "method"
          ],
          "type": "object"
        },
        "vcImageId": {
          "description": "Identifier of the virtualisation container software image (e.g. a virtual machine image). Cardinality can be 0 if an \"empty\" virtualisation container is allocated. ",
          "type": "string"
        },
        "mecAppDId": {
          "description": "Identifier of the MEC AppD reference identifier. Cardinality can be 0 if an VM is not allocated for a MEC application. ",
          "type": "string"
        }
      },
      "required": [
        "affinityOrAntiAffinityConstraints",
        "computeFlavourId",
        "computeName",
        "interfaceData",
        "locationConstraints",
        "metadata",
        "reservationId",
        "resourceGroupId",
        "userData",
        "vcImageId",
        "mecAppDId"
      ],
      "type": "object"
    },
    "VIMAllocateComputeRequest": {
      "properties": {
        "affinityOrAntiAffinityConstraints": {
          "description": "A list of elements with affinity or anti affinity information of the virtualised compute resource to allocate. There should be a relation between the constraints defined in the different elements of the list.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "computeFlavourId": {
          "description": "Identifier of the Compute Flavour that provides information about the particular memory, CPU and disk resources for virtualised compute resource to allocate. The Compute Flavour is created with Create Compute Flavour operation",
          "type": "string"
        },
        "computeName": {
          "description": "Name provided by the consumer for the virtualised compute resource to allocate. It can be used for identifying resources from consumer side.",
          "type": "string"
        },
        "interfaceData": {
          "description": "The data of network interfaces which are specific to a Virtual Compute Resource instance.",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                "type": "string"
              },
              "macAddress": {
                "description": "The MAC address desired for the virtual network interface. The cardinality can be 0 to allow for network interface without specific MAC address configuration.",
                "type": "string"
              }
            },
            "required": [
              "ipAddress",
              "macAddress"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "locationConstraints": {
          "description": "If present, it defines location constraints for the resource(s) is (are) requested to be allocated, e.g. in what particular Resource Zone.",
          "type": "string"
        },
        "metadata": {
          "description": "The binary software image file.",
          "items": {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "reservationId": {
          "description": "Identifier of the resource reservation applicable to this virtualised resource management operation. Cardinality can be 0 if no resource reservation was used.",
          "type": "string"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "userData": {
          "description": "Element containing user data to customize the virtualised compute resource at boot-time.",
          "properties": {
            "content": {
              "description": "String containing the user data to customize a virtualised compute resource at boot-time.",
              "type": "string"
            },
            "method": {
              "description": "Method used as transportation media to convey the content of the UserData to the virtualised compute resource. Possible values: CONFIG-DRIVE.",
              "type": "string"
            }
          },
          "required": [
            "content",
            "method"
          ],
          "type": "object"
        },
        "vcImageId": {
          "description": "Identifier of the virtualisation container software image (e.g. a virtual machine image). Cardinality can be 0 if an \"empty\" virtualisation container is allocated. ",
          "type": "string"
        }
      },
      "required": [
        "affinityOrAntiAffinityConstraints",
        "computeFlavourId",
        "computeName",
        "interfaceData",
        "locationConstraints",
        "metadata",
        "reservationId",
        "resourceGroupId",
        "userData",
        "vcImageId"
      ],
      "type": "object"
    },
    "AllocateNetworkRequest": {
      "properties": {
        "affinityOrAntiAffinityConstraints": {
          "description": "The binary software image file.",
          "type": "string"
        },
        "locationConstraints": {
          "description": "Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.",
          "type": "string"
        },
        "metadata": {
          "description": "The binary software image file.",
          "items": {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "networkResourceName": {
          "description": "Name provided by the consumer for the virtualised network resource to allocate. It can be used for identifying resources from consumer side.",
          "type": "string"
        },
        "networkResourceType": {
          "description": "Type of virtualised network resource. Possible values are: \"network\", \"subnet\" or network-port.",
          "type": "string"
        },
        "reservationId": {
          "description": "Identifier of the resource reservation applicable to this virtualised resource management operation.",
          "type": "string"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "typeNetworkData": {
          "description": "The network data provides information about the particular virtual network resource to create. Cardinality can be \"0\" depending on the value of networkResourceType.",
          "type": "string"
        },
        "typeNetworkPortData": {
          "description": "The binary software image file.",
          "type": "string"
        },
        "typeSubnetData": {
          "description": "The binary software image file.",
          "$ref": "#/definitions/SubnetData"
        }
      },
      "required": [
        "affinityOrAntiAffinityConstraints",
        "locationConstraints",
        "metadata",
        "networkResourceName",
        "networkResourceType",
        "reservationId",
        "resourceGroupId",
        "typeNetworkData",
        "typeNetworkPortData",
        "typeSubnetData"
      ],
      "type": "object"
    },
    "AllocateNetworkResult": {
      "properties": {
        "networkData": {
          "description": "If network types are created satisfactorily, it contains the data relative to the instantiated virtualised network resource. Cardinality can be \"0\" if the request did not include creation of such type of resource.",
          "properties": {
            "bandwidth": {
              "description": "Minimum network bandwidth (in Mbps).",
              "type": "number"
            },
            "isShared": {
              "description": "It defines whether the virtualised network is shared among consumers.",
              "type": "boolean"
            },
            "networkPort": {
              "description": "Element providing information of an instantiated virtual network port.",
              "items": {
                "properties": {
                  "attachedResourceId": {
                    "description": "Identifier of the attached resource to the network port (e.g. a virtualised compute resource, or identifier of the virtual network interface). The cardinality can be \"0\" if there is no specific resource connected to the network port.",
                    "type": "string"
                  },
                  "bandwidth": {
                    "description": "The bandwidth of the virtual network port (in Mbps). Cardinality can be \"0\" for virtual network ports without any specific allocated bandwidth.",
                    "type": "number"
                  },
                  "metadata": {
                    "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                    "items": {
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "networkId": {
                    "description": "Identifier of the network that the port belongs to. When creating a port, such port needs to be part of a network.",
                    "type": "string"
                  },
                  "operationalState": {
                    "description": "The operational state of the virtual network port.",
                    "type": "string"
                  },
                  "portType": {
                    "description": "Type of network port. Examples of types are access ports (layer 2 or 3), or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.",
                    "type": "string"
                  },
                  "resourceId": {
                    "description": "Identifier of the virtual network port.",
                    "type": "string"
                  },
                  "segmentId": {
                    "description": "The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be \"0\" for flat networks without any specific segmentation.",
                    "type": "string"
                  }
                },
                "required": [
                  "attachedResourceId",
                  "bandwidth",
                  "networkId",
                  "operationalState",
                  "portType",
                  "resourceId",
                  "segmentId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "networkQoS": {
              "description": "Element providing information about Quality of Service attributes that the network shall support. The cardinality can be \"0\" to allow for networks without any specified QoS requirements.",
              "items": {
                "properties": {
                  "qosName": {
                    "description": "Name given to the QoS parameter.",
                    "type": "string"
                  },
                  "qosValue": {
                    "description": "Value of the QoS parameter.",
                    "type": "string"
                  }
                },
                "required": [
                  "qosName",
                  "qosValue"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "networkResourceId": {
              "description": "Identifier of the virtualised network resource.",
              "type": "string"
            },
            "networkResourceName": {
              "description": "Name of the virtualised network resource.",
              "type": "string"
            },
            "networkType": {
              "description": "The type of network that maps to the virtualised network. This list is extensible. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", \"l3-vpn\", etc. The cardinality can be \"0\" to cover the case where this attribute is not required to create the virtualised network.",
              "type": "string"
            },
            "operationalState": {
              "description": "The operational state of the virtualised network.",
              "type": "string"
            },
            "segmentType": {
              "description": "The isolated segment for the virtualised network. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key. The cardinality can be \"0\" to allow for flat networks without any specific segmentation.",
              "type": "string"
            },
            "sharingCriteria": {
              "description": "Only present for shared networks. Indicate the sharing criteria for this network. This criteria might be a list of authorized consumers.",
              "type": "string"
            },
            "subnet": {
              "description": "Only present if the network provides layer 3 connectivity.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "zoneId": {
              "description": "If present, it identifies the Resource Zone where the virtual network resources have been allocated.",
              "type": "string"
            },
            "metadata": {
              "description": "List of metadata key-value pairs used by the consumer to\n  associate meaningful metadata to the related virtualised resource.",
              "items": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "bandwidth",
            "isShared",
            "networkPort",
            "networkQoS",
            "networkResourceId",
            "networkResourceName",
            "networkType",
            "operationalState",
            "segmentType",
            "sharingCriteria",
            "subnet",
            "zoneId",
            "metadata"
          ],
          "type": "object"
        },
        "networkPortData": {
          "description": "If network types are created satisfactorily, it contains the data relative to the instantiated virtualised network resource. Cardinality can be \"0\" if the request did not include creation of such type of resource.",
          "properties": {
            "attachedResourceId": {
              "description": "Identifier of the attached resource to the network port (e.g. a virtualised compute resource, or identifier of the virtual network interface). The cardinality can be \"0\" if there is no specific resource connected to the network port.",
              "type": "string"
            },
            "bandwidth": {
              "description": "The bandwidth of the virtual network port (in Mbps). Cardinality can be \"0\" for virtual network ports without any specific allocated bandwidth.",
              "type": "number"
            },
            "metadata": {
              "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
              "items": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "networkId": {
              "description": "Identifier of the network that the port belongs to. When creating a port, such port needs to be part of a network.",
              "type": "string"
            },
            "operationalState": {
              "description": "The operational state of the virtual network port.",
              "type": "string"
            },
            "portType": {
              "description": "Type of network port. Examples of types are access ports (layer 2 or 3), or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.",
              "type": "string"
            },
            "resourceId": {
              "description": "Identifier of the virtual network port.",
              "type": "string"
            },
            "segmentId": {
              "description": "The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be \"0\" for flat networks without any specific segmentation.",
              "type": "string"
            }
          },
          "required": [
            "attachedResourceId",
            "bandwidth",
            "networkId",
            "operationalState",
            "portType",
            "resourceId",
            "segmentId"
          ],
          "type": "object"
        },
        "subnetData": {
          "description": "If subnet types are created satisfactorily, it contains the data relative to the allocated subnet. Cardinality can be \"0\" if the request did not include creation of such type of resource.",
          "properties": {
            "addressPool": {
              "description": "Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.",
              "type": "array",
              "items": {
                "type": "integer" 
                }
            },
            "cidr": {
              "description": "The CIDR of the network/subnetwork, i.e. network address and subnet mask.",
              "type": "string"
            },
            "gatewayIp": {
              "description": "The IP address of the network/subnetwork gateway.",
              "type": "string"
            },
            "ipVersion": {
              "description": "The IP version of the network/subnetwork.",
              "type": "string"
            },
            "isDhcpEnabled": {
              "description": "True when DHCP is enabled for this network/subnetwork, or false otherwise.",
              "type": "boolean"
            },
            "metadata": {
              "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
              "items": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "networkId": {
              "description": "The identifier of the virtualised network that the virtualised sub-network is attached to. The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather than a subnetwork.",
              "type": "string"
            },
            "operationalState": {
              "description": "The operational state of the virtualised sub-network.",
              "type": "string"
            },
            "resourceId": {
              "description": "Identifier of the virtualised sub-network.",
              "type": "string"
            }
          },
          "required": [
            "addressPool",
            "cidr",
            "gatewayIp",
            "ipVersion",
            "isDhcpEnabled",
            "networkId",
            "operationalState",
            "resourceId"
          ],
          "type": "object"
        }
      },
      "required": [
        "networkData",
        "networkPortData",
        "subnetData"
      ],
      "type": "object"
    },
    "CapacityInformation": {
      "properties": {
        "allocatedCapacity": {
          "description": "The allocated capacity is usually specified as the current allocated capacity.",
          "type": "string"
        },
        "availableCapacity": {
          "description": "The free capacity available for allocation and reservation. It can be specified in terms of current capacity; or minimum and maximum capacity; average capacity; or other statistical measurement in the specified time interval. The set of measurements is to be defined during Stage 3.",
          "type": "string"
        },
        "reservedCapacity": {
          "description": "The reserved capacity. It can be specified in terms of current capacity; or minimum and maximum capacity; average capacity; or other statistical measurement in the specified time interval. The set of measurements is to be defined during Stage 3.",
          "type": "string"
        },
        "totalCapacity": {
          "description": "The total capacity is usually specified as a fixed capacity without variations in time. The set of measurements is left to Stage 3.",
          "type": "string"
        }
      },
      "required": [
        "allocatedCapacity",
        "availableCapacity",
        "reservedCapacity",
        "totalCapacity"
      ],
      "type": "object"
    },
    "CreateComputeResourceQuotaRequest": {
      "properties": {
        "resourceGroupId": {
          "description": "Name provided by the consumer for the virtualised compute resource to allocate. It can be used for identifying resources from consumer side.",
          "type": "string"
        },
        "virtualComputeQuota": {
          "description": "Identifier of the resource reservation applicable to this virtualised resource management operation. Cardinality can be 0 if no resource reservation was used.",
          "properties": {
            "numVCPUs": {
              "description": "Number of CPU cores to be restricted by the quota. The cardinality can be 0 if no specific number of CPU cores is to be restricted by the quota or the quota for CPU cores is not to be update.",
              "format": "int32",
              "type": "integer"
            },
            "numVcInstances": {
              "description": "Number of virtualisation container instances to be restricted by the quota. The cardinality can be 0 if no specific number of virtualisation container instances is to be restricted by the quota or the quota for virtualisation container instances is not to be update.",
              "format": "int32",
              "type": "integer"
            },
            "virtualMemSize": {
              "description": "Size of virtual memory to be restricted by the quota. The cardinality can be 0 if no specific size of virtual memory is to be restricted by the quota or the quota for virtual memory is not to be update.",
              "type": "number"
            }
          },
          "required": [
            "numVCPUs",
            "numVcInstances",
            "virtualMemSize"
          ],
          "type": "object"
        }
      },
      "required": [
        "resourceGroupId",
        "virtualComputeQuota"
      ],
      "type": "object"
    },
    "CreateComputeResourceReservationRequest": {
      "properties": {
        "affinityConstraint": {
          "description": "Element with affinity information of the virtualised compute resources to reserve. For the resource reservation at resource pool granularity level, it defines the affinity information of the virtual compute pool resources to reserve. For the resource reservation at virtual container granularity level, it defines the affinity information of the virtualisation container(s) to reserve.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "antiAffinityConstraint": {
          "description": "Element with anti-affinity information of the virtualised compute resources to reserve. For the resource reservation at resource pool granularity level, it defines the anti-affinity information of the virtual compute pool resources to reserve. For the resource reservation at virtual container granularity level, it defines the anti-affinity information of the virtualisation container(s) to reserve.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "computePoolReservation": {
          "description": "Amount of compute resources that need to be reserved, e.g. {\"cpu_cores\": 90, \"vm_instances\": 10, \"ram\": 10000}.",
          "properties": {
            "computeAttributes": {
              "description": "Information specifying additional attributes of the compute resource to be reserved.",
              "properties": {
                "accelerationCapability": {
                  "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is requested.",
                  "type": "string"
                },
                "cpuArchitecture": {
                  "description": "CPU architecture type. Examples are \"x86\", \"ARM\". The cardinality can be 0, if no particular CPU architecture type is requested.",
                  "type": "string"
                },
                "virtualCpuOversubscriptionPolicy": {
                  "description": "The CPU core oversubscription policy in terms of virtual CPU cores to physical CPU cores/threads on the platform. The cardinality can be 0, if no particular value is requested.",
                  "type": "string"
                }
              },
              "required": [
                "accelerationCapability",
                "cpuArchitecture",
                "virtualCpuOversubscriptionPolicy"
              ],
              "type": "object"
            },
            "numCpuCores": {
              "description": "Number of CPU cores to be reserved.",
              "format": "int32",
              "type": "integer"
            },
            "numVcInstances": {
              "description": "Number of virtualised container instances to be reserved.",
              "format": "int32",
              "type": "integer"
            },
            "virtualMemSize": {
              "description": "Size of virtual memory to be reserved.",
              "type": "number"
            }
          },
          "required": [
            "computeAttributes",
            "numCpuCores",
            "numVcInstances",
            "virtualMemSize"
          ],
          "type": "object"
        },
        "endTime": {
          "description": "Indication when the reservation ends (when the issuer of the request expects that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.",
          "format": "date-time",
          "type": "string"
        },
        "expiryTime": {
          "description": "Indication when the VIM can release the reservation in case no allocation request against this reservation was made.",
          "format": "date-time",
          "type": "string"
        },
        "locationConstraints": {
          "description": "If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.",
          "type": "string"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "startTime": {
          "description": "Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.",
          "format": "date-time",
          "type": "string"
        },
        "virtualisationContainerReservation": {
          "description": "Virtualisation containers that need to be reserved (e.g. following a specific compute \"flavour\")",
          "items": {
            "properties": {
              "containerFlavour": {
                "description": "The containerFlavour encapsulates information of the virtualisation container to be reserved.",
                "properties": {
                  "accelerationCapability": {
                    "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is requested.",
                    "type": "string"
                  },
                  "flavourId": {
                    "description": "Identifier given to the compute flavour.",
                    "type": "string"
                  },
                  "storageAttributes": {
                    "description": "Element containing information about the size of virtualised storage resources (e.g. size of volume, in GB), the type of storage (e.g. volume, object).",
                    "items": {
                      "properties": {
                        "flavourId": {
                          "description": "Identifier of the storage flavour used to instantiate this virtual storage.",
                          "type": "string"
                        },
                        "hostId": {
                          "description": "Identifier of the host where the virtualised storage resource is allocated. A cardinality of 0 refers to distributed storage solutions.",
                          "type": "string"
                        },
                        "operationalState": {
                          "description": "Operational state of the resource.",
                          "type": "string"
                        },
                        "ownerId": {
                          "description": "Identifier of the virtualised resource that owns and uses such a virtualised storage resource. The value can be NULL if the virtualised storage is not attached yet to any other resource (e.g. a virtual machine).",
                          "type": "string"
                        },
                        "sizeOfStorage": {
                          "description": "Size of virtualised storage resource (e.g. size of volume, in GB).",
                          "type": "number"
                        },
                        "storageId": {
                          "description": "Identifier of the virtualised storage resource.",
                          "type": "string"
                        },
                        "storageName": {
                          "description": "Name of the virtualised storage resource.",
                          "type": "string"
                        },
                        "typeOfStorage": {
                          "description": "Type of virtualised storage resource (e.g. volume, object).",
                          "type": "string"
                        },
                        "zoneId": {
                          "description": "If present, it identifies the Resource Zone where the virtual storage resources have been allocated.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "flavourId",
                        "hostId",
                        "operationalState",
                        "ownerId",
                        "sizeOfStorage",
                        "storageId",
                        "storageName",
                        "typeOfStorage",
                        "zoneId"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "virtualCpu": {
                    "description": "The virtual CPU(s) of the virtualised compute.",
                    "items": {
                      "properties": {
                        "cpuArchitecture": {
                          "description": "CPU architecture type. Examples are x86, ARM.",
                          "type": "string"
                        },
                        "cpuClock": {
                          "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
                          "type": "number"
                        },
                        "numVirtualCpu": {
                          "description": "Number of virtual CPUs.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "virtualCpuOversubscriptionPolicy": {
                          "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no policy has been defined during the allocation request.",
                          "type": "string"
                        },
                        "virtualCpuPinning": {
                          "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
                          "properties": {
                            "cpuMap": {
                              "description": "Shows the association of virtual CPU cores to physical CPU cores.",
                              "type": "string"
                            },
                            "cpuPinningPolicy": {
                              "description": "The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.",
                              "type": "string"
                            },
                            "cpuPinningRules": {
                              "description": "A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "cpuMap",
                            "cpuPinningPolicy",
                            "cpuPinningRules"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "cpuArchitecture",
                        "cpuClock",
                        "numVirtualCpu",
                        "virtualCpuOversubscriptionPolicy",
                        "virtualCpuPinning"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "virtualMemory": {
                    "description": "The virtual memory of the virtualised compute.",
                    "properties": {
                      "numaEnabled": {
                        "description": "It specifies the memory allocation to be cognisant of the relevant process/core allocation.",
                        "type": "boolean"
                      },
                      "virtualMemOversubscriptionPolicy": {
                        "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no policy has been defined during the allocation request.",
                        "type": "string"
                      },
                      "virtualMemSize": {
                        "description": "Amount of virtual Memory (e.g. in MB).",
                        "type": "number"
                      }
                    },
                    "required": [
                      "numaEnabled",
                      "virtualMemOversubscriptionPolicy",
                      "virtualMemSize"
                    ],
                    "type": "object"
                  },
                  "virtualNetworkInterface": {
                    "description": "The virtual network interfaces of the virtualised compute.",
                    "properties": {
                      "accelerationCapability": {
                        "description": "Shows the acceleration capabilities utilized by the virtual network interface. The cardinality can be 0, if no acceleration capability is utilized.",
                        "type": "string"
                      },
                      "bandwidth": {
                        "description": "The bandwidth of the virtual network interface (in Mbps).",
                        "type": "string"
                      },
                      "ipAddress": {
                        "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                        "type": "string"
                      },
                      "macAddress": {
                        "description": "The MAC address of the virtual network interface.",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                        "type": "string"
                      },
                      "networkId": {
                        "description": "In the case when the virtual network interface is attached to the network, it identifies such a network. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.",
                        "type": "string"
                      },
                      "networkPortId": {
                        "description": "If the virtual network interface is attached to a specific network port, it identifies such a network port. The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.",
                        "type": "string"
                      },
                      "operationalState": {
                        "description": "The operational state of the virtual network interface.",
                        "type": "string"
                      },
                      "ownerId": {
                        "description": "Identifier of the owner of the network interface (e.g. a virtualised compute resource). ",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "Identifier of the virtual network interface.",
                        "type": "string"
                      },
                      "typeConfiguration": {
                        "description": "Extra configuration that the virtual network interface supports based on the type of virtual network interface, including support for SR-IOV with configuration of virtual functions (VF).",
                        "type": "string"
                      },
                      "typeVirtualNic": {
                        "description": "Type of network interface. The type allows for defining how such interface is to be realized, e.g. normal virtual NIC, with direct PCI passthrough, etc.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accelerationCapability",
                      "bandwidth",
                      "ipAddress",
                      "macAddress",
                      "metadata",
                      "networkId",
                      "networkPortId",
                      "operationalState",
                      "ownerId",
                      "resourceId",
                      "typeConfiguration",
                      "typeVirtualNic"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "accelerationCapability",
                  "flavourId",
                  "storageAttributes",
                  "virtualCpu",
                  "virtualMemory",
                  "virtualNetworkInterface"
                ],
                "type": "object"
              },
              "containerId": {
                "description": "The identifier of the virtualisation container to be reserved.",
                "type": "string"
              }
            },
            "required": [
              "containerFlavour",
              "containerId"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "affinityConstraint",
        "antiAffinityConstraint",
        "computePoolReservation",
        "endTime",
        "expiryTime",
        "locationConstraints",
        "resourceGroupId",
        "startTime",
        "virtualisationContainerReservation"
      ],
      "type": "object"
    },
    "CreateNetworkResourceQuotaRequest": {
      "properties": {
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "virtualComputeQuota": {
          "description": "Type and configuration of virtualised network resources that need to be restricted by the quota, e.g. {\"numPublicIps\": 20}.",
          "properties": {
            "numPorts": {
              "description": "Number of ports to be restricted by the quota. The cardinality can be 0 if no specific number of ports is to be restricted by the quota or the quota for ports is not to be update.",
              "format": "int32",
              "type": "integer"
            },
            "numPublicIps": {
              "description": "Number of public IP addresses to be restricted by the quota. The cardinality can be 0 if no specific number of public IP addresses is to be restricted by the quota or the quota for public IP addresses is not to be update.",
              "format": "int32",
              "type": "integer"
            },
            "numSubnets": {
              "description": "Number of subnets to be restricted by the quota. The cardinality can be 0 if no specific number of subnets is to be restricted by the quota or the quota for subnets is not to be update.",
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "numPorts",
            "numPublicIps",
            "numSubnets"
          ],
          "type": "object"
        }
      },
      "required": [
        "resourceGroupId",
        "virtualComputeQuota"
      ],
      "type": "object"
    },
    "CreateNetworkResourceReservationRequest": {
      "properties": {
        "affinityConstraint": {
          "description": "Element with anti-affinity information of the virtual network resources to reserve.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "antiAffinityConstraint": {
          "description": "If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.",
          "items": {
            "properties": {
              "affinityAntiAffinityResourceGroup": {
                "description": "Identifier of the producer-managed group of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "type": "string"
              },
              "affinityAntiAffinityResourceList": {
                "description": "Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti-affine. Either affinityAntiAffinityResourceList or affinityAntiAffinityResourceGroup but not both shall be present.",
                "properties": {
                  "resource": {
                    "description": "List of identifiers of virtualised resources.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "scope": {
                "description": "Qualifies the scope of the constraint. In case of compute resource: e.g. \"NFVI-PoP\" or \"NFVI Node\". In case of ports: e.g. \"virtual switch or router\" or \"physical NIC\", or \"physical network\" or \"NFVI Node\". In case of networks: e.g. \"physical NIC\", \"physical network\" or \"NFVI Node\". In case of subnets: it should be ignored. Defaults to \"NFVI Node\" if absent.",
                "type": "string"
              },
              "type": {
                "description": "Indicates whether this is an affinity or anti-affinity constraint.",
                "type": "string"
              }
            },
            "required": [
              "affinityAntiAffinityResourceGroup",
              "affinityAntiAffinityResourceList",
              "scope",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "endTime": {
          "description": "Indication when the reservation ends (when the issuer of the request expects that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.",
          "format": "date-time",
          "type": "string"
        },
        "expiryTime": {
          "description": "Indication when the VIM can release the reservation in case no allocation request against this reservation was made.",
          "format": "date-time",
          "type": "string"
        },
        "locationConstraints": {
          "description": "If present, it defines location constraints for the resource(s) is (are) requested to be reserved, e.g. in what particular Resource Zone.",
          "type": "string"
        },
        "networkReservation": {
          "description": "Type and configuration of virtualised network resources that need to be reserved, e.g. {\"PublicIps\": 20}",
          "properties": {
            "networkAttributes": {
              "description": "Information specifying additional attributes of the network resource to be reserved.",
              "properties": {
                "bandwidth": {
                  "description": "Minimum network bitrate (in Mbps).",
                  "type": "number"
                },
                "isShared": {
                  "description": "It defines whether the virtualised network to be reserved is shared among consumers.",
                  "type": "boolean"
                },
                "metadata": {
                  "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                  "items": {
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "networkType": {
                  "description": "The type of network that maps to the virtualised network to be reserved. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.",
                  "type": "string"
                },
                "segmentType": {
                  "description": "The isolated segment for the virtualised network to be reserved. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key.",
                  "type": "string"
                }
              },
              "required": [
                "bandwidth",
                "isShared",
                "networkType",
                "segmentType"
              ],
              "type": "object"
            },
            "networkPorts": {
              "description": "List of specific network ports to be reserved.",
              "items": {
                "properties": {
                  "bandwidth": {
                    "description": "The bitrate of the virtual network port (in Mbps).",
                    "type": "number"
                  },
                  "metadata": {
                    "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                    "items": {
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "portId": {
                    "description": "Identifier of the network port to reserve.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "portType": {
                    "description": "Type of network port. Examples of types are access ports, or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.",
                    "type": "string"
                  },
                  "segmentId": {
                    "description": "The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be 0 to allow for flat networks without any specific segmentation.",
                    "type": "string"
                  }
                },
                "required": [
                  "bandwidth",
                  "portId",
                  "portType",
                  "segmentId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "numPublicIps": {
              "description": "Number of public IP addresses to be reserved.",
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "networkAttributes",
            "networkPorts",
            "numPublicIps"
          ],
          "type": "object"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "startTime": {
          "description": "Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "affinityConstraint",
        "antiAffinityConstraint",
        "endTime",
        "expiryTime",
        "locationConstraints",
        "networkReservation",
        "resourceGroupId",
        "startTime"
      ],
      "type": "object"
    },
    "Filter": {
      "properties": {
        "filter": {
          "description": "The filter is used to select elements for query purpose.",
          "type": "object"
        }
      },
      "required": [
        "filter"
      ],
      "type": "object"
    },
    "NfviPop": {
      "properties": {
        "geographicalLocationInfo": {
          "description": "It provides information about the geographic location (e.g. geographic coordinates or address of the building, etc.) of the NFVI resources that the VIM manages.",
          "type": "string"
        },
        "networkConnectivityEndpoint": {
          "description": "Information about network connectivity endpoints to the NFVI-PoP that the VIM manages which helps build topology information relative to NFVI-PoP connectivity to other NFVI-PoP or N-PoP.",
          "type": "string"
        },
        "nfviPopId": {
          "description": "Identification of the NFVI-PoP.",
          "type": "string"
        },
        "vimId": {
          "description": "Identification of the VIM.",
          "type": "string"
        }
      },
      "required": [
        "geographicalLocationInfo",
        "networkConnectivityEndpoint",
        "nfviPopId",
        "vimId"
      ],
      "type": "object"
    },
    "QueryComputeCapacityRequest": {
      "properties": {
        "attributeSelector": {
          "description": "Input parameter for selecting which capacity information (i.e. available, total, reserved and/or allocated capacity) is queried. When not present, all four values are requested.",
          "type": "string"
        },
        "computeResourceTypeId": {
          "description": "Identifier of the resource type for which the issuer wants to know the available, total, reserved and/or allocated capacity.",
          "type": "string"
        },
        "resourceCriteria": {
          "description": "Input capacity computation parameter for selecting the virtual memory, virtual CPU and acceleration capabilities for which the issuer wants to know the available, total, reserved and/or allocated capacity. Selecting parameters/attributes that shall be used are defined in the VirtualComputeResourceInformation, VirtualCpuResourceInformation, and VirtualMemoryResourceInformation information elements. This information element and the computeResourceTypeId are mutually exclusive.",
          "type": "string"
        },
        "timePeriod": {
          "description": "The time interval for which capacity is queried. When omitted, an interval starting \"now\" is used. The time interval can be specified since resource reservations can be made for a specified time interval.",
          "properties": {
            "startTime": {
              "description": "Indication when the capacity query period starts.",
              "format": "date-time",
              "type": "string"
            },
            "stopTime": {
              "description": "Indication when the capacity query period stops.",
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "startTime",
            "stopTime"
          ],
          "type": "object"
        },
        "zoneId": {
          "description": "When specified this parameter identifies the resource zone for which the capacity is requested. When not specified the total capacity managed by the VIM instance will be returned.",
          "type": "string"
        }
      },
      "required": [
        "attributeSelector",
        "computeResourceTypeId",
        "resourceCriteria",
        "timePeriod",
        "zoneId"
      ],
      "type": "object"
    },
    "QueryNetworkCapacityRequest": {
      "properties": {
        "attributeSelector": {
          "description": "Input parameter for selecting which capacity information (i.e. available, total, reserved and/or allocated capacity) is queried. When not present, all four values are requested.",
          "type": "string"
        },
        "networkResourceTypeId": {
          "description": "Identifier of the resource type for which the issuer wants to know the available, total, reserved and/or allocated capacity.",
          "type": "string"
        },
        "resourceCriteria": {
          "description": "Input capacity computation parameter for selecting the characteristics of the virtual network for which the issuer wants to know the available, total, reserved and/or allocated capacity. Selecting parameters/attributes that shall be used are defined in the VirtualNetworkResourceInformation information element. This information element and the networkResourceTypeID are mutually exclusive.",
          "type": "string"
        },
        "timePeriod": {
          "description": "The time interval for which capacity is queried. When omitted, an interval starting \"now\" is used. The time interval can be specified since resource reservations can be made for a specified time interval.",
          "properties": {
            "startTime": {
              "description": "Indication when the capacity query period starts.",
              "format": "date-time",
              "type": "string"
            },
            "stopTime": {
              "description": "Indication when the capacity query period stops.",
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "startTime",
            "stopTime"
          ],
          "type": "object"
        },
        "zoneId": {
          "description": "When specified this parameter identifies the resource zone for which the capacity is requested. When not specified the total capacity managed by the VIM instance will be returned.",
          "type": "string"
        }
      },
      "required": [
        "attributeSelector",
        "networkResourceTypeId",
        "resourceCriteria",
        "timePeriod",
        "zoneId"
      ],
      "type": "object"
    },
    "ReservedVirtualCompute": {
      "properties": {
        "computePoolReserved": {
          "description": "Information about compute resources that have been reserved, e.g. {\"cpu_cores\": 90, \"vm_instances\": 10, \"ram\": 10000}",
          "properties": {
            "computeAttributes": {
              "description": "Information specifying additional attributes of the virtual compute resource that have been reserved.",
              "properties": {
                "accelerationCapability": {
                  "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
                  "type": "string"
                },
                "cpuArchitecture": {
                  "description": "CPU architecture type. Examples are \"x86\", \"ARM\". The cardinality can be 0, if no particular CPU architecture type is provided.",
                  "type": "string"
                },
                "virtualCpuOversubscriptionPolicy": {
                  "description": "The CPU core oversubscription policy in terms of virtual CPU cores to physical CPU cores/threads on the platform. The cardinality can be 0, if no particular value is provided.",
                  "type": "string"
                }
              },
              "required": [
                "accelerationCapability",
                "cpuArchitecture",
                "virtualCpuOversubscriptionPolicy"
              ],
              "type": "object"
            },
            "numCpuCores": {
              "description": "Number of CPU cores that have been reserved.",
              "format": "int32",
              "type": "integer"
            },
            "numVcInstances": {
              "description": "Number of virtual container instances that have been reserved.",
              "format": "int32",
              "type": "integer"
            },
            "virtualMemSize": {
              "description": "Size of virtual memory that has been reserved.",
              "type": "number"
            },
            "zoneId": {
              "description": "References the resource zone where the virtual compute resources have been reserved. Cardinality can be 0 to cover the case where reserved compute resources are not bound to a specific resource zone.",
              "type": "string"
            }
          },
          "required": [
            "computeAttributes",
            "numCpuCores",
            "numVcInstances",
            "virtualMemSize",
            "zoneId"
          ],
          "type": "object"
        },
        "endTime": {
          "description": "Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.",
          "format": "date-time",
          "type": "string"
        },
        "expiryTime": {
          "description": "Indication when the VIM can release the reservation in case no allocation request against this reservation was made.",
          "format": "date-time",
          "type": "string"
        },
        "reservationId": {
          "description": "Identifier of the resource reservation.",
          "type": "string"
        },
        "reservationStatus": {
          "description": "Status of the compute resource reservation, e.g. to indicate if a reservation is being used.",
          "type": "string"
        },
        "startTime": {
          "description": "Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.",
          "format": "date-time",
          "type": "string"
        },
        "virtualisationContainerReserved": {
          "description": "Information about the virtualisation container(s) that have been reserved.",
          "properties": {
            "accelerationCapability": {
              "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
              "type": "string"
            },
            "containerId": {
              "description": "The identifier of the virtualisation container that has been reserved.",
              "type": "string"
            },
            "flavourId": {
              "description": "Identifier of the given compute flavour used to reserve the virtualisation container.",
              "items": {
                "properties": {
                  "computeAttributes": {
                    "description": "Information specifying additional attributes of the virtual compute resource that have been reserved.",
                    "properties": {
                      "accelerationCapability": {
                        "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
                        "type": "string"
                      },
                      "cpuArchitecture": {
                        "description": "CPU architecture type. Examples are \"x86\", \"ARM\". The cardinality can be 0, if no particular CPU architecture type is provided.",
                        "type": "string"
                      },
                      "virtualCpuOversubscriptionPolicy": {
                        "description": "The CPU core oversubscription policy in terms of virtual CPU cores to physical CPU cores/threads on the platform. The cardinality can be 0, if no particular value is provided.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accelerationCapability",
                      "cpuArchitecture",
                      "virtualCpuOversubscriptionPolicy"
                    ],
                    "type": "object"
                  },
                  "numCpuCores": {
                    "description": "Number of CPU cores that have been reserved.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "numVcInstances": {
                    "description": "Number of virtual container instances that have been reserved.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "virtualMemSize": {
                    "description": "Size of virtual memory that has been reserved.",
                    "type": "number"
                  },
                  "zoneId": {
                    "description": "References the resource zone where the virtual compute resources have been reserved. Cardinality can be 0 to cover the case where reserved compute resources are not bound to a specific resource zone.",
                    "type": "string"
                  }
                },
                "required": [
                  "computeAttributes",
                  "numCpuCores",
                  "numVcInstances",
                  "virtualMemSize",
                  "zoneId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "virtualCpu": {
              "description": "The virtual CPU(s) of the reserved virtualisation container.",
              "properties": {
                "cpuArchitecture": {
                  "description": "CPU architecture type. Examples are x86, ARM.",
                  "type": "string"
                },
                "cpuClock": {
                  "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
                  "type": "number"
                },
                "numVirtualCpu": {
                  "description": "Number of virtual CPUs.",
                  "format": "int32",
                  "type": "integer"
                },
                "virtualCpuOversubscriptionPolicy": {
                  "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no policy has been defined during the allocation request.",
                  "type": "string"
                },
                "virtualCpuPinning": {
                  "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
                  "properties": {
                    "cpuMap": {
                      "description": "Shows the association of virtual CPU cores to physical CPU cores.",
                      "type": "string"
                    },
                    "cpuPinningPolicy": {
                      "description": "The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.",
                      "type": "string"
                    },
                    "cpuPinningRules": {
                      "description": "A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "cpuMap",
                    "cpuPinningPolicy",
                    "cpuPinningRules"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "cpuArchitecture",
                "cpuClock",
                "numVirtualCpu",
                "virtualCpuOversubscriptionPolicy",
                "virtualCpuPinning"
              ],
              "type": "object"
            },
            "virtualDisks": {
              "description": "Element with information of the virtualised storage resources attached to the reserved virtualisation container.",
              "items": {
                "properties": {
                  "flavourId": {
                    "description": "Identifier of the storage flavour used to instantiate this virtual storage.",
                    "type": "string"
                  },
                  "hostId": {
                    "description": "Identifier of the host where the virtualised storage resource is allocated. A cardinality of 0 refers to distributed storage solutions.",
                    "type": "string"
                  },
                  "operationalState": {
                    "description": "Operational state of the resource.",
                    "type": "string"
                  },
                  "ownerId": {
                    "description": "Identifier of the virtualised resource that owns and uses such a virtualised storage resource. The value can be NULL if the virtualised storage is not attached yet to any other resource (e.g. a virtual machine).",
                    "type": "string"
                  },
                  "sizeOfStorage": {
                    "description": "Size of virtualised storage resource (e.g. size of volume, in GB).",
                    "type": "number"
                  },
                  "storageId": {
                    "description": "Identifier of the virtualised storage resource.",
                    "type": "string"
                  },
                  "storageName": {
                    "description": "Name of the virtualised storage resource.",
                    "type": "string"
                  },
                  "typeOfStorage": {
                    "description": "Type of virtualised storage resource (e.g. volume, object).",
                    "type": "string"
                  },
                  "zoneId": {
                    "description": "If present, it identifies the Resource Zone where the virtual storage resources have been allocated.",
                    "type": "string"
                  }
                },
                "required": [
                  "flavourId",
                  "hostId",
                  "operationalState",
                  "ownerId",
                  "sizeOfStorage",
                  "storageId",
                  "storageName",
                  "typeOfStorage",
                  "zoneId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "virtualMemory": {
              "description": "The virtual memory of the reserved virtualisation container.",
              "properties": {
                "numaEnabled": {
                  "description": "It specifies the memory allocation to be cognisant of the relevant process/core allocation.",
                  "type": "boolean"
                },
                "virtualMemOversubscriptionPolicy": {
                  "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no policy has been defined during the allocation request.",
                  "type": "string"
                },
                "virtualMemSize": {
                  "description": "Amount of virtual Memory (e.g. in MB).",
                  "type": "number"
                }
              },
              "required": [
                "numaEnabled",
                "virtualMemOversubscriptionPolicy",
                "virtualMemSize"
              ],
              "type": "object"
            },
            "virtualNetworkInterface": {
              "description": "Element with information of the virtual network interfaces of the reserved virtualisation container.",
              "items": {
                "properties": {
                  "accelerationCapability": {
                    "description": "Shows the acceleration capabilities utilized by the virtual network interface. The cardinality can be 0, if no acceleration capability is utilized.",
                    "type": "string"
                  },
                  "bandwidth": {
                    "description": "The bandwidth of the virtual network interface (in Mbps).",
                    "type": "string"
                  },
                  "ipAddress": {
                    "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                    "type": "string"
                  },
                  "macAddress": {
                    "description": "The MAC address of the virtual network interface.",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                    "type": "string"
                  },
                  "networkId": {
                    "description": "In the case when the virtual network interface is attached to the network, it identifies such a network. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.",
                    "type": "string"
                  },
                  "networkPortId": {
                    "description": "If the virtual network interface is attached to a specific network port, it identifies such a network port. The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.",
                    "type": "string"
                  },
                  "operationalState": {
                    "description": "The operational state of the virtual network interface.",
                    "type": "string"
                  },
                  "ownerId": {
                    "description": "Identifier of the owner of the network interface (e.g. a virtualised compute resource). ",
                    "type": "string"
                  },
                  "resourceId": {
                    "description": "Identifier of the virtual network interface.",
                    "type": "string"
                  },
                  "typeConfiguration": {
                    "description": "Extra configuration that the virtual network interface supports based on the type of virtual network interface, including support for SR-IOV with configuration of virtual functions (VF).",
                    "type": "string"
                  },
                  "typeVirtualNic": {
                    "description": "Type of network interface. The type allows for defining how such interface is to be realized, e.g. normal virtual NIC, with direct PCI passthrough, etc.",
                    "type": "string"
                  }
                },
                "required": [
                  "accelerationCapability",
                  "bandwidth",
                  "ipAddress",
                  "macAddress",
                  "metadata",
                  "networkId",
                  "networkPortId",
                  "operationalState",
                  "ownerId",
                  "resourceId",
                  "typeConfiguration",
                  "typeVirtualNic"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "zoneId": {
              "description": "References the resource zone where the virtualisation container has been reserved. Cardinality can be 0 to cover the case where reserved network resources are not bound to a specific resource zone.",
              "type": "string"
            }
          },
          "required": [
            "accelerationCapability",
            "containerId",
            "flavourId",
            "virtualCpu",
            "virtualDisks",
            "virtualMemory",
            "virtualNetworkInterface",
            "zoneId"
          ],
          "type": "object"
        }
      },
      "required": [
        "computePoolReserved",
        "endTime",
        "expiryTime",
        "reservationId",
        "reservationStatus",
        "startTime",
        "virtualisationContainerReserved"
      ],
      "type": "object"
    },
    "ReservedVirtualNetwork": {
      "properties": {
        "endTime": {
          "description": "Indication when the reservation ends (when it is expected that the resources will no longer be needed) and used by the VIM to schedule the reservation. If not present, resources are reserved for unlimited usage time.",
          "format": "date-time",
          "type": "string"
        },
        "expiryTime": {
          "description": "Indication when the VIM can release the reservation in case no allocation request against this reservation was made.",
          "format": "date-time",
          "type": "string"
        },
        "networkAttributes": {
          "description": "Information specifying additional attributes of the network resource that has been reserved.",
          "properties": {
            "bandwidth": {
              "description": "Minimum network bitrate (in Mbps).",
              "type": "number"
            },
            "isShared": {
              "description": "It defines whether the virtualised network that has been reserved is shared among consumers.",
              "type": "boolean"
            },
            "metadata": {
              "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
              "items": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "networkType": {
              "description": "The type of network that maps to the virtualised network that has been reserved. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.",
              "type": "string"
            },
            "segmentType": {
              "description": "The isolated segment for the virtualised network that has been reserved. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key.",
              "type": "string"
            }
          },
          "required": [
            "bandwidth",
            "isShared",
            "networkType",
            "segmentType"
          ],
          "type": "object"
        },
        "networkPorts": {
          "description": "List of specific network ports that have been reserved.",
          "items": {
            "properties": {
              "bandwidth": {
                "description": "The bitrate of the virtual network port (in Mbps)",
                "type": "number"
              },
              "metadata": {
                "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "portId": {
                "description": "Identifier of the network port that has been reserved.",
                "type": "string"
              },
              "portType": {
                "description": "Type of network port. Examples of types are access ports, or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.",
                "type": "string"
              },
              "segmentId": {
                "description": "The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be 0 to allow for flat networks without any specific segmentation.",
                "type": "string"
              }
            },
            "required": [
              "bandwidth",
              "portId",
              "portType",
              "segmentId"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "publicIps": {
          "description": "List of public IP addresses that have been reserved.",
          "type": "string"
        },
        "reservationId": {
          "description": "Identifier of the resource reservation.",
          "type": "string"
        },
        "reservationStatus": {
          "description": "Status of the network resource reservation, e.g. to indicate if a reservation is being used.",
          "type": "string"
        },
        "startTime": {
          "description": "Indication when the consumption of the resources starts. If the value is 0, resources are reserved for immediate use.",
          "format": "date-time",
          "type": "string"
        },
        "zoneId": {
          "description": "References the resource zone where the virtual network resources have been reserved. Cardinality can be 0 to cover the case where reserved network resources are not bound to a specific resource zone.",
          "type": "string"
        }
      },
      "required": [
        "endTime",
        "expiryTime",
        "networkAttributes",
        "networkPorts",
        "publicIps",
        "reservationId",
        "reservationStatus",
        "startTime",
        "zoneId"
      ],
      "type": "object"
    },
    "ResourceGroupIds": {
      "properties": {
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        }
      },
      "required": [
        "resourceGroupId"
      ],
      "type": "object"
    },
    "ResourceZone": {
      "properties": {
        "metadata": {
          "description": "Other metadata associated to the Resource Zone.",
          "items": {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "nfviPopId": {
          "description": "The identifier of the NFVI-PoP the Resource Zone belongs to.",
          "type": "string"
        },
        "zoneId": {
          "description": "The identifier of the Resource Zone.",
          "type": "string"
        },
        "zoneName": {
          "description": "The name of the Resource Zone.",
          "type": "string"
        },
        "zoneProperty": {
          "description": "Set of properties that define the capabilities associated to the Resource Zone. Examples of capabilities may include: support of certain compute resource types (e.g. low performance, acceleration capabilities, etc. association to certain NFVI-PoP physical segregation (e.g. different power or network sub-systems, availability of redundancy power sub-systems), etc.",
          "type": "string"
        },
        "zoneState": {
          "description": "Information about the current state of the Resource Zone, e.g. if the Resource Zone is available.",
          "type": "string"
        }
      },
      "required": [
        "nfviPopId",
        "zoneId",
        "zoneName",
        "zoneProperty",
        "zoneState"
      ],
      "type": "object"
    },
    "SoftwareImageAddQuery": {
      "properties": {
        "name": {
          "description": "The name of the software image.",
          "type": "string"
        },
        "provider": {
          "description": "The provider of the software image.",
          "type": "string"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "softwareImage": {
          "description": "The binary software image file.",
          "type": "string"
        },
        "userMetadata": {
          "description": "User-defined metadata.",
          "items": {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "version": {
          "description": "The version of the software image.",
          "type": "string"
        },
        "visibility": {
          "description": "Controls the visibility of the image. In case of \"private\" value the image is available only for the tenant assigned to the provided resourceGroupId and the administrator tenants of the VIM while in case of \"public\" value, all tenants of the VIM can use the image.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "provider",
        "resourceGroupId",
        "softwareImage",
        "userMetadata",
        "version",
        "visibility"
      ],
      "type": "object"
    },
    "SoftwareImageInformation": {
      "properties": {
        "checksum": {
          "description": "The checksum of the software image file.",
          "type": "string"
        },
        "containerFormat": {
          "description": "The container format indicates whether the software image is in a file format that also contains metadata about the actual software.",
          "type": "string"
        },
        "createdAt": {
          "description": "The created time of this software image.",
          "type": "string"
        },
        "diskFormat": {
          "description": "The disk format of a software image is the format of the underlying disk image.",
          "type": "string"
        },
        "id": {
          "description": "The identifier of this software image.",
          "type": "string"
        },
        "minDisk": {
          "description": "The minimal Disk for this software image.",
          "type": "string"
        },
        "minRam": {
          "description": "The minimal RAM for this software image.",
          "type": "string"
        },
        "name": {
          "description": "The name of this software image.",
          "type": "string"
        },
        "provider": {
          "description": "The provider of this software image.",
          "type": "string"
        },
        "size": {
          "description": "The size of this software image.",
          "type": "string"
        },
        "status": {
          "description": "The status of this software image.",
          "type": "string"
        },
        "updatedAt": {
          "description": "The updated time of this software image.",
          "type": "string",
          "x-nullable": true
        },
        "version": {
          "description": "The version of this software image.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "checksum",
        "containerFormat",
        "createdAt",
        "diskFormat",
        "id",
        "minDisk",
        "minRam",
        "name",
        "provider",
        "size",
        "status",
        "updatedAt",
        "version"
      ],
      "type": "object"
    },
    "VirtualCompute": {
      "properties": {
        "accelerationCapability": {
          "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "computeId": {
          "description": "Identifier of the virtualised compute resource.",
          "type": "string"
        },
        "computeName": {
          "description": "Name of the virtualised compute resource.",
          "type": "string"
        },
        "flavourId": {
          "description": "Identifier of the given compute flavour used to instantiate this virtual compute.",
          "type": "string"
        },
        "hostId": {
          "description": "Identifier of the host the virtualised compute resource is allocated on.",
          "type": "string"
        },
        "operationalState": {
          "description": "Operational state of the compute resource.",
          "type": "string"
        },
        "vcImageId": {
          "description": "Identifier of the virtualisation container software image (e.g. virtual machine image). Cardinality can be 0 if an \"empty\" virtualisation container is allocated.",
          "type": "string"
        },
        "virtualCpu": {
          "description": "The virtual CPU(s) of the virtualised compute.",
          "properties": {
            "cpuArchitecture": {
              "description": "CPU architecture type. Examples are x86, ARM.",
              "type": "string"
            },
            "cpuClock": {
              "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
              "type": "number"
            },
            "numVirtualCpu": {
              "description": "Number of virtual CPUs.",
              "format": "int32",
              "type": "integer"
            },
            "virtualCpuOversubscriptionPolicy": {
              "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no policy has been defined during the allocation request.",
              "type": "string"
            },
            "virtualCpuPinning": {
              "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
              "properties": {
                "cpuMap": {
                  "description": "Shows the association of virtual CPU cores to physical CPU cores.",
                  "type": "string"
                },
                "cpuPinningPolicy": {
                  "description": "The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.",
                  "type": "string"
                },
                "cpuPinningRules": {
                  "description": "A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.",
                  "type": "string"
                }
              },
              "required": [
                "cpuMap",
                "cpuPinningPolicy",
                "cpuPinningRules"
              ],
              "type": "object"
            }
          },
          "required": [
            "cpuArchitecture",
            "cpuClock",
            "numVirtualCpu",
            "virtualCpuOversubscriptionPolicy",
            "virtualCpuPinning"
          ],
          "type": "object"
        },
        "virtualDisks": {
          "description": "Element with information of the virtualised storage resources (volumes, ephemeral that are attached to the compute resource.)",
          "type": "string"
        },
        "virtualMemory": {
          "description": "The virtual memory of the compute.",
          "properties": {
            "numaEnabled": {
              "description": "It specifies the memory allocation to be cognisant of the relevant process/core allocation.",
              "type": "boolean"
            },
            "virtualMemOversubscriptionPolicy": {
              "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no policy has been defined during the allocation request.",
              "type": "string"
            },
            "virtualMemSize": {
              "description": "Amount of virtual Memory (e.g. in MB).",
              "type": "number"
            }
          },
          "required": [
            "numaEnabled",
            "virtualMemOversubscriptionPolicy",
            "virtualMemSize"
          ],
          "type": "object"
        },
        "virtualNetworkInterface": {
          "description": "Element with information of the instantiated virtual network interfaces of the compute resource.",
          "items": {
            "properties": {
              "accelerationCapability": {
                "description": "Shows the acceleration capabilities utilized by the virtual network interface. The cardinality can be 0, if no acceleration capability is utilized.",
                "type": "string"
              },
              "bandwidth": {
                "description": "The bandwidth of the virtual network interface (in Mbps).",
                "type": "string"
              },
              "ipAddress": {
                "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                "type": "string"
              },
              "macAddress": {
                "description": "The MAC address of the virtual network interface.",
                "type": "string"
              },
              "metadata": {
                "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                "type": "string"
              },
              "networkId": {
                "description": "In the case when the virtual network interface is attached to the network, it identifies such a network. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.",
                "type": "string"
              },
              "networkPortId": {
                "description": "If the virtual network interface is attached to a specific network port, it identifies such a network port. The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.",
                "type": "string"
              },
              "operationalState": {
                "description": "The operational state of the virtual network interface.",
                "type": "string"
              },
              "ownerId": {
                "description": "Identifier of the owner of the network interface (e.g. a virtualised compute resource). ",
                "type": "string"
              },
              "resourceId": {
                "description": "Identifier of the virtual network interface.",
                "type": "string"
              },
              "typeConfiguration": {
                "description": "Extra configuration that the virtual network interface supports based on the type of virtual network interface, including support for SR-IOV with configuration of virtual functions (VF).",
                "type": "string"
              },
              "typeVirtualNic": {
                "description": "Type of network interface. The type allows for defining how such interface is to be realized, e.g. normal virtual NIC, with direct PCI passthrough, etc.",
                "type": "string"
              }
            },
            "required": [
              "accelerationCapability",
              "bandwidth",
              "ipAddress",
              "macAddress",
              "metadata",
              "networkId",
              "networkPortId",
              "operationalState",
              "ownerId",
              "resourceId",
              "typeConfiguration",
              "typeVirtualNic"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "zoneId": {
          "description": "If present, it identifies the Resource Zone where the virtual compute resources have been allocated.",
          "type": "string"
        },
        "mecappID": {
          "description": "If present, it identifies the reference MEC AppD reference Descritptor to apply for the allocated compute resources",
          "type": "string"
        }
      },
      "required": [
        "accelerationCapability",
        "computeId",
        "computeName",
        "flavourId",
        "hostId",
        "operationalState",
        "vcImageId",
        "virtualCpu",
        "virtualDisks",
        "virtualMemory",
        "virtualNetworkInterface",
        "zoneId",
        "mecappID"
      ],
      "type": "object"
    },
    "VIMVirtualCompute": {
      "properties": {
        "accelerationCapability": {
          "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "computeId": {
          "description": "Identifier of the virtualised compute resource.",
          "type": "string"
        },
        "computeName": {
          "description": "Name of the virtualised compute resource.",
          "type": "string"
        },
        "flavourId": {
          "description": "Identifier of the given compute flavour used to instantiate this virtual compute.",
          "type": "string"
        },
        "hostId": {
          "description": "Identifier of the host the virtualised compute resource is allocated on.",
          "type": "string"
        },
        "operationalState": {
          "description": "Operational state of the compute resource.",
          "type": "string"
        },
        "vcImageId": {
          "description": "Identifier of the virtualisation container software image (e.g. virtual machine image). Cardinality can be 0 if an \"empty\" virtualisation container is allocated.",
          "type": "string"
        },
        "virtualCpu": {
          "description": "The virtual CPU(s) of the virtualised compute.",
          "properties": {
            "cpuArchitecture": {
              "description": "CPU architecture type. Examples are x86, ARM.",
              "type": "string"
            },
            "cpuClock": {
              "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
              "type": "number"
            },
            "numVirtualCpu": {
              "description": "Number of virtual CPUs.",
              "format": "int32",
              "type": "integer"
            },
            "virtualCpuOversubscriptionPolicy": {
              "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no policy has been defined during the allocation request.",
              "type": "string"
            },
            "virtualCpuPinning": {
              "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
              "properties": {
                "cpuMap": {
                  "description": "Shows the association of virtual CPU cores to physical CPU cores.",
                  "type": "string"
                },
                "cpuPinningPolicy": {
                  "description": "The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.",
                  "type": "string"
                },
                "cpuPinningRules": {
                  "description": "A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.",
                  "type": "string"
                }
              },
              "required": [
                "cpuMap",
                "cpuPinningPolicy",
                "cpuPinningRules"
              ],
              "type": "object"
            }
          },
          "required": [
            "cpuArchitecture",
            "cpuClock",
            "numVirtualCpu",
            "virtualCpuOversubscriptionPolicy",
            "virtualCpuPinning"
          ],
          "type": "object"
        },
        "virtualDisks": {
          "description": "Element with information of the virtualised storage resources (volumes, ephemeral that are attached to the compute resource.)",
          "type": "string"
        },
        "virtualMemory": {
          "description": "The virtual memory of the compute.",
          "properties": {
            "numaEnabled": {
              "description": "It specifies the memory allocation to be cognisant of the relevant process/core allocation.",
              "type": "boolean"
            },
            "virtualMemOversubscriptionPolicy": {
              "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no policy has been defined during the allocation request.",
              "type": "string"
            },
            "virtualMemSize": {
              "description": "Amount of virtual Memory (e.g. in MB).",
              "type": "number"
            }
          },
          "required": [
            "numaEnabled",
            "virtualMemOversubscriptionPolicy",
            "virtualMemSize"
          ],
          "type": "object"
        },
        "virtualNetworkInterface": {
          "description": "Element with information of the instantiated virtual network interfaces of the compute resource.",
          "items": {
            "properties": {
              "accelerationCapability": {
                "description": "Shows the acceleration capabilities utilized by the virtual network interface. The cardinality can be 0, if no acceleration capability is utilized.",
                "type": "string"
              },
              "bandwidth": {
                "description": "The bandwidth of the virtual network interface (in Mbps).",
                "type": "string"
              },
              "ipAddress": {
                "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "macAddress": {
                "description": "The MAC address of the virtual network interface.",
                "type": "string"
              },
              "metadata": {
                "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                "type": "string"
              },
              "networkId": {
                "description": "In the case when the virtual network interface is attached to the network, it identifies such a network. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.",
                "type": "string"
              },
              "networkPortId": {
                "description": "If the virtual network interface is attached to a specific network port, it identifies such a network port. The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.",
                "type": "string"
              },
              "operationalState": {
                "description": "The operational state of the virtual network interface.",
                "type": "string"
              },
              "ownerId": {
                "description": "Identifier of the owner of the network interface (e.g. a virtualised compute resource). ",
                "type": "string"
              },
              "resourceId": {
                "description": "Identifier of the virtual network interface.",
                "type": "string"
              },
              "typeConfiguration": {
                "description": "Extra configuration that the virtual network interface supports based on the type of virtual network interface, including support for SR-IOV with configuration of virtual functions (VF).",
                "type": "string"
              },
              "typeVirtualNic": {
                "description": "Type of network interface. The type allows for defining how such interface is to be realized, e.g. normal virtual NIC, with direct PCI passthrough, etc.",
                "type": "string"
              }
            },
            "required": [
              "accelerationCapability",
              "bandwidth",
              "ipAddress",
              "macAddress",
              "metadata",
              "networkId",
              "networkPortId",
              "operationalState",
              "ownerId",
              "resourceId",
              "typeConfiguration",
              "typeVirtualNic"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "zoneId": {
          "description": "If present, it identifies the Resource Zone where the virtual compute resources have been allocated.",
          "type": "string"
        }
      },
      "required": [
        "accelerationCapability",
        "computeId",
        "computeName",
        "flavourId",
        "hostId",
        "operationalState",
        "vcImageId",
        "virtualCpu",
        "virtualDisks",
        "virtualMemory",
        "virtualNetworkInterface",
        "zoneId"
      ],
      "type": "object"
    },
    "VirtualComputeFlavour": {
      "properties": {
        "accelerationCapability": {
          "description": "Selected acceleration capabilities (e.g. crypto, GPU) from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is requested.",
          "type": "string"
        },
        "flavourId": {
          "description": "Identifier given to the compute flavour.",
          "type": "string"
        },
        "storageAttributes": {
          "description": "Element containing information about the size of virtualised storage resources (e.g. size of volume, in GB), the type of storage (e.g. volume, object).",
          "items": {
            "properties": {
              "flavourId": {
                "description": "Identifier of the storage flavour used to instantiate this virtual storage.",
                "type": "string"
              },
              "hostId": {
                "description": "Identifier of the host where the virtualised storage resource is allocated. A cardinality of 0 refers to distributed storage solutions.",
                "type": "string"
              },
              "operationalState": {
                "description": "Operational state of the resource.",
                "type": "string"
              },
              "ownerId": {
                "description": "Identifier of the virtualised resource that owns and uses such a virtualised storage resource. The value can be NULL if the virtualised storage is not attached yet to any other resource (e.g. a virtual machine).",
                "type": "string"
              },
              "sizeOfStorage": {
                "description": "Size of virtualised storage resource (e.g. size of volume, in GB).",
                "type": "number"
              },
              "storageId": {
                "description": "Identifier of the virtualised storage resource.",
                "type": "string"
              },
              "storageName": {
                "description": "Name of the virtualised storage resource.",
                "type": "string"
              },
              "typeOfStorage": {
                "description": "Type of virtualised storage resource (e.g. volume, object).",
                "type": "string"
              },
              "zoneId": {
                "description": "If present, it identifies the Resource Zone where the virtual storage resources have been allocated.",
                "type": "string"
              }
            },
            "required": [
              "flavourId",
              "hostId",
              "operationalState",
              "ownerId",
              "sizeOfStorage",
              "storageId",
              "storageName",
              "typeOfStorage",
              "zoneId"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "virtualCpu": {
          "description": "The virtual CPU(s) of the virtualised compute.",
          "items": {
            "properties": {
              "cpuArchitecture": {
                "description": "CPU architecture type. Examples are x86, ARM.",
                "type": "string"
              },
              "cpuClock": {
                "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
                "type": "number"
              },
              "numVirtualCpu": {
                "description": "Number of virtual CPUs.",
                "format": "int32",
                "type": "integer"
              },
              "virtualCpuOversubscriptionPolicy": {
                "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no policy has been defined during the allocation request.",
                "type": "string"
              },
              "virtualCpuPinning": {
                "description": "The virtual CPU pinning configuration for the virtualised compute resource.",
                "properties": {
                  "cpuMap": {
                    "description": "Shows the association of virtual CPU cores to physical CPU cores.",
                    "type": "string"
                  },
                  "cpuPinningPolicy": {
                    "description": "The policy can take values of \"static\" or \"dynamic\". In case of \"static\" the virtual CPU cores have been allocated to physical CPU cores according to the rules defined in cpuPinningRules. In case of \"dynamic\" the allocation of virtual CPU cores to physical CPU cores is decided by the VIM.",
                    "type": "string"
                  },
                  "cpuPinningRules": {
                    "description": "A list of rules that should be considered during the allocation of the virtual CPUs to physical CPUs in case of \"static\" cpuPinningPolicy.",
                    "type": "string"
                  }
                },
                "required": [
                  "cpuMap",
                  "cpuPinningPolicy",
                  "cpuPinningRules"
                ],
                "type": "object"
              }
            },
            "required": [
              "cpuArchitecture",
              "cpuClock",
              "numVirtualCpu",
              "virtualCpuOversubscriptionPolicy",
              "virtualCpuPinning"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "virtualMemory": {
          "description": "The virtual memory of the virtualised compute.",
          "properties": {
            "numaEnabled": {
              "description": "It specifies the memory allocation to be cognisant of the relevant process/core allocation.",
              "type": "boolean"
            },
            "virtualMemOversubscriptionPolicy": {
              "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no policy has been defined during the allocation request.",
              "type": "string"
            },
            "virtualMemSize": {
              "description": "Amount of virtual Memory (e.g. in MB).",
              "type": "number"
            }
          },
          "required": [
            "numaEnabled",
            "virtualMemOversubscriptionPolicy",
            "virtualMemSize"
          ],
          "type": "object"
        },
        "virtualNetworkInterface": {
          "description": "The virtual network interfaces of the virtualised compute.",
          "properties": {
            "accelerationCapability": {
              "description": "Shows the acceleration capabilities utilized by the virtual network interface. The cardinality can be 0, if no acceleration capability is utilized.",
              "type": "string"
            },
            "bandwidth": {
              "description": "The bandwidth of the virtual network interface (in Mbps).",
              "type": "string"
            },
            "ipAddress": {
              "description": "The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network, or when an IP address can be automatically configured, e.g. by DHCP.",
              "type": "string"
            },
            "macAddress": {
              "description": "The MAC address of the virtual network interface.",
              "type": "string"
            },
            "metadata": {
              "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
              "type": "string"
            },
            "networkId": {
              "description": "In the case when the virtual network interface is attached to the network, it identifies such a network. The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.",
              "type": "string"
            },
            "networkPortId": {
              "description": "If the virtual network interface is attached to a specific network port, it identifies such a network port. The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.",
              "type": "string"
            },
            "operationalState": {
              "description": "The operational state of the virtual network interface.",
              "type": "string"
            },
            "ownerId": {
              "description": "Identifier of the owner of the network interface (e.g. a virtualised compute resource). ",
              "type": "string"
            },
            "resourceId": {
              "description": "Identifier of the virtual network interface.",
              "type": "string"
            },
            "typeConfiguration": {
              "description": "Extra configuration that the virtual network interface supports based on the type of virtual network interface, including support for SR-IOV with configuration of virtual functions (VF).",
              "type": "string"
            },
            "typeVirtualNic": {
              "description": "Type of network interface. The type allows for defining how such interface is to be realized, e.g. normal virtual NIC, with direct PCI passthrough, etc.",
              "type": "string"
            }
          },
          "required": [
            "accelerationCapability",
            "bandwidth",
            "ipAddress",
            "macAddress",
            "metadata",
            "networkId",
            "networkPortId",
            "operationalState",
            "ownerId",
            "resourceId",
            "typeConfiguration",
            "typeVirtualNic"
          ],
          "type": "object"
        }
      },
      "required": [
        "accelerationCapability",
        "flavourId",
        "storageAttributes",
        "virtualCpu",
        "virtualMemory",
        "virtualNetworkInterface"
      ],
      "type": "object"
    },
    "VirtualComputeQuota": {
      "properties": {
        "numVCPUs": {
          "description": "Number of CPU cores that have been restricted by the quota. The cardinality can be 0 if no specific number of CPU cores has been requested to be restricted by the quota.",
          "format": "int32",
          "type": "integer"
        },
        "numVcInstances": {
          "description": "Number of virtualisation container instances that have been restricted by the quota. The cardinality can be 0 if no specific number of CPU cores has been requested to be restricted by the quota.",
          "format": "int32",
          "type": "integer"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        },
        "virtualMemSize": {
          "description": "Size of virtual memory that has been restricted by the quota. The cardinality can be 0 if no specific number of CPU cores has been requested to be restricted by the quota.",
          "type": "number"
        }
      },
      "required": [
        "numVCPUs",
        "numVcInstances",
        "resourceGroupId",
        "virtualMemSize"
      ],
      "type": "object"
    },
    "VirtualComputeResourceInformation": {
      "properties": {
        "accelerationCapability": {
          "description": "Acceleration capabilities (e.g. crypto, GPU) for the consumable virtualised compute resources from the set of capabilities offered by the compute node acceleration resources. The cardinality can be 0, if no particular acceleration capability is provided.",
          "type": "string"
        },
        "computeResourceTypeId": {
          "description": "Identifier of the consumable virtualised compute resource type.",
          "type": "string"
        },
        "virtualCPU": {
          "description": "It defines the virtual CPU(s) characteristics of the consumable virtualised compute resource.",
          "properties": {
            "cpuArchitecture": {
              "description": "CPU architecture type. Examples are x86, ARM.",
              "type": "string"
            },
            "cpuClock": {
              "description": "Minimum CPU clock rate (e.g. in MHz) available for the virtualised CPU resources.",
              "type": "number"
            },
            "numVirtualCpu": {
              "description": "Number of virtual CPUs. Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.",
              "type": "number"
            },
            "virtualCpuOversubscriptionPolicy": {
              "description": "The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality can be 0 if no concrete policy is defined.",
              "type": "string"
            },
            "virtualCpuPinningSupported": {
              "description": "It defines whether CPU pinning capability is available on the consumable virtualised compute resource.",
              "type": "boolean"
            }
          },
          "required": [
            "cpuArchitecture",
            "cpuClock",
            "numVirtualCpu",
            "virtualCpuOversubscriptionPolicy",
            "virtualCpuPinningSupported"
          ],
          "type": "object"
        },
        "virtualMemory": {
          "description": "It defines the virtual memory characteristics of the consumable virtualised compute resource.",
          "properties": {
            "numaSupported": {
              "description": "It specifies if the memory allocation can be cognisant of the relevant process/core allocation.",
              "type": "boolean"
            },
            "virtualMemOversubscriptionPolicy": {
              "description": "The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 0 if no concrete policy is defined.",
              "type": "string"
            },
            "virtualMemSize": {
              "description": "Amount of virtual memory (e.g. in MB). Cardinality \"1\" covers the case where a specific configuration for the consumable resource is advertised.",
              "type": "number"
            }
          },
          "required": [
            "numaSupported",
            "virtualMemOversubscriptionPolicy",
            "virtualMemSize"
          ],
          "type": "object"
        }
      },
      "required": [
        "accelerationCapability",
        "computeResourceTypeId",
        "virtualCPU",
        "virtualMemory"
      ],
      "type": "object"
    },
    "VirtualNetwork": {
      "properties": {
        "bandwidth": {
          "description": "Minimum network bandwidth (in Mbps).",
          "type": "number"
        },
        "isShared": {
          "description": "It defines whether the virtualised network is shared among consumers.",
          "type": "boolean"
        },
        "networkPort": {
          "description": "Element providing information of an instantiated virtual network port.",
          "items": {
            "properties": {
              "attachedResourceId": {
                "description": "Identifier of the attached resource to the network port (e.g. a virtualised compute resource, or identifier of the virtual network interface). The cardinality can be \"0\" if there is no specific resource connected to the network port.",
                "type": "string"
              },
              "bandwidth": {
                "description": "The bandwidth of the virtual network port (in Mbps). Cardinality can be \"0\" for virtual network ports without any specific allocated bandwidth.",
                "type": "number"
              },
              "metadata": {
                "description": "List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "networkId": {
                "description": "Identifier of the network that the port belongs to. When creating a port, such port needs to be part of a network.",
                "type": "string"
              },
              "operationalState": {
                "description": "The operational state of the virtual network port.",
                "type": "string"
              },
              "portType": {
                "description": "Type of network port. Examples of types are access ports (layer 2 or 3), or trunk ports (layer 1) that become transport for multiple layer 2 or layer 3 networks.",
                "type": "string"
              },
              "resourceId": {
                "description": "Identifier of the virtual network port.",
                "type": "string"
              },
              "segmentId": {
                "description": "The isolated segment the network port belongs to. For instance, for a \"vlan\", it corresponds to the vlan identifier; and for a \"gre\", this corresponds to a gre key. The cardinality can be \"0\" for flat networks without any specific segmentation.",
                "type": "string"
              }
            },
            "required": [
              "attachedResourceId",
              "bandwidth",
              "networkId",
              "operationalState",
              "portType",
              "resourceId",
              "segmentId"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "networkQoS": {
          "description": "Element providing information about Quality of Service attributes that the network shall support. The cardinality can be \"0\" to allow for networks without any specified QoS requirements.",
          "items": {
            "properties": {
              "qosName": {
                "description": "Name given to the QoS parameter.",
                "type": "string"
              },
              "qosValue": {
                "description": "Value of the QoS parameter.",
                "type": "string"
              }
            },
            "required": [
              "qosName",
              "qosValue"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "networkResourceId": {
          "description": "Identifier of the virtualised network resource.",
          "type": "string"
        },
        "networkResourceName": {
          "description": "Name of the virtualised network resource.",
          "type": "string"
        },
        "networkType": {
          "description": "The type of network that maps to the virtualised network. This list is extensible. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", \"l3-vpn\", etc. The cardinality can be \"0\" to cover the case where this attribute is not required to create the virtualised network.",
          "type": "string"
        },
        "operationalState": {
          "description": "The operational state of the virtualised network.",
          "type": "string"
        },
        "segmentType": {
          "description": "The isolated segment for the virtualised network. For instance, for a \"vlan\" networkType, it corresponds to the vlan identifier; and for a \"gre\" networkType, this corresponds to a gre key. The cardinality can be \"0\" to allow for flat networks without any specific segmentation.",
          "type": "string"
        },
        "sharingCriteria": {
          "description": "Only present for shared networks. Indicate the sharing criteria for this network. This criteria might be a list of authorized consumers.",
          "type": "string"
        },
        "subnet": {
          "description": "Only present if the network provides layer 3 connectivity.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "zoneId": {
          "description": "If present, it identifies the Resource Zone where the virtual network resources have been allocated.",
          "type": "string"
        }
      },
      "required": [
        "bandwidth",
        "isShared",
        "networkPort",
        "networkQoS",
        "networkResourceId",
        "networkResourceName",
        "networkType",
        "operationalState",
        "segmentType",
        "sharingCriteria",
        "subnet",
        "zoneId"
      ],
      "type": "object"
    },
    "VirtualNetworkQuota": {
      "properties": {
        "numPorts": {
          "description": "Number of ports that have been restricted by the quota. The cardinality can be 0 if no specific number of ports has been requested to be restricted by the quota.",
          "format": "int32",
          "type": "integer"
        },
        "numPublicIps": {
          "description": "Number of public IP addresses that have been restricted by the quota. The cardinality can be 0 if no specific number of public IP addresses has been requested to be restricted by the quota.",
          "format": "int32",
          "type": "integer"
        },
        "numSubnets": {
          "description": "Number of subnets that have been restricted by the quota. The cardinality can be 0 if no specific number of subnets has been requested to be restricted by the quota.",
          "format": "int32",
          "type": "integer"
        },
        "resourceGroupId": {
          "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
          "type": "string"
        }
      },
      "required": [
        "numPorts",
        "numPublicIps",
        "numSubnets",
        "resourceGroupId"
      ],
      "type": "object"
    },
    "VirtualNetworkResourceInformation": {
      "properties": {
        "bandwidth": {
          "description": "Minimum network bandwidth (in Mbps).",
          "type": "number"
        },
        "networkQoS": {
          "description": "Element providing information about Quality of Service attributes that the network shall support.",
          "items": {
            "properties": {
              "qosName": {
                "description": "Name given to the QoS parameter.",
                "type": "string"
              },
              "qosValue": {
                "description": "Value of the QoS parameter.",
                "type": "string"
              }
            },
            "required": [
              "qosName",
              "qosValue"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "networkResourceTypeId": {
          "description": "Identifier of the network resource type.",
          "type": "string"
        },
        "networkType": {
          "description": "The type of network that maps to the virtualised network. Examples are: \"local\", \"vlan\", \"vxlan\", \"gre\", etc.",
          "type": "string"
        }
      },
      "required": [
        "bandwidth",
        "networkQoS",
        "networkResourceTypeId",
        "networkType"
      ],
      "type": "object"
    }
  },
  "info": {
    "description": "MTP Manager API",
    "termsOfService": "/tos",
    "title": "MTP Manager API",
    "version": "2.0"
  },
  "paths": {
    "/service/requests": {
      "get": {
        "summary": "Retrieve a list of MEC service requests.",
        "description": "Retrieve a list of MEC service requests.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of MEC service requests.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MECTrafficServiceCreationRequest"
              }
            }
          }
        },
        "tags": [
          "MECResources"
        ]
      },
      "post": {
        "summary": "Create MEC service rules.",
        "description": "Create MEC service rules.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mecTrafficServiceCreationRequest",
            "in": "body",
            "required": true,
            "description": "Information about the MEC app, including required services, traffic rules, etc.",
            "schema": {
              "$ref": "#/definitions/MECTrafficServiceCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MEC service created successfully.",
            "schema": {
              "$ref": "#/definitions/MECTrafficServiceCreationResponse"
            }
          },
          "401": {
            "description": "MEC service creation failed."
          }
        },
        "tags": [
          "MECResources"
        ]
      }
    },
    "/service/requests/{RequestId}": {
      "get": {
        "summary": "Retrieve information about a MEC service request.",
        "description": "Retrieve information about a MEC service request.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RequestId",
            "in": "path",
            "required": true,
            "description": "Request identifier.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MEC service request information.",
            "schema": {
              "$ref": "#/definitions/MECTrafficServiceCreationRequest"
            }
          },
          "404": {
            "description": "Service not found."
          }
        },
        "tags": [
          "MECResources"
        ]
      },
      "delete": {
        "summary": "Delete service.",
        "description": "Delete service identified by the given request ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RequestId",
            "in": "path",
            "required": true,
            "description": "Request identifier.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "MEC service deleted successfully."
          },
          "404": {
            "description": "Service not found."
          }
        },
        "tags": [
          "MECResources"
        ]
      }
    },
    "/service/regions": {
      "get": {
        "summary": "Retrieve a list of all covered regions.",
        "description": "Retrieve a list of MEC regions, reporting their identifiers and location information.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of regions.",
            "schema": {
              "type": "object",
              "properties": {
                "regions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MECRegionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "MECResources"
        ]
      }
    },
    "/service/regions/{RegionId}": {
      "get": {
        "summary": "Retrieve a list of MEC service requests for the given region.",
        "description": "Retrieve a list of MEC service requests for the given region.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RegionId",
            "in": "path",
            "required": true,
            "description": "Region identifier.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of MEC service requests.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MECTrafficServiceCreationRequest"
              }
            }
          },
          "404": {
            "description": "Region not found."
          }
        },
        "tags": [
          "MECResources"
        ]
      }
    },
    "/abstract-radio-coveragearea": {
      "get": {
        "summary": "Retrieve Radio Coverage Area info for Radio PoP capable",
        "description": "Retrieve Radio Coverage Area info for Radio PoP capable",
        "operationId": "collect_radio_coveragearea_information",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "Regions": {
                  "$ref": "#/definitions/RadioCoverageAreaList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "RadioResources"
        ]
      }
    },
    "/abstract-network": {
      "get": {
        "summary": "Retrieve aggregated WAN Connectivity",
        "description": "Retrieve aggregated WAN Connectivity",
        "operationId": "collect_wim_abstracted_information",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "gateways": {
                  "$ref": "#/definitions/gateways"
                },
                "virtualLinks": {
                  "$ref": "#/definitions/virtualLinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "WIMNetworkResources"
        ]
      }
    },
    "/network-resources/{networkId}": {
      "delete": {
        "parameters": [
          {
            "name": "networkId",
            "in": "path",
            "description": "Identifier of the virtualised network resource(s) to be terminated.",
            "required": true,
            "type": "string"
          }
        ],
        "operationId": "terminateNetworks",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkIds"
              }
            },
            "description": "Identifier(s) of the virtualised network resource(s) successfully terminated."
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "produces": [
          "application/json"
        ],
        "tags": [
          "WIMNetworkResources"
        ]
      }
    },
    "/network-resources": {
      "get": {
        "parameters": [
          {
            "name": "networkQueryFilter",
            "schema": {
              "$ref": "#/definitions/Filter"
            },
            "in": "body",
            "required": true,
            "description": "Query filter based on e.g. name, identifier, meta-data information or status information, expressing the type of information to be retrieved. It can also be used to specify one or more resources to be queried by providing their identifiers."
          }
        ],
        "operationId": "queryNetworks",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VirtualNetwork"
              }
            },
            "description": "Element containing information about the virtual network resource(s) matching the filter. The cardinality can be 0 if no matching network resources exist."
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "produces": [
          "application/json"
        ],
        "tags": [
          "WIMNetworkResources"
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/definitions/AllocateParameters"
            },
            "in": "body",
            "required": true
          }
        ],
        "operationId": "allocateNetwork",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/AllocateReply"
            },
            "description": "Identifier of the created Compute Flavour."
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "flavour already added"
          }
        },
        "produces": [
          "application/json"
        ],
        "tags": [
          "WIMNetworkResources"
        ]
      }
    },
    "/mecapp/onboard": {
      "get": {
        "summary": "Retrieve a list of onboarded application packages.",
        "description": "Retrieve a list of onboarded application packages.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of onboarded application packages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppD"
              }
            }
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/mecapp/onboard/{AppDId}": {
      "get": {
        "summary": "Retrieve information about a specific application package.",
        "description": "Retrieve information about a specific application package.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "AppDId",
            "in": "path",
            "required": true,
            "description": "Application package identifier.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application package information.",
            "schema": {
              "$ref": "#/definitions/AppD"
            }
          },
          "404": {
            "description": "Application package not onboarded."
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/abstract-resources": {
      "get": {
        "summary": "Retrieve aggregated Cloud NFVI-PoP and Inter-NFVI-PoP Connectivity",
        "description": "Retrieve aggregated Cloud NFVI-PoP and Inter-NFVI-PoP Connectivity",
        "operationId": "collect_mtp_cloud_network_resource_information",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "NfviPops": {
                  "$ref": "#/definitions/NfviPops"
                },
                "logicalLinkInterNfviPops": {
                  "$ref": "#/definitions/logicalLinkInterNfviPops"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/abstract-federated-resources": {
      "get": {
        "summary": "Retrieve aggregated Cloud NFVI-PoP and Inter-NFVI-PoP Connectivity for Federation",
        "description": "Retrieve aggregated Cloud NFVI-PoP and Inter-NFVI-PoP Connectivity for Federation",
        "operationId": "collect_mtp_federated_cloud_network_resource_information",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "NfviPops": {
                  "$ref": "#/definitions/NfviPops"
                },
                "logicalLinkInterNfviPops": {
                  "$ref": "#/definitions/logicalLinkInterNfviPops"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/abstract-network-resources": {
      "post": {
        "tags": [
          "SOInterface"
        ],
        "summary": "Create inter-NFVI-PoP connectivity",
        "description": "",
        "operationId": "create_inter_nfviPoP_connectivity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create inter-NfviPop Connectivity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/interNfviPopConnectivityRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "interNfviPopConnnectivityId",
                  "interNfviPopNetworkSegmentType"
                ],
                "properties": {
                  "interNfviPopConnnectivityId": {
                    "$ref": "#/definitions/interNfviPopConnnectivityId"
                  },
                  "interNfviPopNetworkSegmentType": {
                    "$ref": "#/definitions/interNfviPopNetworkSegmentType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "SOInterface"
        ],
        "summary": "Delete inter-NFVI-PoP connectivity",
        "description": "",
        "operationId": "delete_inter_nfviPoP_connectivity",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Delete inter-NfviPop Connectivity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleteInterNfviPopConnectivityRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/abstract-compute-resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Terminate abstract compute resources",
        "operationId": "terminateResources",
        "parameters": [
          {
            "description": "Identifier(s) of the virtualised compute resource(s) to be terminated.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "computeId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Identifier(s) of the virtualised compute resource(s) successfully terminated.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "SOInterface"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "summary": "Allocate abstract compute resources",
        "operationId": "allocateAbstractCompute",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocateComputeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information of the newly instantiated abstracted virtualised compute resource.",
            "schema": {
              "$ref": "#/definitions/VirtualCompute"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "software image already added"
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/abstract_compute_operate_resources": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "abstractOperateCompute",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperateComputeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information of the newly instantiated virtualised compute resource.",
            "schema": {
              "$ref": "#/definitions/VirtualCompute"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "software image already added"
          }
        },
        "tags": [
          "SOInterface"
        ]
      }
    },
    "/compute_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "terminateAbstractResources",
        "parameters": [
          {
            "description": "Identifier(s) of the abstract compute resource(s) to be terminated.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "computeId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Identifier(s) of the virtualised compute resource(s) successfully terminated.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryResources",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the virtual compute resource(s) matching the filter. The cardinality can be 0 if no matching compute resources exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VIMVirtualCompute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateCompute",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VIMAllocateComputeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information of the newly instantiated virtualised compute resource.",
            "schema": {
              "$ref": "#/definitions/VIMVirtualCompute"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "software image already added"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_operate_resources": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "operateCompute",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperateComputeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information of the newly instantiated virtualised compute resource.",
            "schema": {
              "$ref": "#/definitions/VIMVirtualCompute"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "software image already added"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/capacities": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryComputeCapacity",
        "parameters": [
          {
            "in": "query",
            "name": "ComputeResourceTypeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The capacity during the requested time period. The scope is according to parameter zoneId of the request during the time interval.",
            "schema": {
              "$ref": "#/definitions/CapacityInformation"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/flavours": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryFlavors",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the virtual compute resource(s) matching the filter. The cardinality can be 0 if no matching compute resources exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualComputeFlavour"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createFlavour",
        "parameters": [
          {
            "in": "body",
            "name": "Flavour",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualComputeFlavour"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Identifier of the created Compute Flavour.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "flavour already added"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/flavours/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteFlavours",
        "parameters": [
          {
            "description": "Identifier of the Compute Flavour to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No output parameters"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/information": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryComputeInformation",
        "parameters": [
          {
            "description": "Filter defining the information of consumable virtualised resources on which the query applies.",
            "in": "query",
            "name": "zoneId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Virtualised compute resource information in the VIM that satisfies the query condition.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualComputeResourceInformation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/nfvi_pop_compute_information": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNFVIPoPComputeInformation",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The filtered information that has been retrieved. The cardinality can be 0 if no matching information exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/NfviPop"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/compute_resources/resource_zones": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryComputeResourceZone",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The filtered information that has been retrieved about the Resource Zone. The cardinality can be 0 if no matching information exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ResourceZone"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMComputeResources"
        ]
      }
    },
    "/healthz": {
      "get": {
        "description": "<br/>",
        "responses": {
          "200": {
            "description": "Healthcheck"
          }
        },
        "summary": "Healthcheck"
      }
    },
    "/information": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNetworkInformation",
        "parameters": [
          {
            "description": "Filter defining the information of consumable virtualised resources on which the query applies.",
            "in": "body",
            "name": "informationQueryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Filter"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Virtualised network resource information in the VIM that satisfies the query condition.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualNetworkResourceInformation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResourcesInformation"
        ]
      }
    },
    "/network_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "VIMterminateNetworks",
        "parameters": [
          {
            "description": "Identifier of the virtualised network resource(s) to be terminated.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "networkResourceId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Identifier(s) of the virtualised network resource(s) successfully terminated.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResources",
          "SOInterface"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "VIMqueryNetworks",
        "parameters": [
          {
            "description": "Query filter based on e.g. name, identifier, meta-data information or status information, expressing the type of information to be retrieved. It can also be used to specify one or more resources to be queried by providing their identifiers.",
            "in": "body",
            "name": "networkQueryFilter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Filter"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the virtual network resource(s) matching the filter. The cardinality can be 0 if no matching network resources exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualNetwork"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResources",
          "SOInterface"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "VIMallocateNetwork",
        "parameters": [
          {
            "in": "body",
            "name": "params",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocateNetworkRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Identifier of the created Compute Flavour.",
            "schema": {
              "$ref": "#/definitions/AllocateNetworkResult"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "network already added"
          }
        },
        "tags": [
          "VIMNetworkResources",
          "SOInterface"
        ]
      }
    },
    "/network_resources/capacities": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNetworkCapacity",
        "parameters": [
          {
            "in": "body",
            "name": "QueryNetworkCapacityRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryNetworkCapacityRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The capacity during the requested time period. The scope is according to parameter zoneId of the request during the time interval.",
            "schema": {
              "$ref": "#/definitions/CapacityInformation"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResources"
        ]
      }
    },
    "/network_resources/free_vlan": {
      "get": {
        "summary": "Retrieve free vlan tag from VIM domain",
        "description": "Retrieve free vlan tag from VIM domain",
        "operationId": "free_vlan",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The filtered information that has been retrieved. The cardinality can be 0 if no matching information exist.",
            "schema": {
              "items": {
                type: number
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResources"
        ]
      }
    },
    "/network_resources/nfvi-pop-network-information": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNFVIPoPNetworkInformation",
        "parameters": [
          {
            "description": "Input filter for selecting information to query.",
            "in": "body",
            "name": "NfviPopNetworkInformationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Filter"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The filtered information that has been retrieved. The cardinality can be 0 if no matching information exist.",
            "schema": {
              "items": {
                "$ref": "#/definitions/NfviPop"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMNetworkResources"
        ]
      }
    },
    "/quotas/compute_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "terminateComputeQuota",
        "parameters": [
          {
            "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "resourceGroupId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryComputeQuota",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the quota resource. The cardinality can be 0 if no matching quota exists.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualComputeQuota"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createComputeQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComputeResourceQuotaRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information about the quota resource.",
            "schema": {
              "$ref": "#/definitions/VirtualComputeQuota"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      }
    },
    "/quotas/network_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "terminateNetworkQuota",
        "parameters": [
          {
            "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "resourceGroupId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unique identifier of the \"infrastructure resource group\", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.",
            "schema": {
              "$ref": "#/definitions/ResourceGroupIds"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNetworkQuota",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the quota resource(s) matching the filter. The cardinality can be 0 if no matching quota exists.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VirtualNetworkQuota"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createNetworkQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNetworkResourceQuotaRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information about the quota resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkQuota"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": ""
          }
        },
        "tags": [
          "VIMResourceQuota"
        ]
      }
    },
    "/reservations/compute_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "terminateComputeReservation",
        "parameters": [
          {
            "description": "Identifier of the resource reservation(s) to terminate.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "reservationId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Identifier of the resource reservation(s) successfully terminated.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryComputeReservation",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the reserved resource. Cardinality is 0 if the query did not return any result.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ReservedVirtualCompute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createComputeReservation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComputeResourceReservationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information about the reserved resource.",
            "schema": {
              "$ref": "#/definitions/ReservedVirtualCompute"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": ""
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      }
    },
    "/reservations/network_resources": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "terminateNetworkReservation",
        "parameters": [
          {
            "description": "Identifier of the resource reservation(s) to terminate.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "reservationId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Identifier of the resource reservation(s) successfully terminated.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "queryNetworkReservation",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Element containing information about the reserved resource. Cardinality is 0 if the query did not return any result.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ReservedVirtualNetwork"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createNetworkReservation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNetworkResourceReservationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Element containing information about the reserved resource.",
            "schema": {
              "$ref": "#/definitions/ReservedVirtualNetwork"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": ""
          }
        },
        "tags": [
          "VIMResourceReservation"
        ]
      }
    },
    "/software_images": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "querySoftwareImages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The information of all software images matching the query.",
            "schema": {
              "items": {
                "$ref": "#/definitions/SoftwareImageInformation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMSoftwareImages"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "addSoftwareImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoftwareImageAddQuery"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Metadata about the Software Image that has been added.",
            "schema": {
              "$ref": "#/definitions/SoftwareImageInformation"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "software image already added"
          }
        },
        "tags": [
          "VIMSoftwareImages"
        ]
      }
    },
    "/software_images/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteSoftwareImage",
        "parameters": [
          {
            "description": "The identifier of the software image to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The identifier of the software image successfully deleted.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "VIMSoftwareImages"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "querySoftwareImage",
        "parameters": [
          {
            "description": "The identifier of the software image to be queried.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The information of the software image matching the query.",
            "schema": {
              "$ref": "#/definitions/SoftwareImageInformation"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "VIMSoftwareImages"
        ]
      }
    }
  },
  "swagger": "2.0"
}